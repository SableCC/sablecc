/* This file was generated by SableCC's ObjectMacro. */

package org.test.back_old;

public class MCommaSeparator extends Macro{

    private Macro list_X[];

    private final Context XContext = new Context();

    public MCommaSeparator(Macro pX[]){

        this.setPX(pX);
    }

    private void setPX(Macro pX[]){
        if(pX == null){
            throw ObjectMacroException.parameterNull("X");
        }

        Macro macros[] = pX;
        this.list_X = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "X");
            }

            macro.apply(new InternalsInitializer("X"){
@Override
void setEmptyMacro(MEmptyMacro mEmptyMacro){

        }
});

            this.list_X[i++] = macro;

        }
    }

    private String buildX(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = XContext;
        Macro macros[] = this.list_X;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        if(first) {
  first = false;
}
else {
           sb0.append(", ");
}

            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private Macro[] getX(){

        return this.list_X;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setCommaSeparator(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                        minsert_1.setX(null, getX());
        sb0.append(minsert_1.build(null));
        sb0.append(".");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
