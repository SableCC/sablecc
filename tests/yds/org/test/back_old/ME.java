/* This file was generated by SableCC's ObjectMacro. */

package org.test.back_old;

import java.util.*;

public class ME extends Macro{

    private Map<Context, String> field_S = new LinkedHashMap<>();

    private Map<Context, String> field_T = new LinkedHashMap<>();

    private Map<Context, String> field_U = new LinkedHashMap<>();

    public ME(){
    }

    void setS(
            Context context,
            String value) {

        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }

        this.field_S.put(context, value);
    }

    void setT(
            Context context,
            String value) {

        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }

        this.field_T.put(context, value);
    }

    void setU(
            Context context,
            String value) {

        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }

        this.field_U.put(context, value);
    }

    private String buildS(Context context){

        return this.field_S.get(context);
    }

    private String buildT(Context context){

        return this.field_T.get(context);
    }

    private String buildU(Context context){

        return this.field_U.get(context);
    }

    private String getS(Context context){

        return this.field_S.get(context);
    }

    private String getT(Context context){

        return this.field_T.get(context);
    }

    private String getU(Context context){

        return this.field_U.get(context);
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setE(this);
    }

    @Override
     String build(Context context){

        BuildState buildState = this.build_states.get(context);

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("E");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_states.put(context, buildState);

        
        
        StringBuilder sb0 = new StringBuilder();

        sb0.append(buildS(context));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildT(context));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildU(context));

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
}
