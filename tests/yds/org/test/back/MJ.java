/* This file was generated by SableCC's ObjectMacro. */

package org.test.back;

import java.util.*;

public class MJ extends Macro{

    private Map<Context, InternalValue> list_Y = new LinkedHashMap<>();


    public MJ(){



    }

    void setY(
                Context context,
                InternalValue internal_value) {

            if(internal_value == null){
                throw new RuntimeException("macros cannot be null");
            }

            this.list_Y.put(context, internal_value);
        }

    private String buildY(){
        StringBuilder sb = new StringBuilder();
        Context local_context = context;
        List<Macro> macros = this.list_Y;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.YNone != null){
            sb.append(this.YNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.YBeforeFirst != null){
                expansion = this.YBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.YAfterLast != null){
                expansion = this.YAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.YSeparator != null){
                expansion = this.YSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }

    private InternalValue getY(Context context){
        return this.list_Y.get(context);
    }


    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setJ(this);
    }

   @Override
    public String build(Context context){

        BuildState buildState = this.build_states.get(context);

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("J");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_states.put(context, buildState);

        

        

        StringBuilder sb0 = new StringBuilder();

        sb0.append(buildY(context));

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }

}