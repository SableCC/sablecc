/* This file was generated by SableCC's ObjectMacro. */

package org.test.back;

import java.util.*;

public class MCommaSeparator extends Macro{

    private final List<Macro> list_X;
    private DSeparator XSeparator;

    private DBeforeFirst XBeforeFirst;

    private DAfterLast XAfterLast;

    private DNone XNone;
    private final InternalValue XValue;

    private final Context XContext = new Context();

    public MCommaSeparator(){


    this.list_X = new ArrayList<>();

    this.XValue = new InternalValue(this.list_X, this.XContext);
    }

    public void addX(MEmptyMacro macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("X");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("EmptyMacro");
        }

        this.list_X.add(macro);
    }

    private String buildX(){
        StringBuilder sb = new StringBuilder();
        Context local_context = XContext;
        List<Macro> macros = this.list_X;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.XNone != null){
            sb.append(this.XNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.XBeforeFirst != null){
                expansion = this.XBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.XAfterLast != null){
                expansion = this.XAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.XSeparator != null){
                expansion = this.XSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }

    private InternalValue getX(){
        return this.XValue;
    }
    private void initXInternals(Context context){
        for(Macro macro : this.list_X){
            macro.apply(new InternalsInitializer("X"){
@Override
void setEmptyMacro(MEmptyMacro mEmptyMacro){

    
    
}
});
        }
    }

    private void initXDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(", ");
this.XSeparator = new DSeparator(sb0.toString());
this.XValue.setSeparator(this.XSeparator);
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setCommaSeparator(this);
    }

   @Override
    public String build(){

        BuildState buildState = this.build_state;

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("CommaSeparator");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;

        initXDirectives();

        initXInternals(null);

        StringBuilder sb0 = new StringBuilder();

        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
        
                minsert_1.setX(null, getX());
        sb0.append(minsert_1.build(null));
        sb0.append(".");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }

    @Override
    String build(Context context) {
        return build();
    }
}