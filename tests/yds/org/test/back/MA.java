/* This file was generated by SableCC's ObjectMacro. */
package org.test.back;

import java.util.*;

public class MA extends Macro{


    private String field_X;
    private Macro list_Y[];
    private Macro list_Z[];

    private final Context YContext = new Context();    private final Context ZContext = new Context();

    public MA(Macro pX[], String pX, Macro pY[], Macro pZ[]){

        this.setPX(pX);        this.setPZ(pZ);        this.setPY(pY);

    }


    private void setPX( String pX ){
        if(pX == null){
            throw ObjectMacroException.parameterNull("X");
        }

        this.field_X = pX;
    }
    private void setPY(Macro pY[]){
        if(pY == null){
            throw ObjectMacroException.parameterNull("Y");
        }

        Macro macros[] = pY;
        this.list_Y = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "$name");
            }

            macro.apply(new InternalsInitializer("Y"){
@Override
void setEmptyMacro(MEmptyMacro mEmptyMacro){

            sb0.append(", ");
    
}@Override
void setEmptyMacro(MEmptyMacro mEmptyMacro){

            sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
            minsert_1.setX(null, getX(context));
}@Override
void setB(MB mB){

            sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
        sb0.append("Le corps de C : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
            minsert_1.setX(null, getX(context));
}
});

            this.list_Y[i++] = macro;

        }
    }
    private void setPZ(Macro pZ[]){
        if(pZ == null){
            throw ObjectMacroException.parameterNull("Z");
        }

        Macro macros[] = pZ;
        this.list_Z = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "$name");
            }

            macro.apply(new InternalsInitializer("Z"){
@Override
void setEmptyMacro(MEmptyMacro mEmptyMacro){

            sb0.append(", ");
    
}@Override
void setEmptyMacro(MEmptyMacro mEmptyMacro){

            sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
            minsert_1.setX(null, getX(context));
}@Override
void setB(MB mB){

            sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
        sb0.append("Le corps de C : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
            minsert_1.setX(null, getX(context));
}@Override
void setC(MC mC){

            sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
        sb0.append("Le corps de C : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
            minsert_1.setX(null, getX(context));        mB.setY(YContext, getZ(YContext));
}
});

            this.list_Z[i++] = macro;

        }
    }


    private String buildX(){

        return this.field_X;
    }
    private String buildY(Context contextContext contextContext context){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = Y;
        Macro macros[] = this.list_Y ;
        if(macros.length == 0){
            sb0.append(", ");
}if(macros.length == 0){
            sb0.append("; ");
}if(macros.length == 0){
            sb0.append(LINE_SEPARATOR);
}
        boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            
            

            sb0.append(macro.build(local_context));
            i++;

            
        }

        return sb0.toString();
    }
    private String buildZ(Context contextContext contextContext contextContext context){

        StringBuilder sb1 = new StringBuilder();
        Context local_context = Z;
        Macro macros[] = this.list_Z ;
        if(macros.length == 0){
            sb0.append(", ");
}if(macros.length == 0){
            sb0.append("; ");
}if(macros.length == 0){
            sb0.append(LINE_SEPARATOR);
}
        boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            
            

            sb1.append(macro.build(local_context));
            i++;

            
        }

        return sb1.toString();
    }


    private String getX(){

        return this.field_X;
    }
    private Macro[] getY(Context context){

        return this.list_Y.get(context);
    }
    private Macro[] getZ(Context context){

        return this.list_Z.get(context);
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setA(this);
    }

    @Override
    publicpublicpublic String build(Context contextContext contextContext contextContext context){

        String local_expansion = this.expansions.get(context);

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
        sb0.append("Le corps de C : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb1.append("first argument of c in a");
        sb1.append("first argument of c in a");
        sb0.append(buildY());

        local_expansion = sb0.toString();
        this.expansions.put(context, local_expansion);
        return local_expansion;
}

    @Override
    String build(Context context) {
        return build();
    }    @Override
    String build(Context context) {
        return build();
    }    @Override
    String build(Context context) {
        return build();
    }
}