/* This file was generated by SableCC's ObjectMacro. */
package org.test.back;

import java.util.*;

public class MB extends Macro{


    private String field_X;
    private Map<Context, Macro[]> list_Y = new LinkedHashMap<>();

    private final Context YContext = new Context();

    public MB(Macro pX[], String pX, Macro pY[], Macro pZ[], String pX){

        this.setPX(pX);        this.setPY(pY);

    }


    private void setPX( String pX ){
        if(pX == null){
            throw ObjectMacroException.parameterNull("X");
        }

        this.field_X = pX;
    }
    void setY(
            Context context,
            Macro macros[]) {

        if(macros == null){
            throw new RuntimeException("macros cannot be null here");
        }

        Macro[] tempMacros = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){

            if(macro == null){
                throw ObjectMacroException.macroNull(i, "Y");
            }

            macro.apply(new InternalsInitializer("Y"){
@Override
void setC(MC mC){

            sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
        sb0.append("Le corps de C : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
            minsert_1.setX(null, getX(context));        mB.setY(YContext, getZ(YContext));
}
});

            tempMacros[i++] = macro;
        }

        this.list_Y.put(context, tempMacros);
    }


    private String buildX(){

        return this.field_X;
    }
    private String buildY(Context context){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = YContext;
        Macro macros[] = this.list_Y .get(context);
        if(macros.length == 0){
            sb0.append(", ");
}if(macros.length == 0){
            sb0.append("; ");
}if(macros.length == 0){
            sb0.append(LINE_SEPARATOR);
}
        boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            
            

            sb0.append(macro.build(local_context));
            i++;

            
        }

        return sb0.toString();
    }


    private String getX(){

        return this.field_X;
    }
    private Macro[] getY(Context context){

        return this.list_Y.get(context);
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setB(this);
    }

    @Override
    publicpublicpublic String build(Context contextContext contextContext contextContext contextContext context){

        String local_expansion = this.expansions.get(context)this.expansions.get(context);

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
        sb0.append("Le corps de C : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb1.append("first argument of c in a");
        sb1.append("first argument of c in a");
        sb0.append(buildY());
        sb0.append(LINE_SEPARATOR);
        sb1.append("first argument of c in b");
        sb1.append("first argument of c in b");
        sb0.append(buildY());

        local_expansion = sb0.toString();
        this.expansions.put(context, local_expansion)this.expansions.put(context, local_expansion);
        return local_expansion;
}

    @Override
    String build(Context context) {
        return build();
    }    @Override
    String build(Context context) {
        return build();
    }    @Override
    String build(Context context) {
        return build();
    }
}