/* This file was generated by SableCC's ObjectMacro. */
package org.test.back;

import java.util.*;

public class MC extends Macro{


    private Map<Context, String> field_Y = new LinkedHashMap<>();
    private Map<Context, String> field_Z = new LinkedHashMap<>();


    public MC(Macro pX[], String pX, Macro pY[], Macro pZ[], String pX){

        this.setPY(pY);        this.setPZ(pZ);

    }


    void setY(
            Context context,
            String value) {

        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }

        this.field_Y.put(context, value);
    }
    void setZ(
            Context context,
            String value) {

        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }

        this.field_Z.put(context, value);
    }


    private String buildY(Context context){

        return this.field_Y.get(context);
    }
    private String buildZ(Context context){

        return this.field_Z.get(context);
    }


    private String getY(Context context){

        return this.field_Y.get(context);
    }
    private String getZ(Context context){

        return this.field_Z.get(context);
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setC(this);
    }

    @Override
    publicpublicpublic String build(Context contextContext contextContext contextContext contextContext contextContext context){

        String local_expansion = this.expansions.get(context)this.expansions.get(context)this.expansions.get(context);

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append(", ");
        sb0.append("La liste x : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Corps de semicolon : ");
        MSemicolonSeparator minsert_1 = new MSemicolonSeparator();
                sb0.append(", ");        sb0.append("La liste x : ");        sb0.append(buildX());        sb0.append(LINE_SEPARATOR);        sb0.append("Corps de semicolon : ");
        
        sb0.append(minsert_1.build(null));
        sb0.append(".");
        sb0.append("empty");
        sb0.append("; ");
        sb0.append("Le corps de C : ");
        sb0.append(buildX());
        sb0.append(LINE_SEPARATOR);
        sb1.append("first argument of c in a");
        sb1.append("first argument of c in a");
        sb0.append(buildY());
        sb0.append(LINE_SEPARATOR);
        sb1.append("first argument of c in b");
        sb1.append("first argument of c in b");
        sb0.append(buildY());
        sb0.append(buildY());
        sb0.append(" ");
        sb0.append(buildZ());

        local_expansion = sb0.toString();
        this.expansions.put(context, local_expansion)this.expansions.put(context, local_expansion)this.expansions.put(context, local_expansion);
        return local_expansion;
}

    @Override
    String build(Context context) {
        return build();
    }    @Override
    String build(Context context) {
        return build();
    }    @Override
    String build(Context context) {
        return build();
    }
}