Macro {
  Name = 'header'    Initialization Order{
            }
  MacroBody{
  '/* This file was generated by SableCC\'s ObjectMacro. */';
  }
}

Macro {
  Name = { 'package', 'declaration' } Param {
    Name = { 'package', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  'package ';
 ParamInsert { Name = { 'package', 'name' } } ;
  ';';
  }
}

Macro {
  Name = { 'import', 'java', 'util' }    Initialization Order{
            }
  MacroBody{
  'import java.util.*;';
  }
}

Macro {
  Name = 'context' Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'public class Context ';
  '{';
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'internals', 'initializer' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'parent', 'internal', 'setters' } Type {
 MacroRef {
 Name = { 'parent', 'internals', 'setter' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
 }
    Initialization Order{
        'package_declaration''list_parent_internal_setters'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
 MacroInsert {
 MacroRef {
 Name = { 'import', 'java', 'util' } }
 };
  eol;
  eol;
  'public class InternalsInitializer ';
  '{';
  eol;
  eol;
  '    private final String _paramName;';
  eol;
  eol;
  '    InternalsInitializer(String paramName)';
  '{';
  eol;
  '        this._paramName = paramName;';
  eol;
  '    }';
  eol;
  eol;
 ParamInsert { Name = { 'list', 'parent', 'internal', 'setters' } } ;
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'parent', 'internals', 'setter' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '  void set';
 ParamInsert { Name = 'name' } ;
  '(M';
 ParamInsert { Name = 'name' } ;
  ' m';
 ParamInsert { Name = 'name' } ;
  ')';
  '{';
  eol;
  '      throw ObjectMacroException.incorrectType("M';
 ParamInsert { Name = 'name' } ;
  '", this._paramName);';
  eol;
  '  }';
  }
}

Macro {
  Name = { 'super', 'macro' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
 MacroInsert {
 MacroRef {
 Name = { 'import', 'java', 'util' } }
 };
  eol;
  eol;
  'public abstract class Macro ';
  '{';
  eol;
  eol;
  '    final static String LINE_SEPARATOR = System.getProperty("line.separator");';
  eol;
  eol;
  '    BuildState build_state = null;';
  eol;
  eol;
  '    final Map<Context, BuildState> build_states = new LinkedHashMap<>();';
  eol;
  eol;
  '    public String build()';
  '{';
  eol;
  eol;
  '        throw new RuntimeException("build cannot be invoked here");';
  eol;
  '    }';
  eol;
  eol;
  '    String build(';
  eol;
  '            Context context)';
  '{';
  eol;
  eol;
  '        throw new RuntimeException("build cannot be invoked here");';
  eol;
  '    }';
  eol;
  eol;
  '    void apply(';
  eol;
  '            InternalsInitializer internalsInitializer)';
  '{';
  eol;
  eol;
  '        throw new RuntimeException("apply cannot be called here");';
  eol;
  '    }';
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'super', 'directive' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'abstract class Directive ';
  '{';
  eol;
  eol;
  '    final String value;';
  eol;
  eol;
  '    Directive(';
  eol;
  '            String value) ';
  '{';
  eol;
  eol;
  '        this.value = value;';
  eol;
  '    }';
  eol;
  eol;
  '    abstract String apply(Integer index, String macro, Integer list_size);';
  eol;
  '}';
  }
}

Macro {
  Name = { 'class', 'internal', 'value' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
 MacroInsert {
 MacroRef {
 Name = { 'import', 'java', 'util' } }
 };
  eol;
  eol;
  'class InternalValue ';
  '{';
  eol;
  eol;
  '    private final List<Macro> macros;';
  eol;
  eol;
  '    private DAfterLast dAfterLast;';
  eol;
  eol;
  '    private DBeforeFirst dBeforeFirst;';
  eol;
  eol;
  '    private DSeparator dSeparator;';
  eol;
  eol;
  '    private DNone dNone;';
  eol;
  eol;
  '    private final Context context;';
  eol;
  eol;
  '    private String cache;';
  eol;
  eol;
  '    InternalValue(';
  eol;
  '            List<Macro> macros,';
  eol;
  '            Context context)';
  '{';
  eol;
  eol;
  '        this.macros = macros;';
  eol;
  '        this.context = context;';
  eol;
  '    }';
  eol;
  eol;
  '    String build()';
  '{';
  eol;
  eol;
  '        if(this.cache != null)';
  '{';
  eol;
  '            return this.cache;';
  eol;
  '        }';
  eol;
  eol;
  '        StringBuilder sb = new StringBuilder();';
  eol;
  '        int i = 0;';
  eol;
  '        int nb_macros = this.macros.size();';
  eol;
  eol;
  '        if(this.dNone != null)';
  '{';
  eol;
  '            sb.append(this.dNone.apply(i, "", nb_macros));';
  eol;
  '        }';
  eol;
  eol;
  '        for(Macro macro : this.macros)';
  '{';
  eol;
  '            String expansion = macro.build(this.context);';
  eol;
  eol;
  '            if(this.dBeforeFirst != null)';
  '{';
  eol;
  '                expansion = dBeforeFirst.apply(i, expansion, nb_macros);';
  eol;
  '            }';
  eol;
  eol;
  '            if(dAfterLast != null)';
  '{';
  eol;
  '                expansion = dAfterLast.apply(i, expansion, nb_macros);';
  eol;
  '            }';
  eol;
  eol;
  '            if(this.dSeparator != null)';
  '{';
  eol;
  '                expansion = dSeparator.apply(i, expansion, nb_macros);';
  eol;
  '            }';
  eol;
  eol;
  '            sb.append(expansion);';
  eol;
  '            i++;';
  eol;
  '        }';
  eol;
  eol;
  '        this.cache = sb.toString();';
  eol;
  '        return this.cache;';
  eol;
  '    }';
  eol;
  eol;
  '    void setNone(';
  eol;
  '                DNone none)';
  '{';
  eol;
  eol;
  '        this.dNone = none;';
  eol;
  '    }';
  eol;
  eol;
  '    void setBeforeFirst(';
  eol;
  '            DBeforeFirst dBeforeFirst)';
  '{';
  eol;
  eol;
  '        this.dBeforeFirst = dBeforeFirst;';
  eol;
  '    }';
  eol;
  eol;
  '    void setAfterLast(';
  eol;
  '            DAfterLast dAfterLast)';
  '{';
  eol;
  eol;
  '        this.dAfterLast = dAfterLast;';
  eol;
  '    }';
  eol;
  eol;
  '    void setSeparator(';
  eol;
  '            DSeparator dSeparator)';
  '{';
  eol;
  eol;
  '        this.dSeparator = dSeparator;';
  eol;
  '    }';
  eol;
  '}';
  }
}

Macro {
  Name = { 'class', 'build', 'state' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'class BuildState ';
  '{';
  eol;
  eol;
  '    private String expansion = null;';
  eol;
  eol;
  '    public String getExpansion() ';
  '{';
  eol;
  '        return expansion;';
  eol;
  '    }';
  eol;
  eol;
  '    public void setExpansion(';
  eol;
  '            String expansion) ';
  '{';
  eol;
  eol;
  '        this.expansion = expansion;';
  eol;
  '    }';
  eol;
  '}';
  }
}

Macro {
  Name = 'macro' Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'field' } Type {
 MacroRef {
 Name = { 'param', 'macro', 'field' } }
 MacroRef {
 Name = { 'param', 'string', 'field' } }
 MacroRef {
 Name = { 'internal', 'macro', 'field' } }
 MacroRef {
 Name = { 'internal', 'string', 'field' } }
 MacroRef {
 Name = { 'internal', 'macros', 'value', 'field' } }
 MacroRef {
 Name = { 'directive', 'fields' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
,  Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'context', 'field' } Type {
 MacroRef {
 Name = { 'context', 'field' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'constructor' } Type {
 MacroRef {
 Name = 'constructor' }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'setter' } Type {
 MacroRef {
 Name = { 'param', 'string', 'setter' } }
 MacroRef {
 Name = { 'single', 'add' } }
 MacroRef {
 Name = { 'internal', 'string', 'setter' } }
 MacroRef {
 Name = { 'internal', 'macro', 'setter' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
,  Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'builder' } Type {
 MacroRef {
 Name = { 'param', 'string', 'ref', 'builder' } }
 MacroRef {
 Name = { 'param', 'macro', 'ref', 'builder' } }
 MacroRef {
 Name = { 'internal', 'macro', 'ref', 'builder' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
,  Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'ref' } Type {
 MacroRef {
 Name = { 'param', 'string', 'ref' } }
 MacroRef {
 Name = { 'param', 'macro', 'ref' } }
 MacroRef {
 Name = { 'internal', 'macro', 'ref' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
,  Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'init', 'internals', 'method' } Type {
 MacroRef {
 Name = { 'init', 'internals', 'method' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
 }
 Param {
    Name = { 'list', 'init', 'directives' } Type {
 MacroRef {
 Name = { 'init', 'directives' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
,  Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'redefined', 'apply', 'initializer' } Type {
 MacroRef {
 Name = { 'redefined', 'apply', 'initializer' } }
 }
 }
 Param {
    Name = { 'list', 'macro', 'builder' } Type {
 MacroRef {
 Name = { 'macro', 'builder' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'empty', 'builder', 'with', 'context' } Type {
 MacroRef {
 Name = { 'empty', 'builder', 'with', 'context' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration''list_field''list_context_field''list_constructor''list_setter''list_builder''list_ref''list_init_internals_method''list_init_directives''list_redefined_apply_initializer''list_macro_builder''list_empty_builder_with_context'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
 MacroInsert {
 MacroRef {
 Name = { 'import', 'java', 'util' } }
 };
  eol;
  eol;
  'public class M';
 ParamInsert { Name = 'name' } ;
  ' extends Macro';
  '{';
  eol;
 ParamInsert { Name = { 'list', 'field' } } ;
  eol;
 ParamInsert { Name = { 'list', 'context', 'field' } } ;
  eol;
 ParamInsert { Name = { 'list', 'constructor' } } ;
  eol;
 ParamInsert { Name = { 'list', 'setter' } } ;
  eol;
 ParamInsert { Name = { 'list', 'builder' } } ;
  eol;
 ParamInsert { Name = { 'list', 'ref' } } ;
  eol;
 ParamInsert { Name = { 'list', 'init', 'internals', 'method' } } ;
  eol;
 ParamInsert { Name = { 'list', 'init', 'directives' } } ;
  eol;
 ParamInsert { Name = { 'list', 'redefined', 'apply', 'initializer' } } ;
  eol;
 ParamInsert { Name = { 'list', 'macro', 'builder' } } ;
  eol;
 ParamInsert { Name = { 'list', 'empty', 'builder', 'with', 'context' } } ;
  eol;
  '}';
  }
}

Macro {
  Name = 'constructor' Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'list', 'set', 'param' } Type {
 MacroRef {
 Name = { 'set', 'param' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'string', 'param' } Type {
 MacroRef {
 Name = { 'string', 'param' } }
 }
 Directive {
     Name = 'separator'       ', ';
 }
 }
 Param {
    Name = { 'list', 'init' } Type {
 MacroRef {
 Name = { 'init', 'macro', 'param' } }
 MacroRef {
 Name = { 'init', 'macro', 'internal' } }
 MacroRef {
 Name = { 'init', 'string', 'internal' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
 Param {
    Name = { 'list', 'internal' } Type {
 MacroRef {
 Name = { 'init', 'internal', 'value' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'list_set_param''list_string_param''list_init''list_internal'    }
  MacroBody{
  '    public M';
 ParamInsert { Name = 'name' } ;
  '(';
 ParamInsert { Name = { 'list', 'string', 'param' } } ;
  ')';
  '{';
  eol;
 ParamInsert { Name = { 'list', 'set', 'param' } } ;
  eol;
 ParamInsert { Name = { 'list', 'init' } } ;
  eol;
 ParamInsert { Name = { 'list', 'internal' } } ;
  eol;
  '    }';
  }
}

Macro {
  Name = { 'init', 'macro', 'internal' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    this.list_';
 ParamInsert { Name = 'name' } ;
  ' = new LinkedHashMap<>();';
  }
}

Macro {
  Name = { 'init', 'macro', 'param' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    this.list_';
 ParamInsert { Name = 'name' } ;
  ' = new ArrayList<>();';
  }
}

Macro {
  Name = { 'init', 'string', 'internal' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    this.field_';
 ParamInsert { Name = 'name' } ;
  ' = new LinkedHashMap<>();';
  }
}

Macro {
  Name = { 'init', 'internal', 'value' } Param {
    Name = { 'param', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    this.';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Value = new InternalValue(this.list_';
 ParamInsert { Name = { 'param', 'name' } } ;
  ', this.';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Context);';
  }
}

Macro {
  Name = { 'set', 'param' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'list', 'param', 'arg' } Type {
 MacroRef {
 Name = { 'param', 'arg' } }
 }
 }
    Initialization Order{
        'list_param_arg'    }
  MacroBody{
  '        this.setP';
 ParamInsert { Name = 'name' } ;
  '(';
 ParamInsert { Name = { 'list', 'param', 'arg' } } ;
  ');';
  }
}

Macro {
  Name = { 'single', 'add' } Param {
    Name = { 'macro', 'name' } Type = String  }
 Param {
    Name = { 'param', 'name' } Type = String  }
 Param {
    Name = { 'is', 'built' } Type {
 MacroRef {
 Name = { 'is', 'built' } Args {
 Var {
        ParamName { Name = 'macro_name' }
    Name = { 'macro', 'name' } }
 }
 }
 }
 }
    Initialization Order{
        'is_built'    }
  MacroBody{
  '    public void add';
 ParamInsert { Name = { 'param', 'name' } } ;
  '(M';
 ParamInsert { Name = { 'macro', 'name' } } ;
  ' macro)';
  '{';
  eol;
  '        if(macro == null)';
  '{';
  eol;
  '            throw ObjectMacroException.parameterNull("';
 ParamInsert { Name = { 'param', 'name' } } ;
  '");';
  eol;
  '        }';
  eol;
  '        ';
 ParamInsert { Name = { 'is', 'built' } } ;
  eol;
  eol;
  '        this.list_';
 ParamInsert { Name = { 'param', 'name' } } ;
  '.add(macro);';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'is', 'built' } Internal {
 Name = { 'macro', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '        if(this.build_state != null)';
  '{';
  eol;
  '            throw ObjectMacroException.cannotModify("';
 ParamInsert { Name = { 'macro', 'name' } } ;
  '");';
  eol;
  '        }';
  }
}

Macro {
  Name = { 'param', 'string', 'ref', 'builder' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'list', 'context', 'param' } Type {
 MacroRef {
 Name = { 'context', 'param' } }
 }
 }
 Param {
    Name = { 'list', 'get', 'internal', 'tail' } Type {
 MacroRef {
 Name = { 'get', 'internal', 'tail' } }
 }
 }
    Initialization Order{
        'list_context_param''list_get_internal_tail'    }
  MacroBody{
  '    private String build';
 ParamInsert { Name = 'name' } ;
  '(';
 ParamInsert { Name = { 'list', 'context', 'param' } } ;
  ')';
  '{';
  eol;
  eol;
  '        return this.field_';
 ParamInsert { Name = 'name' } ;
 ParamInsert { Name = { 'list', 'get', 'internal', 'tail' } } ;
  ';';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'param', 'macro', 'ref', 'builder' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'context', 'name' } Type {
 MacroRef {
 Name = { 'context', 'name' } }
 }
 Directive {
     Name = 'none'       'context';
 }
 }
    Initialization Order{
        'context_name'    }
  MacroBody{
  '    private String build';
 ParamInsert { Name = 'name' } ;
  '()';
  '{';
  eol;
  '        StringBuilder sb = new StringBuilder();';
  eol;
  '        Context local_context = ';
 ParamInsert { Name = { 'context', 'name' } } ;
  ';';
  eol;
  '        List<Macro> macros = this.list_';
 ParamInsert { Name = 'name' } ;
  ';';
  eol;
  eol;
  '        int i = 0;';
  eol;
  '        int nb_macros = macros.size();';
  eol;
  '        String expansion = null;';
  eol;
  eol;
  '        if(this.';
 ParamInsert { Name = 'name' } ;
  'None != null)';
  '{';
  eol;
  '            sb.append(this.';
 ParamInsert { Name = 'name' } ;
  'None.apply(i, "", nb_macros));';
  eol;
  '        }';
  eol;
  eol;
  '        for(Macro macro : macros)';
  '{';
  eol;
  '            expansion = macro.build(local_context);';
  eol;
  eol;
  '            if(this.';
 ParamInsert { Name = 'name' } ;
  'BeforeFirst != null)';
  '{';
  eol;
  '                expansion = this.';
 ParamInsert { Name = 'name' } ;
  'BeforeFirst.apply(i, expansion, nb_macros);';
  eol;
  '            }';
  eol;
  eol;
  '            if(this.';
 ParamInsert { Name = 'name' } ;
  'AfterLast != null)';
  '{';
  eol;
  '                expansion = this.';
 ParamInsert { Name = 'name' } ;
  'AfterLast.apply(i, expansion, nb_macros);';
  eol;
  '            }';
  eol;
  eol;
  '            if(this.';
 ParamInsert { Name = 'name' } ;
  'Separator != null)';
  '{';
  eol;
  '                expansion = this.';
 ParamInsert { Name = 'name' } ;
  'Separator.apply(i, expansion, nb_macros);';
  eol;
  '            }';
  eol;
  eol;
  '            sb.append(expansion);';
  eol;
  '            i++;';
  eol;
  '        }';
  eol;
  eol;
  '        return sb.toString();';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'internal', 'macro', 'ref', 'builder' } Param {
    Name = { 'internal', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private String build';
 ParamInsert { Name = { 'internal', 'name' } } ;
  '(Context context)';
  '{';
  eol;
  eol;
  '        InternalValue macros = this.list_';
 ParamInsert { Name = { 'internal', 'name' } } ;
  '.get(context);';
  eol;
  '        return macros.build();';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'internal', 'macro', 'setter' } Param {
    Name = { 'param', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    void set';
 ParamInsert { Name = { 'param', 'name' } } ;
  '(';
  eol;
  '                Context context,';
  eol;
  '                InternalValue internal_value) ';
  '{';
  eol;
  eol;
  '            if(internal_value == null)';
  '{';
  eol;
  '                throw new RuntimeException("macros cannot be null");';
  eol;
  '            }';
  eol;
  eol;
  '            this.list_';
 ParamInsert { Name = { 'param', 'name' } } ;
  '.put(context, internal_value);';
  eol;
  '        }';
  }
}

Macro {
  Name = { 'param', 'string', 'setter' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'list', 'string', 'param' } Type {
 MacroRef {
 Name = { 'string', 'param' } }
 }
 }
 Param {
    Name = { 'list', 'param', 'arg' } Type {
 MacroRef {
 Name = { 'param', 'arg' } }
 }
 }
    Initialization Order{
        'list_string_param''list_param_arg'    }
  MacroBody{
  '    private void setP';
 ParamInsert { Name = 'name' } ;
  '( ';
 ParamInsert { Name = { 'list', 'string', 'param' } } ;
  ' )';
  '{';
  eol;
  '        if(';
 ParamInsert { Name = { 'list', 'param', 'arg' } } ;
  ' == null)';
  '{';
  eol;
  '            throw ObjectMacroException.parameterNull("';
 ParamInsert { Name = 'name' } ;
  '");';
  eol;
  '        }';
  eol;
  eol;
  '        this.field_';
 ParamInsert { Name = 'name' } ;
  ' = ';
 ParamInsert { Name = { 'list', 'param', 'arg' } } ;
  ';';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'param', 'macro', 'ref' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private InternalValue get';
 ParamInsert { Name = 'name' } ;
  '()';
  '{';
  eol;
  '        return this.';
 ParamInsert { Name = 'name' } ;
  'Value;';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'internal', 'macro', 'ref' } Param {
    Name = { 'param', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private InternalValue get';
 ParamInsert { Name = { 'param', 'name' } } ;
  '(Context context)';
  '{';
  eol;
  '        return this.list_';
 ParamInsert { Name = { 'param', 'name' } } ;
  '.get(context);';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'param', 'string', 'ref' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'context', 'param' } Type {
 MacroRef {
 Name = { 'context', 'param' } }
 }
 }
 Param {
    Name = { 'get', 'internal', 'tail' } Type {
 MacroRef {
 Name = { 'get', 'internal', 'tail' } }
 }
 }
    Initialization Order{
        'context_param''get_internal_tail'    }
  MacroBody{
  '    private String get';
 ParamInsert { Name = 'name' } ;
  '(';
 ParamInsert { Name = { 'context', 'param' } } ;
  ')';
  '{';
  eol;
  eol;
  '        return this.field_';
 ParamInsert { Name = 'name' } ;
 ParamInsert { Name = { 'get', 'internal', 'tail' } } ;
  ';';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'internal', 'string', 'setter' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    void set';
 ParamInsert { Name = 'name' } ;
  '(';
  eol;
  '            Context context,';
  eol;
  '            String value) ';
  '{';
  eol;
  eol;
  '        if(value == null)';
  '{';
  eol;
  '            throw new RuntimeException("value cannot be null here");';
  eol;
  '        }';
  eol;
  eol;
  '        this.field_';
 ParamInsert { Name = 'name' } ;
  '.put(context, value);';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'init', 'internals', 'method' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'apply', 'internals', 'initializer' } Type {
 MacroRef {
 Name = { 'apply', 'internals', 'initializer' } }
 }
 }
    Initialization Order{
        'apply_internals_initializer'    }
  MacroBody{
  '    private void init';
 ParamInsert { Name = 'name' } ;
  'Internals(Context context)';
  '{';
  eol;
  '        for(Macro macro : this.list_';
 ParamInsert { Name = 'name' } ;
  ')';
  '{';
  eol;
  '            ';
 ParamInsert { Name = { 'apply', 'internals', 'initializer' } } ;
  eol;
  '        }';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'context', 'verifier' }    Initialization Order{
            }
  MacroBody{
  '        if(context == null)';
  '{';
  eol;
  '            throw new RuntimeException("context cannot be null here");';
  eol;
  '        }';
  }
}

Macro {
  Name = { 'init', 'directives' } Param {
    Name = { 'param', 'name' } Type = String  }
 Param {
    Name = { 'new', 'directive' } Type {
 MacroRef {
 Name = { 'new', 'directive' } Args {
 Var {
        ParamName { Name = 'param_name' }
    Name = { 'param', 'name' } }
 }
 }
 }
 }
    Initialization Order{
        'new_directive'    }
  MacroBody{
  '    private void init';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Directives()';
  '{';
  eol;
  '        ';
 ParamInsert { Name = { 'new', 'directive' } } ;
  eol;
  '    }';
  }
}

Macro {
  Name = { 'new', 'directive' } Param {
    Name = { 'directive', 'name' } Type = String  }
 Param {
    Name = { 'index', 'builder' } Type = String  }
 Param {
    Name = { 'list', 'parts' } Type {
 MacroRef {
 Name = { 'string', 'part' } }
 MacroRef {
 Name = { 'param', 'insert', 'part' } }
 MacroRef {
 Name = { 'eol', 'part' } }
 MacroRef {
 Name = { 'insert', 'macro', 'part' } }
 }
 }
 Internal {
 Name = { 'param', 'name' } Type = String  }
    Initialization Order{
        'list_parts'    }
  MacroBody{
  'StringBuilder sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  ' = new StringBuilder();';
  eol;
 ParamInsert { Name = { 'list', 'parts' } } ;
  eol;
  'this.';
 ParamInsert { Name = { 'param', 'name' } } ;
 ParamInsert { Name = { 'directive', 'name' } } ;
  ' = new D';
 ParamInsert { Name = { 'directive', 'name' } } ;
  '(sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  '.toString());';
  eol;
  'this.';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Value.set';
 ParamInsert { Name = { 'directive', 'name' } } ;
  '(this.';
 ParamInsert { Name = { 'param', 'name' } } ;
 ParamInsert { Name = { 'directive', 'name' } } ;
  ');';
  }
}

Macro {
  Name = 'public'    Initialization Order{
            }
  MacroBody{
  'public';
  }
}

Macro {
  Name = { 'macro', 'builder' } Param {
    Name = { 'macro', 'name' } Type = String  }
 Param {
    Name = { 'list', 'context', 'param' } Type {
 MacroRef {
 Name = { 'context', 'param' } }
 }
 }
 Param {
    Name = { 'context', 'build', 'state' } Type {
 MacroRef {
 Name = { 'context', 'build', 'state' } }
 }
 Directive {
     Name = 'none'       'this.build_state';
 }
 }
 Param {
    Name = { 'new', 'build', 'state' } Type {
 MacroRef {
 Name = { 'new', 'build', 'state' } }
 }
 Directive {
     Name = 'none'       'this.build_state = buildState';
 }
 }
 Param {
    Name = { 'init', 'directive', 'call' } Type {
 MacroRef {
 Name = { 'init', 'directive', 'call' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
 }
 Param {
    Name = { 'init', 'internals', 'call' } Type {
 MacroRef {
 Name = { 'init', 'internals', 'call' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
 }
 Param {
    Name = { 'list', 'part' } Type {
 MacroRef {
 Name = { 'string', 'part' } }
 MacroRef {
 Name = { 'param', 'insert', 'part' } }
 MacroRef {
 Name = { 'eol', 'part' } }
 MacroRef {
 Name = { 'insert', 'macro', 'part' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
 }
    Initialization Order{
        'list_context_param''context_build_state''new_build_state''init_directive_call''init_internals_call''list_part'    }
  MacroBody{
  '   @Override';
  eol;
  '    ';
 MacroInsert {
 MacroRef {
 Name = 'public' }
 };
  ' String build(';
 ParamInsert { Name = { 'list', 'context', 'param' } } ;
  ')';
  '{';
  eol;
  eol;
  '        BuildState buildState = ';
 ParamInsert { Name = { 'context', 'build', 'state' } } ;
  ';';
  eol;
  eol;
  '        if(buildState == null)';
  '{';
  eol;
  '            buildState = new BuildState();';
  eol;
  '        }';
  eol;
  '        else if(buildState.getExpansion() == null)';
  '{';
  eol;
  '            throw ObjectMacroException.cyclicReference("';
 ParamInsert { Name = { 'macro', 'name' } } ;
  '");';
  eol;
  '        }';
  eol;
  '        else';
  '{';
  eol;
  '            return buildState.getExpansion();';
  eol;
  '        }';
  eol;
  '        ';
 ParamInsert { Name = { 'new', 'build', 'state' } } ;
  ';';
  eol;
  eol;
  '        ';
 ParamInsert { Name = { 'init', 'directive', 'call' } } ;
  eol;
  eol;
  '        ';
 ParamInsert { Name = { 'init', 'internals', 'call' } } ;
  eol;
  eol;
  '        StringBuilder sb0 = new StringBuilder();';
  eol;
  eol;
 ParamInsert { Name = { 'list', 'part' } } ;
  eol;
  eol;
  '        buildState.setExpansion(sb0.toString());';
  eol;
  '        return sb0.toString();';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'init', 'directive', 'call' } Param {
    Name = { 'param', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  'init';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Directives();';
  }
}

Macro {
  Name = { 'init', 'internals', 'call' } Param {
    Name = { 'param', 'name' } Type = String  }
 Param {
    Name = { 'context', 'arg' } Type {
 MacroRef {
 Name = { 'context', 'arg' } }
 }
 Directive {
     Name = 'none'       'null';
 }
 }
    Initialization Order{
        'context_arg'    }
  MacroBody{
  'init';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Internals(';
 ParamInsert { Name = { 'context', 'arg' } } ;
  ');';
  }
}

Macro {
  Name = { 'empty', 'builder', 'with', 'context' }    Initialization Order{
            }
  MacroBody{
  '    @Override';
  eol;
  '    String build(Context context) ';
  '{';
  eol;
  '        return build();';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'context', 'build', 'state' }    Initialization Order{
            }
  MacroBody{
  'this.build_states.get(context)';
  }
}

Macro {
  Name = { 'new', 'build', 'state' }    Initialization Order{
            }
  MacroBody{
  'this.build_states.put(context, buildState)';
  }
}

Macro {
  Name = { 'redefined', 'apply', 'initializer' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    @Override';
  eol;
  '    void apply(';
  eol;
  '            InternalsInitializer internalsInitializer)';
  '{';
  eol;
  eol;
  '        internalsInitializer.set';
 ParamInsert { Name = 'name' } ;
  '(this);';
  eol;
  '    }';
  }
}

Macro {
  Name = { 'param', 'macro', 'field' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private final List<Macro> list_';
 ParamInsert { Name = 'name' } ;
  ';';
  }
}

Macro {
  Name = { 'param', 'string', 'field' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private String field_';
 ParamInsert { Name = 'name' } ;
  ';';
  }
}

Macro {
  Name = { 'internal', 'macro', 'field' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private Map<Context, InternalValue> list_';
 ParamInsert { Name = 'name' } ;
  ' = new LinkedHashMap<>();';
  }
}

Macro {
  Name = { 'internal', 'string', 'field' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private Map<Context, String> field_';
 ParamInsert { Name = 'name' } ;
  ' = new LinkedHashMap<>();';
  }
}

Macro {
  Name = { 'context', 'field' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private final Context ';
 ParamInsert { Name = 'name' } ;
  'Context = new Context();';
  }
}

Macro {
  Name = { 'internal', 'macros', 'value', 'field' } Param {
    Name = { 'param', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private final InternalValue ';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Value;';
  }
}

Macro {
  Name = { 'directive', 'fields' } Param {
    Name = { 'param', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '    private DSeparator ';
 ParamInsert { Name = { 'param', 'name' } } ;
  'Separator;';
  eol;
  eol;
  '    private DBeforeFirst ';
 ParamInsert { Name = { 'param', 'name' } } ;
  'BeforeFirst;';
  eol;
  eol;
  '    private DAfterLast ';
 ParamInsert { Name = { 'param', 'name' } } ;
  'AfterLast;';
  eol;
  eol;
  '    private DNone ';
 ParamInsert { Name = { 'param', 'name' } } ;
  'None;';
  }
}

Macro {
  Name = { 'apply', 'internals', 'initializer' } Param {
    Name = { 'param', 'name' } Type = String  }
 Param {
    Name = { 'list', 'redefined', 'internals', 'setter' } Type {
 MacroRef {
 Name = { 'redefined', 'internals', 'setter' } }
 }
 }
    Initialization Order{
        'list_redefined_internals_setter'    }
  MacroBody{
  'macro.apply(new InternalsInitializer("';
 ParamInsert { Name = { 'param', 'name' } } ;
  '")';
  '{';
  eol;
 ParamInsert { Name = { 'list', 'redefined', 'internals', 'setter' } } ;
  eol;
  '});';
  }
}

Macro {
  Name = { 'redefined', 'internals', 'setter' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'list', 'part' } Type {
 MacroRef {
 Name = { 'init', 'string', 'builder' } }
 MacroRef {
 Name = { 'string', 'part' } }
 MacroRef {
 Name = { 'param', 'insert', 'part' } }
 MacroRef {
 Name = { 'eol', 'part' } }
 MacroRef {
 Name = { 'insert', 'macro', 'part' } }
 }
 Directive {
     Name = 'separator'       eol;
 }
 }
 Param {
    Name = { 'list', 'set', 'internal' } Type {
 MacroRef {
 Name = { 'set', 'internal' } }
 }
 }
    Initialization Order{
        'list_part''list_set_internal'    }
  MacroBody{
  '@Override';
  eol;
  'void set';
 ParamInsert { Name = 'name' } ;
  '(M';
 ParamInsert { Name = 'name' } ;
  ' m';
 ParamInsert { Name = 'name' } ;
  ')';
  '{';
  eol;
  eol;
  '    ';
 ParamInsert { Name = { 'list', 'part' } } ;
  eol;
  '    ';
 ParamInsert { Name = { 'list', 'set', 'internal' } } ;
  eol;
  '}';
  }
}

Macro {
  Name = { 'string', 'part' } Param {
    Name = 'string' Type = String  }
 Param {
    Name = { 'index', 'builder' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '        sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  '.append("';
 ParamInsert { Name = 'string' } ;
  '");';
  }
}

Macro {
  Name = { 'eol', 'part' } Param {
    Name = { 'index', 'builder' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '        sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  '.append(LINE_SEPARATOR);';
  }
}

Macro {
  Name = { 'param', 'insert', 'part' } Param {
    Name = { 'param', 'name' } Type = String  }
 Param {
    Name = { 'index', 'builder' } Type = String  }
 Param {
    Name = { 'context', 'arg' } Type {
 MacroRef {
 Name = { 'context', 'arg' } }
 }
 }
    Initialization Order{
        'context_arg'    }
  MacroBody{
  '        sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  '.append(build';
 ParamInsert { Name = { 'param', 'name' } } ;
  '(';
 ParamInsert { Name = { 'context', 'arg' } } ;
  '));';
  }
}

Macro {
  Name = { 'insert', 'macro', 'part' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'index', 'builder' } Type = String  }
 Param {
    Name = { 'index', 'insert' } Type = String  }
 Param {
    Name = { 'list', 'part' } Type {
 MacroRef {
 Name = { 'init', 'string', 'builder' } }
 MacroRef {
 Name = { 'string', 'part' } }
 MacroRef {
 Name = { 'param', 'insert', 'part' } }
 MacroRef {
 Name = { 'eol', 'part' } }
 MacroRef {
 Name = { 'insert', 'macro', 'part' } }
 }
 }
 Param {
    Name = { 'list', 'set', 'internal' } Type {
 MacroRef {
 Name = { 'set', 'internal' } }
 }
 }
    Initialization Order{
        'list_part''list_set_internal'    }
  MacroBody{
  '        M';
 ParamInsert { Name = 'name' } ;
  ' minsert_';
 ParamInsert { Name = { 'index', 'insert' } } ;
  ' = new M';
 ParamInsert { Name = 'name' } ;
  '();';
  eol;
  '        ';
 ParamInsert { Name = { 'list', 'part' } } ;
  eol;
  '        ';
 ParamInsert { Name = { 'list', 'set', 'internal' } } ;
  eol;
  '        sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  '.append(minsert_';
 ParamInsert { Name = { 'index', 'insert' } } ;
  '.build(null));';
  }
}

Macro {
  Name = { 'init', 'string', 'builder' } Param {
    Name = { 'index', 'builder' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  '        StringBuilder sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  ' = new StringBuilder();';
  }
}

Macro {
  Name = { 'set', 'internal' } Param {
    Name = { 'macro', 'name' } Type = String  }
 Param {
    Name = { 'param', 'name' } Type = String  }
 Param {
    Name = 'context' Type = String  }
 Param {
    Name = { 'list', 'param' } Type {
 MacroRef {
 Name = { 'param', 'ref' } }
 MacroRef {
 Name = { 'string', 'builder', 'build' } }
 }
 }
    Initialization Order{
        'list_param'    }
  MacroBody{
  '        m';
 ParamInsert { Name = { 'macro', 'name' } } ;
  '.set';
 ParamInsert { Name = { 'param', 'name' } } ;
  '(';
 ParamInsert { Name = 'context' } ;
  ', ';
 ParamInsert { Name = { 'list', 'param' } } ;
  ');';
  }
}

Macro {
  Name = { 'string', 'builder', 'build' } Param {
    Name = { 'index', 'builder' } Type = String  }
    Initialization Order{
            }
  MacroBody{
  'sb';
 ParamInsert { Name = { 'index', 'builder' } } ;
  '.toString()';
  }
}

Macro {
  Name = { 'param', 'ref' } Param {
    Name = 'name' Type = String  }
 Param {
    Name = { 'list', 'context', 'arg' } Type {
 MacroRef {
 Name = { 'context', 'arg' } }
 MacroRef {
 Name = { 'context', 'name' } }
 }
 }
    Initialization Order{
        'list_context_arg'    }
  MacroBody{
  'get';
 ParamInsert { Name = 'name' } ;
  '(';
 ParamInsert { Name = { 'list', 'context', 'arg' } } ;
  ')';
  }
}

Macro {
  Name = { 'string', 'value' } Param {
    Name = 'string' Type = String  }
    Initialization Order{
            }
  MacroBody{
  '"';
 ParamInsert { Name = 'string' } ;
  '"';
  }
}

Macro {
  Name = { 'macro', 'arg' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  'list_';
 ParamInsert { Name = 'name' } ;
  }
}

Macro {
  Name = { 'string', 'arg' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  'field_';
 ParamInsert { Name = 'name' } ;
  }
}

Macro {
  Name = { 'param', 'arg' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  'p';
 ParamInsert { Name = 'name' } ;
  }
}

Macro {
  Name = { 'context', 'name' } Param {
    Name = { 'context', 'name' } Type = String  }
    Initialization Order{
            }
  MacroBody{
 ParamInsert { Name = { 'context', 'name' } } ;
  }
}

Macro {
  Name = { 'context', 'param' }    Initialization Order{
            }
  MacroBody{
  'Context context';
  }
}

Macro {
  Name = { 'context', 'arg' }    Initialization Order{
            }
  MacroBody{
  'context';
  }
}

Macro {
  Name = { 'get', 'internal', 'tail' }    Initialization Order{
            }
  MacroBody{
  '.get(context)';
  }
}

Macro {
  Name = { 'string', 'param' } Param {
    Name = 'name' Type = String  }
    Initialization Order{
            }
  MacroBody{
  'String p';
 ParamInsert { Name = 'name' } ;
  }
}

Macro {
  Name = { 'class', 'none' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'class DNone';
  eol;
  '        extends Directive';
  '{';
  eol;
  eol;
  '    DNone(String value) ';
  '{';
  eol;
  eol;
  '        super(value);';
  eol;
  '    }';
  eol;
  eol;
  '    @Override';
  eol;
  '    String apply(';
  eol;
  '            Integer index,';
  eol;
  '            String macro,';
  eol;
  '            Integer list_size) ';
  '{';
  eol;
  eol;
  '        if(list_size == 0)';
  '{';
  eol;
  '            return this.value;';
  eol;
  '        }';
  eol;
  eol;
  '        return macro;';
  eol;
  '    }';
  eol;
  '}';
  eol;
  }
}

Macro {
  Name = { 'class', 'before', 'first' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'class DBeforeFirst';
  eol;
  '        extends Directive ';
  '{';
  eol;
  eol;
  '    DBeforeFirst(String value) ';
  '{';
  eol;
  eol;
  '        super(value);';
  eol;
  '    }';
  eol;
  eol;
  '    @Override';
  eol;
  '    String apply(';
  eol;
  '            Integer index,';
  eol;
  '            String macro,';
  eol;
  '            Integer list_size) ';
  '{';
  eol;
  eol;
  '        if(index == 0)';
  '{';
  eol;
  '            return this.value.concat(macro);';
  eol;
  '        }';
  eol;
  '        return macro;';
  eol;
  '    }';
  eol;
  '}';
  eol;
  }
}

Macro {
  Name = { 'class', 'after', 'last' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'class DAfterLast';
  eol;
  '        extends Directive ';
  '{';
  eol;
  eol;
  '    DAfterLast(String value) ';
  '{';
  eol;
  eol;
  '        super(value);';
  eol;
  '    }';
  eol;
  eol;
  '    @Override';
  eol;
  '    String apply(';
  eol;
  '            Integer index,';
  eol;
  '            String macro,';
  eol;
  '            Integer list_size) ';
  '{';
  eol;
  eol;
  '        if(index == list_size - 1)';
  '{';
  eol;
  '            return macro.concat(this.value);';
  eol;
  '        }';
  eol;
  '        return macro;';
  eol;
  '    }';
  eol;
  '}';
  }
}

Macro {
  Name = { 'class', 'separator' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'class DSeparator';
  eol;
  '        extends Directive ';
  '{';
  eol;
  eol;
  '    DSeparator(String value) ';
  '{';
  eol;
  eol;
  '        super(value);';
  eol;
  '    }';
  eol;
  eol;
  '    @Override';
  eol;
  '    String apply(';
  eol;
  '            Integer index,';
  eol;
  '            String macro,';
  eol;
  '            Integer list_size) ';
  '{';
  eol;
  eol;
  '        if(index == list_size - 1)';
  '{';
  eol;
  '            return macro;';
  eol;
  '        }';
  eol;
  eol;
  '        return macro.concat(this.value);';
  eol;
  '    }';
  eol;
  '}';
  }
}

Macro {
  Name = { 'ex', 'object', 'macro', 'exception' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'public class ObjectMacroException';
  eol;
  '        extends RuntimeException';
  '{';
  eol;
  eol;
  '    private ObjectMacroException(';
  eol;
  '            String message)';
  '{';
  eol;
  eol;
  '        super(message);';
  eol;
  eol;
  '        if(message == null)';
  '{';
  eol;
  '            throw new RuntimeException("message may not be null");';
  eol;
  '        }';
  eol;
  '    }';
  eol;
  eol;
  '    private ObjectMacroException(';
  eol;
  '            String message,';
  eol;
  '            Throwable cause) ';
  '{';
  eol;
  eol;
  '        super(message, cause);';
  eol;
  eol;
  '        if (message == null) ';
  '{';
  eol;
  '            throw new RuntimeException("message may not be null");';
  eol;
  '        }';
  eol;
  eol;
  '        if (cause == null) ';
  '{';
  eol;
  '            throw new RuntimeException("cause may not be null");';
  eol;
  '        }';
  eol;
  '    }';
  eol;
  eol;
  '    static ObjectMacroException incorrectType(';
  eol;
  '            String type,';
  eol;
  '            String param_name)';
  '{';
  eol;
  eol;
  eol;
  '        return new ObjectMacroException(';
  eol;
  '                new MIncorrectType(type, param_name).toString());';
  eol;
  '    }';
  eol;
  eol;
  '    static ObjectMacroException macroNull(';
  eol;
  '            Integer index,';
  eol;
  '            String paramName)';
  '{';
  eol;
  eol;
  '        return new ObjectMacroException(';
  eol;
  '                new MMacroNullInList(String.valueOf(index), paramName).toString());';
  eol;
  '    }';
  eol;
  eol;
  '    static ObjectMacroException parameterNull(';
  eol;
  '            String paramName)';
  '{';
  eol;
  eol;
  '        return new ObjectMacroException(new MParameterNull(paramName).toString());';
  eol;
  '    }';
  eol;
  eol;
  '    static ObjectMacroException cyclicReference(';
  eol;
  '            String macroName)';
  '{';
  eol;
  eol;
  '        return new ObjectMacroException(new MCyclicReference(macroName).toString());';
  eol;
  '    }';
  eol;
  eol;
  '    static ObjectMacroException cannotModify(';
  eol;
  '            String macroName)';
  '{';
  eol;
  eol;
  '        return new ObjectMacroException(new MCannotModify(macroName).toString());';
  eol;
  '    }';
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'ex', 'incorrect', 'type' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'public class MIncorrectType ';
  '{';
  eol;
  eol;
  '  private final String pType;';
  eol;
  '  private final String pParamName;';
  eol;
  '  private final MIncorrectType mIncorrectType = this;';
  eol;
  eol;
  '  public MIncorrectType(String pType, String pParamName) ';
  '{';
  eol;
  '    if(pType == null) throw new NullPointerException();';
  eol;
  '    this.pType = pType;';
  eol;
  '    if(pParamName == null) throw new NullPointerException();';
  eol;
  '    this.pParamName = pParamName;';
  eol;
  '  }';
  eol;
  eol;
  '  String pType() ';
  '{';
  eol;
  '    return this.pType;';
  eol;
  '  }';
  eol;
  eol;
  '  String pParamName() ';
  '{';
  eol;
  '    return this.pParamName;';
  eol;
  '  }';
  eol;
  eol;
  '  private String rType() ';
  '{';
  eol;
  '    return this.mIncorrectType.pType();';
  eol;
  '  }';
  eol;
  eol;
  '  private String rParamName() ';
  '{';
  eol;
  '    return this.mIncorrectType.pParamName();';
  eol;
  '  }';
  eol;
  eol;
  '  @Override';
  eol;
  '  public String toString() ';
  '{';
  eol;
  '    StringBuilder sb = new StringBuilder();';
  eol;
  '    sb.append(new MObjectMacroErrorHead().toString());';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    sb.append(rType());';
  eol;
  '    sb.append(" was not expected in parameter \'");';
  eol;
  '    sb.append(rParamName());';
  eol;
  '    sb.append("\'.");';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    return sb.toString();';
  eol;
  '  }';
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'ex', 'object', 'macro', 'error', 'head' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'class MObjectMacroErrorHead ';
  '{';
  eol;
  eol;
  '  MObjectMacroErrorHead() ';
  '{';
  eol;
  '  }';
  eol;
  eol;
  '  @Override';
  eol;
  '  public String toString() ';
  '{';
  eol;
  '    StringBuilder sb = new StringBuilder();';
  eol;
  '    sb.append("*** OBJECT MACRO ERROR ***");';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    return sb.toString();';
  eol;
  '  }';
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'ex', 'parameter', 'null' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'public class MParameterNull ';
  '{';
  eol;
  eol;
  '  private final String pParamName;';
  eol;
  '  private final MParameterNull mParameterNull = this;';
  eol;
  eol;
  '  public MParameterNull(String pParamName) ';
  '{';
  eol;
  '    if(pParamName == null) throw new NullPointerException();';
  eol;
  '    this.pParamName = pParamName;';
  eol;
  '  }';
  eol;
  eol;
  '  String pParamName() ';
  '{';
  eol;
  '    return this.pParamName;';
  eol;
  '  }';
  eol;
  eol;
  '  private String rParamName() ';
  '{';
  eol;
  '    return this.mParameterNull.pParamName();';
  eol;
  '  }';
  eol;
  eol;
  '  @Override';
  eol;
  '  public String toString() ';
  '{';
  eol;
  '    StringBuilder sb = new StringBuilder();';
  eol;
  '    sb.append("Parameter \'");';
  eol;
  '    sb.append(rParamName());';
  eol;
  '    sb.append("\' cannot be null.");';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    return sb.toString();';
  eol;
  '  }';
  eol;
  eol;
  '}';
  eol;
  }
}

Macro {
  Name = { 'ex', 'macro', 'null', 'in', 'list' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'public class MMacroNullInList ';
  '{';
  eol;
  eol;
  '  private final String pIndex;';
  eol;
  '  private final String pParamName;';
  eol;
  '  private final MMacroNullInList mMacroNullInList = this;';
  eol;
  eol;
  '  public MMacroNullInList(String pIndex, String pParamName) ';
  '{';
  eol;
  '    if(pIndex == null) throw new NullPointerException();';
  eol;
  '    this.pIndex = pIndex;';
  eol;
  '    if(pParamName == null) throw new NullPointerException();';
  eol;
  '    this.pParamName = pParamName;';
  eol;
  '  }';
  eol;
  eol;
  '  String pIndex() ';
  '{';
  eol;
  '    return this.pIndex;';
  eol;
  '  }';
  eol;
  eol;
  '  String pParamName() ';
  '{';
  eol;
  '    return this.pParamName;';
  eol;
  '  }';
  eol;
  eol;
  '  private String rIndex() ';
  '{';
  eol;
  '    return this.mMacroNullInList.pIndex();';
  eol;
  '  }';
  eol;
  eol;
  '  private String rParamName() ';
  '{';
  eol;
  '    return this.mMacroNullInList.pParamName();';
  eol;
  '  }';
  eol;
  eol;
  '  @Override';
  eol;
  '  public String toString() ';
  '{';
  eol;
  '    StringBuilder sb = new StringBuilder();';
  eol;
  '    sb.append("A macro is null at index ");';
  eol;
  '    sb.append(rIndex());';
  eol;
  '    sb.append(" in the list \'");';
  eol;
  '    sb.append(rParamName());';
  eol;
  '    sb.append("\'.");';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    return sb.toString();';
  eol;
  '  }';
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'ex', 'cannot', 'modify' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'public class MCannotModify ';
  '{';
  eol;
  eol;
  '  private final String pMacroName;';
  eol;
  '  private final MCannotModify mCannotModify = this;';
  eol;
  eol;
  '  public MCannotModify(String pMacroName) ';
  '{';
  eol;
  '    if(pMacroName == null) throw new NullPointerException();';
  eol;
  '    this.pMacroName = pMacroName;';
  eol;
  '  }';
  eol;
  eol;
  '  String pMacroName() ';
  '{';
  eol;
  '    return this.pMacroName;';
  eol;
  '  }';
  eol;
  eol;
  '  private String rMacroName() ';
  '{';
  eol;
  '    return this.mCannotModify.pMacroName();';
  eol;
  '  }';
  eol;
  eol;
  '  @Override';
  eol;
  '  public String toString() ';
  '{';
  eol;
  '    StringBuilder sb = new StringBuilder();';
  eol;
  '    sb.append(new MObjectMacroErrorHead().toString());';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    sb.append("Instance of M");';
  eol;
  '    sb.append(rMacroName());';
  eol;
  '    sb.append(" cannot be updated after calling the method built.");';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    return sb.toString();';
  eol;
  '  }';
  eol;
  eol;
  '}';
  }
}

Macro {
  Name = { 'ex', 'cyclic', 'reference' } Param {
    Name = { 'package', 'declaration' } Type {
 MacroRef {
 Name = { 'package', 'declaration' } }
 }
 Directive {
     Name = { 'before', 'first' }       eol;
 }
 }
    Initialization Order{
        'package_declaration'    }
  MacroBody{
 MacroInsert {
 MacroRef {
 Name = 'header' }
 };
  eol;
 ParamInsert { Name = { 'package', 'declaration' } } ;
  eol;
  eol;
  'public class MCyclicReference ';
  '{';
  eol;
  eol;
  '  private final String pMacroName;';
  eol;
  '  private final MCyclicReference mCyclicReference = this;';
  eol;
  eol;
  '  public MCyclicReference(String pMacroName) ';
  '{';
  eol;
  '    if(pMacroName == null) throw new NullPointerException();';
  eol;
  '    this.pMacroName = pMacroName;';
  eol;
  '  }';
  eol;
  eol;
  '  String pMacroName() ';
  '{';
  eol;
  '    return this.pMacroName;';
  eol;
  '  }';
  eol;
  eol;
  '  private String rMacroName() ';
  '{';
  eol;
  '    return this.mCyclicReference.pMacroName();';
  eol;
  '  }';
  eol;
  eol;
  '  @Override';
  eol;
  '  public String toString() ';
  '{';
  eol;
  '    StringBuilder sb = new StringBuilder();';
  eol;
  '    sb.append(new MObjectMacroErrorHead().toString());';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    sb.append("An instance of \\"");';
  eol;
  '    sb.append(rMacroName());';
  eol;
  '    sb.append("\\" is a cyclic reference to the same instance.");';
  eol;
  '    sb.append(System.getProperty("line.separator"));';
  eol;
  '    return sb.toString();';
  eol;
  '  }';
  eol;
  eol;
  '}';
  }
}

