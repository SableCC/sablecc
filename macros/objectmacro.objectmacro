This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

$macro: package(package_name) $

package $package_name;
$end: package $

$macro: printable() $
/* This file was generated by SableCC's ObjectMacro. */
$expand: package$

abstract class Printable {

  public abstract void appendTo(StringBuilder sb);

  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendTo(sb);
    return sb.toString();
  }
}
$end: printable $

$macro: root_macro() $
/* This file was generated by SableCC's ObjectMacro. */
$expand: package$

abstract class Macro extends Printable {

  public abstract Macro get_parent();
}
$end: root_macro $

$macro: macro(macro_name) $
/* This file was generated by SableCC's ObjectMacro. */
$expand: package$

import java.util.*;

public class M_$macro_name extends Macro {

  // ---- EOL ----
  private static final String EOL = System.getProperty("line.separator");

  // ---- parameters ----
$macro: param_declaration(param_name) $
  private final String p_$param_name;
$end: param_declaration $

  // ---- text blocks ----
$macro: text_block_declaration(text_block_name) $
  private final T_$text_block_name t_$text_block_name;
$end: text_block_declaration $

  // ---- expands ----
$macro: expand_declaration(expand_name) $
  private final List<Macro> e_$expand_name = new LinkedList<Macro>();
$end: expand_declaration $

$macro: public_top_level_constructor() $
  // ---- parent ----
  public Macro get_parent() {
    return null;
  }

  // ---- constructor ----
  public M_$macro_name($comment: no eol $
$end: public_top_level_constructor $
$macro: package_top_level_constructor() $
  // ---- parent ----
  public Macro get_parent() {
    return null;
  }

  // ---- constructor ----
  M_$macro_name($comment: no eol $
$end: package_top_level_constructor $
$macro: sub_level_constructor() $
  // ---- parent ----
  private final Macro parent;

  public Macro get_parent() {
    return this.parent;
  }

  // ---- constructor ----
  M_$macro_name(
      Macro parent$comment: no eol $
$end: sub_level_constructor $
$macro: constructor_first_param(param_name) $

      String p_$(param_name)$comment: no eol $
$end: constructor_first_param $
$macro: constructor_additional_param(param_name) $
,
      String p_$(param_name)$comment: no eol $
$end: constructor_additional_param $
) {
$macro: sub_level_constructor_parent_initialisation() $
    this.parent = parent;
$end: sub_level_constructor_parent_initialisation $
$macro: constructor_param_initialisation(param_name) $
    this.p_$param_name = p_$param_name;
$end: constructor_param_initialisation $
$macro: constructor_text_block_initialisation(text_block_name) $
    this.t_$text_block_name = new T_$text_block_name(this);
$end: constructor_text_block_initialisation $
  }

  // ---- local parameter accessors ----
$macro: local_param_accessor(param_name) $

  String get_local_p_$param_name() {
    return this.p_$param_name;
  }
$end: local_param_accessor $

  // ---- local text block accessors ----
$macro: local_text_block_accessor(text_block_name) $

  T_$text_block_name get_local_t_$text_block_name() {
    return this.t_$text_block_name;
  }
$end: local_text_block_accessor $

  // ---- parameter accessors ----
$macro: param_accessor(param_name, containing_macro_name) $

  private String cached_p_$param_name;

  String get_p_$param_name() {
    String result = this.cached_p_$param_name;
    if(result == null) {
      Macro current = this;
      while(!(current instanceof M_$containing_macro_name)) {
        current = current.get_parent();
      }
      result = ((M_$containing_macro_name) current).get_local_p_$param_name();
      this.cached_p_$param_name = result;
    }
    return result;
  }
$end: param_accessor $

  // ---- text block accessors ----
$macro: top_level_text_block_accessor(text_block_name) $

  private T_$text_block_name cached_t_$text_block_name;

  T_$text_block_name get_t_$text_block_name() {
    T_$text_block_name result = this.cached_t_$text_block_name;
    if(result == null) {
      result = T_$text_block_name.getInstance();
      this.cached_t_$text_block_name = result;
    }
    return result;
  }
$end: top_level_text_block_accessor $
$macro: sub_level_text_block_accessor(text_block_name, containing_macro_name) $

  private T_$text_block_name cached_t_$text_block_name;

  T_$text_block_name get_t_$text_block_name() {
    T_$text_block_name result = this.cached_t_$text_block_name;
    if(result == null) {
      Macro current = this;
      while(!(current instanceof M_$containing_macro_name)) {
        current = current.get_parent();
      }
      result = ((M_$containing_macro_name) current).get_local_t_$text_block_name();
      this.cached_t_$text_block_name = result;
    }
    return result;
  }
$end: sub_level_text_block_accessor $

  // sub-macro creators
$macro: submacro_creator(submacro_name) $

  public M_$submacro_name new_$submacro_name($comment: no eol $
$macro: submacro_first_parameter(param_name) $

      String p_$param_name$comment: no eol $
$end: submacro_first_parameter $
$macro: submacro_additional_parameter(param_name) $
,
      String p_$param_name$comment: no eol $
$end: submacro_additional_parameter $
) {
    M_$submacro_name result = new M_$submacro_name($comment: no eol $
$macro: submacro_new_this_param() $
this$comment: no eol $
$end: submacro_new_this_param $
$macro: submacro_new_first_param(param_name) $
p_$param_name$comment: no eol $
$end: submacro_new_first_param $
$macro: submacro_new_additional_param(param_name) $
, p_$param_name$comment: no eol $
$end: submacro_new_additional_param $
);
$macro: add_to_expand(expand_name) $
    e_$expand_name.add(result);
$end: add_to_expand $
    return result;
  }
$end: submacro_creator $

  // ---- append ----

  public void appendTo(StringBuilder sb) {
$expand:
  text_append,
  eol_append,
  escape_append,
  var_append,
  expand_append,
  text_insert_append
$
$macro: text_append(text) $
    sb.append("$text");
$end: text_append $
$macro: eol_append() $
    sb.append(EOL);
$end: eol_append $
$macro: escape_append(char) $
    sb.append('$char');
$end: escape_append $
$macro: var_append(var_name) $
    sb.append(get_p_$var_name());
$end: var_append $
$macro: expand_append(expand_name) $
    if(e_$expand_name.size() == 0) {
$macro: expand_append_none_string_part(none_string_part) $
      sb.append("$none_string_part");
$end: expand_append_none_string_part $
$macro: expand_append_none_text_block(text_block_name) $
      get_t_$text_block_name().appendTo(sb);
$end: expand_append_none_text_block $
    }
    else {
      boolean first = true;
      for(Macro macro : e_$expand_name) {
        if(first) {
          first = false;
$macro: expand_append_before_first_string_part(before_first_string_part) $
          sb.append("$before_first_string_part");
$end: expand_append_before_first_string_part $
$macro: expand_append_before_first_text_block(text_block_name) $
          get_t_$text_block_name().appendTo(sb);
$end: expand_append_before_first_text_block $
        }
        else {
$macro: expand_append_separator_string_part(separator_string_part) $
          sb.append("$separator_string_part");
$end: expand_append_separator_string_part $
$macro: expand_append_separator_text_block(text_block_name) $
          get_t_$text_block_name().appendTo(sb);
$end: expand_append_separator_text_block $
        }
        macro.appendTo(sb);
      }
$macro: expand_append_after_last_string_part(after_last_string_part) $
      sb.append("$after_last_string_part");
$end: expand_append_after_last_string_part $
$macro: expand_append_after_last_text_block(text_block_name) $
      get_t_$text_block_name().appendTo(sb);
$end: expand_append_after_last_text_block $
    }
$end: expand_append $
$macro: text_insert_append(text_insert_name) $
    get_t_$text_insert_name().appendTo(sb);
$end: text_insert_append $
  }
}
$end: macro $

$macro: text_block(block_name) $
/* This file was generated by SableCC's ObjectMacro. */
$expand: package$

import java.util.*;

public class T_$block_name extends Printable {

  // ---- EOL ----
  private static final String EOL = System.getProperty("line.separator");

$macro: top_level_constructor() $
  // ---- instance ----
  private static final T_$block_name instance = new T_$block_name();

  static T_$block_name getInstance() {
    return instance;
  }

  // ---- constructor ----
  private T_$block_name() {
  }
$end: top_level_constructor $
$macro: sub_level_constructor() $
  // ---- parent ----
  private final Macro parent;

  // ---- constructor ----
  T_$block_name(
      Macro parent) {
    this.parent = parent;
  }
$end: sub_level_constructor $

  // ---- parameter accessors ----
$macro: param_accessor(param_name, containing_macro_name) $

  private String cached_p_$param_name;

  String get_p_$param_name() {
    String result = this.cached_p_$param_name;
    if(result == null) {
      Macro current = parent;
      while(!(current instanceof M_$containing_macro_name)) {
        current = current.get_parent();
      }
      result = ((M_$containing_macro_name) current).get_local_p_$param_name();
      this.cached_p_$param_name = result;
    }
    return result;
  }
$end: param_accessor $

  // ---- text block accessors ----
$macro: top_level_text_block_accessor(text_block_name) $

  private T_$text_block_name cached_t_$text_block_name;

  T_$text_block_name get_t_$text_block_name() {
    T_$text_block_name result = this.cached_t_$text_block_name;
    if(result == null) {
      result = T_$text_block_name.getInstance();
      this.cached_t_$text_block_name = result;
    }
    return result;
  }
$end: top_level_text_block_accessor $
$macro: sub_level_text_block_accessor(text_block_name, containing_macro_name) $

  private T_$text_block_name cached_t_$text_block_name;

  T_$text_block_name get_t_$text_block_name() {
    T_$text_block_name result = this.cached_t_$text_block_name;
    if(result == null) {
      Macro current = parent;
      while(!(current instanceof M_$containing_macro_name)) {
        current = current.get_parent();
      }
      result = ((M_$containing_macro_name) current).get_local_t_$text_block_name();
      this.cached_t_$text_block_name = result;
    }
    return result;
  }
$end: sub_level_text_block_accessor $

  // ---- append ----

  public void appendTo(StringBuilder sb) {
$expand:
  text_append,
  eol_append,
  escape_append,
  var_append,
  text_insert_append
$
$macro: text_append(text) $
    sb.append("$text");
$end: text_append $
$macro: eol_append() $
    sb.append(EOL);
$end: eol_append $
$macro: escape_append(char) $
    sb.append('$char');
$end: escape_append $
$macro: var_append(var_name) $
    sb.append(get_p_$var_name());
$end: var_append $
$macro: text_insert_append(text_insert_name) $
    get_t_$text_insert_name().appendTo(sb);
$end: text_insert_append $
  }
}
$end: text_block $
