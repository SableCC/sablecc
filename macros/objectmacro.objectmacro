$comment$
This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
$end$

$comment: ========== package_declaration ========== $

$macro: package_declaration(package_name) $

package $package_name;
$end: package_declaration $

$comment: ========== header ========== $

$text: header $
/* This file was generated by SableCC's ObjectMacro. */
$end: header $

$comment: ========== printable ========== $

$macro: printable $
$insert: header $
$expand: package_declaration $

abstract class Printable {

  // ---- EOL ----

  static final String EOL = System.getProperty("line.separator");

  // ---- appendTo ----

  public abstract void appendTo(StringBuilder sb);

  // ---- toString ----

  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendTo(sb);
    return sb.toString();
  }

}
$end: printable $

$comment: ========== abstract_macro ========== $

$macro: abstract_macro $
$insert: header $
$expand: package_declaration $

abstract class Macro extends Printable {

  // ---- get_parent ----

  abstract Macro get_parent();

}
$end: abstract_macro $

$comment: ========== blank line ========== $

$text: blank_line $

$end: blank_line $

$comment: ========== comma ========== $

$text: comma $
, $comment: no eol $
$end: comma $

$comment: ========== parent ========== $

$macro: parent $
this.get_parent()$comment: no eol $
$end: parent $

$comment: ========== this ========== $

$macro: this $
this$comment: no eol $
$end: this $

$comment: ========== param_accessor_head ========== $

$text: param_accessor_head $
  // ---- parameter accessors ----

$end: param_accessor_head $

$comment: ========== param_accessor ========== $

$macro: param_accessor(param_name, containing_macro_name) $
  private String cached_p_$param_name;

  private String get_p_$param_name() {
    String result = this.cached_p_$param_name;

    if(result == null) {
      Macro current = $expand: this, parent$;

      while(!(current instanceof M_$containing_macro_name)) {
        current = current.get_parent();
      }

      result = ((M_$containing_macro_name) current).get_local_p_$param_name();
      this.cached_p_$param_name = result;
    }

    return result;
  }

$end: param_accessor $

$comment: ========== text_block_accessor_head ========== $

$text: text_block_accessor_head $
  // ---- text block accessors ----

$end: text_block_accessor_head $

$comment: ========== top_level_text_block_accessor ========== $

$macro: top_level_text_block_accessor(text_block_name) $
  private T_$text_block_name cached_t_$text_block_name;

  private T_$text_block_name get_t_$text_block_name() {
    T_$text_block_name result = this.cached_t_$text_block_name;

    if(result == null) {
      result = T_$text_block_name.getInstance();
      this.cached_t_$text_block_name = result;
    }

    return result;
  }

$end: top_level_text_block_accessor $

$comment: ========== sub_level_text_block_accessor ========== $

$macro: sub_level_text_block_accessor(text_block_name, containing_macro_name) $
  private T_$text_block_name cached_t_$text_block_name;

  T_$text_block_name get_t_$text_block_name() {
    T_$text_block_name result = this.cached_t_$text_block_name;

    if(result == null) {
      Macro current = $expand: this, parent$;

      while(!(current instanceof M_$containing_macro_name)) {
        current = current.get_parent();
      }

      result = ((M_$containing_macro_name) current).get_local_t_$text_block_name();
      this.cached_t_$text_block_name = result;
    }

    return result;
  }

$end: sub_level_text_block_accessor $

$comment: ========== text_append ========== $

$macro: text_append(text) $
    sb.append("$text");
$end: text_append $

$comment: ========== eol_append ========== $

$macro: eol_append $
    sb.append(EOL);
$end: eol_append $

$comment: ========== escape_append ========== $

$macro: escape_append(char) $
    sb.append('$char');
$end: escape_append $

$comment: ========== var_append ========== $

$macro: var_append(var_name) $
    sb.append(get_p_$var_name());
$end: var_append $

$comment: ========== text_insert_append ========== $

$macro: text_insert_append(text_insert_name) $
    get_t_$text_insert_name().appendTo(sb);
$end: text_insert_append $

$comment: ========== macro ========== $

$macro: macro(macro_name) $
$insert: header $
$expand: package_declaration $

import java.util.LinkedList;
import java.util.List;

public class M_$macro_name extends Macro {

  // ---- constructor ----

$macro: macro_constructor_head $
$macro: macro_constructor_public $
public $comment: no eol $
$end: macro_constructor_public $
$macro: macro_constructor_parent $
$macro: macro_constructor_comma $
$insert: comma $
$end: macro_constructor_comma $
Macro parent$expand: macro_constructor_comma $
$end: macro_constructor_parent $
  $expand: macro_constructor_public $
M_$macro_name($expand: macro_constructor_parent $
$end: macro_constructor_head $
$comment$

$end$
$expand:
  constructor_param,
  separator=comma
$
$macro: constructor_param(param_name) $
String p_$(param_name)$comment: no eol $
$end: constructor_param $
$comment$

$end$
) {
$macro: constructor_parent_initialisation $
    this.parent = parent;
$end: constructor_parent_initialisation $
$macro: constructor_param_initialisation(param_name) $
    this.p_$param_name = p_$param_name;
$end: constructor_param_initialisation $
$macro: constructor_text_block_initialisation(text_block_name) $
    this.t_$text_block_name = new T_$text_block_name(this);
$end: constructor_text_block_initialisation $
  }

$macro: macro_without_parent $
  // ---- parent ----

  @Override
  Macro get_parent() {
    return null;
  }

$end: macro_without_parent $
$macro: macro_with_parent $
  // ---- parent ----

  private final Macro parent;

  @Override
  Macro get_parent() {
    return this.parent;
  }

$end: macro_with_parent $
$comment$

$end$
$expand:
  param_declaration,
  before_first=param_declaration_header
$
$text: param_declaration_header $
  // ---- parameters ----

$end: param_declaration_header $
$macro: param_declaration(param_name) $
  private final String p_$param_name;

  String get_local_p_$param_name() {
    return this.p_$param_name;
  }

$end: param_declaration $
$comment$

$end$
$expand:
  text_block_declaration,
  before_first=text_block_declaration_header
$
$text: text_block_declaration_header $
  // ---- text blocks ----

$end: text_block_declaration_header $
$macro: text_block_declaration(text_block_name) $
  private final T_$text_block_name t_$text_block_name;

  T_$text_block_name get_local_t_$text_block_name() {
    return this.t_$text_block_name;
  }

$end: text_block_declaration $
$comment$

$end$
$expand:
  expand_declaration,
  before_first=expand_declaration_header,
  after_last=blank_line
$
$text: expand_declaration_header $
  // ---- expands ----

$end: expand_declaration_header $
$macro: expand_declaration(expand_name) $
  private final List<Macro> e_$expand_name = new LinkedList<Macro>();
$end: expand_declaration $
$comment$

$end$
$expand:
  param_accessor,
  before_first=param_accessor_head
$
$comment$

$end$
$expand:
  top_level_text_block_accessor,
  sub_level_text_block_accessor,
  before_first=text_block_accessor_head
$
$comment$

$end$
$expand:
  submacro_creator,
  before_first=submacro_creator_head
$
$text: submacro_creator_head $
  // ---- macro creators ----

$end: submacro_creator_head $
$macro: submacro_creator(submacro_name) $
  public M_$submacro_name new_$submacro_name($comment: no eol $
$expand:
  submacro_parameter,
  separator=comma
$
$macro: submacro_parameter(param_name) $
String p_$(param_name)$comment: no eol $
$end: submacro_parameter $
) {
$macro: submacro_this $
$macro: submacro_comma $
$insert: comma $
$end: submacro_comma $
this$expand: submacro_comma $
$end: submacro_this $
    M_$submacro_name result = new M_$submacro_name($expand: submacro_this $
$expand:
  submacro_call_param,
  separator=comma
$
$macro: submacro_call_param(param_name) $
p_$(param_name)$comment: no eol $
$end: submacro_call_param $
);
$macro: add_to_expand(expand_name) $
    e_$expand_name.add(result);
$end: add_to_expand $
    return result;
  }

$end: submacro_creator $

  // ---- appendTo ----

  @Override
  public void appendTo(StringBuilder sb) {
$expand:
  text_append,
  eol_append,
  escape_append,
  var_append,
  expand_append,
  text_insert_append,
  separator=blank_line
$
$macro: expand_append(expand_name) $
    if(e_$expand_name.size() == 0) {
$macro: expand_append_none_string_part(none_string_part) $
      sb.append("$none_string_part");
$end: expand_append_none_string_part $
$macro: expand_append_none_text_block(text_block_name) $
      get_t_$text_block_name().appendTo(sb);
$end: expand_append_none_text_block $
    }
    else {
      boolean first = true;
      for(Macro macro : e_$expand_name) {
        if(first) {
          first = false;
$macro: expand_append_before_first_string_part(before_first_string_part) $
          sb.append("$before_first_string_part");
$end: expand_append_before_first_string_part $
$macro: expand_append_before_first_text_block(text_block_name) $
          get_t_$text_block_name().appendTo(sb);
$end: expand_append_before_first_text_block $
        }
        else {
$macro: expand_append_separator_string_part(separator_string_part) $
          sb.append("$separator_string_part");
$end: expand_append_separator_string_part $
$macro: expand_append_separator_text_block(text_block_name) $
          get_t_$text_block_name().appendTo(sb);
$end: expand_append_separator_text_block $
        }
        macro.appendTo(sb);
      }
$macro: expand_append_after_last_string_part(after_last_string_part) $
      sb.append("$after_last_string_part");
$end: expand_append_after_last_string_part $
$macro: expand_append_after_last_text_block(text_block_name) $
      get_t_$text_block_name().appendTo(sb);
$end: expand_append_after_last_text_block $
    }
$end: expand_append $
  }

}
$end: macro $

$comment: ========== text_block ========== $

$macro: text_block(block_name) $
$insert: header $
$expand: package_declaration $

import java.util.*;

public class T_$block_name extends Printable {

$macro: top_level_text_block $
  // ---- constructor ----

  private T_$block_name() {
  }

  // ---- instance ----

  private static final T_$block_name instance = new T_$block_name();

  static T_$block_name getInstance() {
    return instance;
  }

$end: top_level_text_block $
$macro: sub_level_text_block $
  // ---- constructor ----

  T_$block_name(
      Macro parent) {
    this.parent = parent;
  }

  // ---- parent ----

  private final Macro parent;

  Macro get_parent() {
    return this.parent;
  }

$end: sub_level_text_block $
$comment$

$end$
$expand:
  param_accessor,
  before_first=param_accessor_head
$
$comment$

$end$
$expand:
  top_level_text_block_accessor,
  sub_level_text_block_accessor,
  before_first=text_block_accessor_head
$
$comment$

$end$

  // ---- appendTo ----

  @Override
  public void appendTo(StringBuilder sb) {
$expand:
  text_append,
  eol_append,
  escape_append,
  var_append,
  text_insert_append,
  separator=blank_line
$
  }

}
$end: text_block $
