This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

$macro: macro_class(class_name,protection) $
/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.bootstrap.macro;

import java.util.*;

public class Macro_$class_name {

  // parameter declarations
$macro: parameter_declaration(param_name) $
  private final String param_$param_name;
$end: parameter_declaration $

  // nested macro declarations
$macro: nested_macro_declaration(nested_macro_name) $
  private final List<Macro_$nested_macro_name> macro_$(nested_macro_name)_list =
    new LinkedList<Macro_$nested_macro_name>();
$end: nested_macro_declaration $

  // constructor
  $protection Macro_$class_name($comment: no eol $
$macro: constructor_first_parameter(param_name) $

      String param_$param_name$comment: no eol $
$end: constructor_first_parameter $
$macro: constructor_additional_parameter(param_name) $
,
      String param_$param_name$comment: no eol $
$end: constructor_additional_parameter $
) {
$macro: parameter_initialisation(param_name) $
    this.param_$param_name = param_$param_name;
$end: parameter_initialisation $
  }

  // toString
  public String toString() {
    StringBuilder sb = new StringBuilder();
$macro: instruction() $
$macro: var(var_name) $
    sb.append(this.param_$var_name);
$end: var $
$macro: text(text) $
    sb.append("$text");
$end: text $
$macro: dquote() $
    sb.append('"');
$end: dquote $
$macro: eol() $
    sb.append(System.getProperty("line.separator"));
$end: eol $
$macro: escape(char) $
    sb.append('$char');
$end: escape $
$macro: macro(macro_name) $
    for(Macro_$macro_name macro_$macro_name : this.macro_$(macro_name)_list) {
      sb.append(macro_$macro_name.toString());
    }
$end: macro $
$end: instruction$
    return sb.toString();
  }

  // nested macros
$macro: nested_macro(nested_macro_name) $
  public Macro_$nested_macro_name newMacro_$nested_macro_name($comment: no eol$
$macro: nested_macro_first_parameter(param_name) $

      String param_$param_name$comment: no eol $
$end: nested_macro_first_parameter $
$macro: nested_macro_additional_parameter(param_name) $
,
      String param_$param_name$comment: no eol $
$end: nested_macro_additional_parameter $
) {
    Macro_$nested_macro_name macro_$nested_macro_name = new Macro_$nested_macro_name($comment: no eol $
$macro: new_first_parameter(param_name) $

        param_$param_name$comment: no eol $
$end: new_first_parameter $
$macro: new_additional_parameter(param_name) $
,
        param_$param_name$comment: no eol $
$end: new_additional_parameter $
);
    this.macro_$(nested_macro_name)_list.add(macro_$nested_macro_name);
    return macro_$nested_macro_name;
  }
$end: nested_macro $

}
$end: macro_class $
