This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

$macro: package(name) $

package $name;
$end: package $

$macro: root_macro() $
/* This file was generated by SableCC's ObjectMacro. */
$expand: package$

public abstract class Macro {

  public abstract void appendTo(StringBuilder sb);

  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendTo(sb);
    return sb.toString();
  }
}
$end: root_macro $

$macro: macro_file() $
/* This file was generated by SableCC's ObjectMacro. */
$expand: package$

import java.util.*;

$expand: macro$
$macro: macro(class_name, indent) $
$(indent)public class M_$class_name extends Macro {

$macro: parameter_declaration(param_name) $
$(indent)  private final String p_$param_name;
$end: parameter_declaration $

$macro: nested_macro_declaration(nested_macro_name) $
$(indent)  private final List<M_$nested_macro_name> m_$nested_macro_name = new LinkedList<M_$nested_macro_name>();
$end: nested_macro_declaration $

$macro: expand_declaration(expand_name) $
$(indent)  private final List<Macro> e_$expand_name = new LinkedList<Macro>();
$end: expand_declaration $

$(indent)  $comment: no eol $
$macro: public_constructor() $
public $comment: no eol $
$end: public_constructor $
M_$class_name($comment: no eol $
$macro: constructor_first_parameter(param_name) $

$(indent)      String p_$param_name$comment: no eol $
$end: constructor_first_parameter $
$macro: constructor_additional_parameter(param_name) $
,
$(indent)      String p_$param_name$comment: no eol $
$end: constructor_additional_parameter $
) {
$macro: constructor_initialisation(param_name) $
$(indent)    this.p_$param_name = p_$param_name;
$end: constructor_initialisation $
$(indent)  }

$macro: nested_macro(nested_macro_name) $
$(indent)  public M_$nested_macro_name newM_$nested_macro_name($comment: no eol $
$macro: nested_macro_first_parameter(param_name) $

$(indent)      String p_$param_name$comment: no eol $
$end: nested_macro_first_parameter $
$macro: nested_macro_additional_parameter(param_name) $
,
$(indent)      String p_$param_name$comment: no eol $
$end: nested_macro_additional_parameter $
) {
$(indent)    M_$nested_macro_name v_$nested_macro_name = new M_$nested_macro_name($comment: no eol $
$macro: new_first_parameter(param_name) $
p_$param_name$comment: no eol $
$end: new_first_parameter $
$macro: new_additional_parameter(param_name) $
, p_$param_name$comment: no eol $
$end: new_additional_parameter $
);
$macro: add_to_nested_macro() $
$(indent)    m_$nested_macro_name.add(v_$nested_macro_name);
$end: add_to_nested_macro $
$macro: add_to_expand(expand_name) $
$(indent)    e_$expand_name.add(v_$nested_macro_name);
$end: add_to_expand $
$(indent)    return v_$nested_macro_name;
$(indent)  }
$end: nested_macro $

$(indent)  public void appendTo(StringBuilder sb) {
$expand:
  var_append,
  text_append,
  dquote_append,
  eol_append,
  escape_append,
  nested_macro_append,
  expand_append
$
$macro: var_append(var_name) $
$(indent)    sb.append(p_$var_name);
$end: var_append $
$macro: text_append(text) $
$(indent)    sb.append("$text");
$end: text_append $
$macro: dquote_append() $
$(indent)    sb.append('"');
$end: dquote_append $
$macro: eol_append() $
$(indent)    sb.append(System.getProperty("line.separator"));
$end: eol_append $
$macro: escape_append(char) $
$(indent)    sb.append('$char');
$end: escape_append $
$macro: nested_macro_append(nested_macro_name) $
$(indent)    for(M_$nested_macro_name v_$nested_macro_name : m_$nested_macro_name) {
$(indent)      v_$nested_macro_name.appendTo(sb);
$(indent)    }
$end: nested_macro_append $
$macro: expand_append(expand_name) $
$(indent)    for(Macro v_Macro : e_$expand_name) {
$(indent)      v_Macro.appendTo(sb);
$(indent)    }
$end: expand_append $
$(indent)  }

$expand: macro$
$(indent)}

$end: macro $
$end: macro_file $
