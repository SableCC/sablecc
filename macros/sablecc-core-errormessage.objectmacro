$comment$
This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
$end$

$comment: ========== semantic_error_head ========== $

$text: semantic_error_head $
*** SEMANTIC ERROR ***
$end: semantic_error_head $

$comment: ========== duplicate_declaration ========== $

$macro: duplicate_declaration(name, type, line, char, ref_type, ref_line, ref_char) $
$insert: semantic_error_head $

Line: $line
Char: $char
The "$name" $type declaration reuses an existing name.
A "$name" $ref_type is already declared at line $ref_line, char $ref_char.
$end: duplicate_declaration $

$comment$
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

$comment: ========== invalid_interval ========== $

$macro: invalid_interval(line, char, from, to) $
$insert: semantic_error_head $

Line: $line
Char: $char
The interval is invalid as $from is bigger than $to.
$end: invalid_interval $

$comment: ========== undefined_reference ========== $

$macro: undefined_reference(name, line, char) $
$insert: semantic_error_head $

Line: $line
Char: $char
"$name" is not defined.
$end: undefined_reference $

$comment: ========== invalid_reference ========== $

$macro: invalid_reference(name, line, char) $
$insert: semantic_error_head $

Line: $line
Char: $char
"$name" is an invalid reference.
$end: invalid_reference $

$comment: ========== cyclic_reference ========== $

$macro: cyclic_reference(reference, line, char, context, context_line, context_char) $
$insert: semantic_error_head $

Line: $line
Char: $char
"$reference" is a cyclic reference to "$context" of line $context_line, char $context_char.
$end: cyclic_reference $

$comment: ========== invalid_priority ========== $

$macro: invalid_priority(line, char, token) $
$insert: semantic_error_head $

Line: $line
Char: $char
The priority is invalid, as "$token" appears on both sides.
$end: invalid_priority $

$comment: ========== conflicting_priorities ========== $

$macro: conflicting_priorities(line, char, high_token, low_token, context_line, context_char) $
$insert: semantic_error_head $

Line: $line
Char: $char
The priority of "$high_token" over "$low_token" conflicts with the reverse priority of line $context_line, char $context_char.
$end: conflicting_priorities $

$comment: ========== not_a_token ========== $

$macro: not_a_token(line, char, token) $
$insert: semantic_error_head $

Line: $line
Char: $char
"$token" is not a token.
$end: not_a_token $

$comment: ========== lexer_conflict ========== $

$macro: lexer_conflict(token1, token2) $
$insert: semantic_error_head $

A conflict has been detected between the "$token1" and "$token2" tokens.
An explicit priority must be added between these tokens.
$end: lexer_conflict $

$comment: ========== parser_useless_production ========== $

$macro: parser_useless_production(name) $
$insert: semantic_error_head $

The "$name" production is useless; it cannot match any finite sentence.
$end: parser_useless_production $

$comment: ========== parser_spurious_priority ========== $

$macro: parser_spurious_priority(name, line, char) $
$insert: semantic_error_head $

Line: $line
Char: $char
The priority of "$name" is already set.
$end: parser_spurious_priority $

$comment: ========== alternative_not_recursive ========== $

$macro: alternative_not_recursive(name, line, char) $
$insert: semantic_error_head $

Line: $line
Char: $char
The "$name" alternative is not left or right recursive.
$end: alternative_not_recursive $

$comment: ========== recursion_not_followed_by_token ========== $

$macro: recursion_not_followed_by_token(name, line, char) $
$insert: semantic_error_head $

Line: $line
Char: $char
The operator of the "$name" alternative is not a token.
$end: recursion_not_followed_by_token $

$end$
