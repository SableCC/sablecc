$comment$
This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
$end$

$comment: ========== text ========== $

$macro: text(name) $
$insert: header $
$expand: package_declaration, before_first=eol $

class M$name {
$expand: param_field, self_ref_text, ancestor_field, before_first=eol $
$macro: self_ref_text $
  private final M$name m$name = this;
$end: self_ref_text $

  M$name($expand: param_param, ancestor_param, separator=", " $) {
$expand: param_constructor_init, ancestor_constructor_init $
  }
$expand: param, before_first=eol, separator=eol $
$expand: param_ref, before_first=eol, separator=eol $

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
$expand: string_part, eol_part, param_insert_part, text_insert_part $
    return sb.toString();
  }

}
$end: text $

$comment: ========== macro ========== $

$macro: macro(name) $
$insert: header $
$expand: package_declaration, before_first=eol $
$expand: import_java_util, before_first=eol $

public class M$name {
$expand: param_field, self_ref_macro, ancestor_field, expand_field, before_first=eol $
$macro: self_ref_macro $
  private final M$name m$name = this;
$end: self_ref_macro $

  $expand: public $
M$name($expand: param_param, ancestor_param, separator=", " $) {
$expand: param_constructor_init, ancestor_constructor_init $
  }
$expand: macro_creator, before_first=eol, separator=eol $
$expand: param, before_first=eol, separator=eol $
$expand: param_ref, before_first=eol, separator=eol $

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
$expand: string_part, eol_part, param_insert_part, text_insert_part, expand_insert_part $
    return sb.toString();
  }

}
$end: macro $

$comment: ========== header ========== $

$text: header $
/* This file was generated by SableCC's ObjectMacro. */
$end: header $

$comment: ========== package_declaration ========== $

$macro: package_declaration(package_name) $
package $package_name;
$end: package_declaration $

$comment: ========== import_java_util ========== $

$macro: import_java_util $
import java.util.*;
$end: import_java_util $

$comment: ========== eol ========== $

$text: eol $

$end: eol $

$comment: ========== param_field ========== $

$macro: param_field(name) $
  private final String p$name;
$end: param_field $

$comment: ========== ancestor_field ========== $

$macro: ancestor_field(name) $
  private final M$name m$name;
$end: ancestor_field $

$comment: ========== expand_field ========== $

$macro: expand_field(name) $
  private final List<Object> e$name = new LinkedList<Object>();
$end: expand_field $

$comment: ========== macro_creator ========== $

$macro: macro_creator(name) $
  public M$name new$name($expand: param_param, separator=", " $) {
    M$name l$name = new M$name($expand: param_arg, ancestor_arg, separator=", " $);
$macro: add_to_expand(signature) $
    this.e$signature.add(l$name);
$end: add_to_expand $
    return l$name;
  }
$end: macro_creator $

$comment: ========== param ========== $

$macro: param(name) $
  String p$name() {
    return this.p$name;
  }
$end: param $

$comment: ========== param_ref ========== $

$macro: param_ref(name, context) $
  private String r$name() {
    return this.m$context.p$name();
  }
$end: param_ref $

$comment: ========== param_param ========== $

$macro: param_param(name) $
String p$(name)$comment: no eol $
$end: param_param $

$comment: ========== ancestor_param ========== $

$macro: ancestor_param(name) $
M$name m$(name)$comment: no eol $
$end: ancestor_param $

$comment: ========== param_arg ========== $

$macro: param_arg(name) $
p$(name)$comment: no eol $
$end: param_arg $

$comment: ========== ancestor_arg ========== $

$macro: ancestor_arg(name) $
m$(name)$comment: no eol $
$end: ancestor_arg $

$comment: ========== param_constructor_init ========== $

$macro: param_constructor_init(name) $
    if(p$name == null) throw new NullPointerException();
    this.p$name = p$name;
$end: param_constructor_init $

$comment: ========== ancestor_constructor_init ========== $

$macro: ancestor_constructor_init(name) $
    if(m$name == null) throw new NullPointerException();
    this.m$name = m$name;
$end: ancestor_constructor_init $

$comment: ========== string_part ========== $

$macro: string_part(string) $
    sb.append("$string");
$end: string_part $

$comment: ========== eol_part ========== $

$macro: eol_part $
    sb.append(System.getProperty("line.separator"));
$end: eol_part $

$comment: ========== param_insert_part ========== $

$macro: param_insert_part(name) $
    sb.append(r$name());
$end: param_insert_part $

$comment: ========== text_insert_part ========== $

$macro: text_insert_part $
    sb.append($expand: text_insert $);
$end: text_insert_part $

$comment: ========== expand_insert_part ========== $

$macro: expand_insert_part(name) $
$macro: none $
    if(this.e$name.size() == 0) {
      sb.append($expand: inline_text, param_insert, text_insert $);
    }
$end: none $
$macro: before_first $
    if(this.e$name.size() > 0) {
      sb.append($expand: inline_text, param_insert, text_insert $);
    }
$end: before_first $
$macro: before_one $
    if(this.e$name.size() == 1) {
      sb.append($expand: inline_text, param_insert, text_insert $);
    }
$end: before_one $
$macro: before_many $
    if(this.e$name.size() > 1) {
      sb.append($expand: inline_text, param_insert, text_insert $);
    }
$end: before_many $
$macro: separator $
    {
      boolean first = true;
      for(Object o$name : this.e$name) {
        if(first) {
          first = false;
        }
        else {
          sb.append($expand: inline_text, param_insert, text_insert $);
        }
        sb.append(o$name.toString());
      }
    }
$end: separator $
$macro: no_separator $
    for(Object o$name : this.e$name) {
      sb.append(o$name.toString());
    }
$end: no_separator $
$macro: after_last $
    if(this.e$name.size() > 0) {
      sb.append($expand: inline_text, param_insert, text_insert $);
    }
$end: after_last $
$macro: after_one $
    if(this.e$name.size() == 1) {
      sb.append($expand: inline_text, param_insert, text_insert $);
    }
$end: after_one $
$macro: after_many $
    if(this.e$name.size() > 1) {
      sb.append($expand: inline_text, param_insert, text_insert $);
    }
$end: after_many $
$end: expand_insert_part $

$comment: ========== text_insert ========== $

$macro: text_insert(name) $
new M$name($expand: inline_text, param_insert, text_insert, text_insert_ancestor, separator=", " $).toString()$comment: no eol $
$end: text_insert $

$comment: ========== inline_text ========== $

$macro: inline_text $
$expand: inline_string, inline_eol, separator=" + " $
$end: inline_text $

$comment: ========== inline_string ========== $

$macro: inline_string(string) $
"$string"$comment: no eol $
$end: inline_string $

$comment: ========== inline_eol ========== $

$macro: inline_eol $
System.getProperty("line.separator")$comment: no eol $
$end: inline_eol $

$comment: ========== param_insert ========== $

$macro: param_insert(name) $
r$name()$comment: no eol $
$end: param_insert $

$comment: ========== text_insert_ancestor ========== $

$macro: text_insert_ancestor(name) $
this.m$(name)$comment: no eol $
$end: text_insert_ancestor $

$comment: ========== public ========== $

$macro: public $
public $comment: no eol $
$end: public $
