$comment$
This file is part of SableCC ( http://sablecc.org ).

See the NOTICE file distributed with this work for copyright information.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
$end$

$comment: ========== file ========== $

$macro: file(file_name) $

$comment: ========== text (.h) ========== $

$macro: text_h $
$insert: header $

#ifndef M$(file_name)_H
#define M$(file_name)_H

#include <stdlib.h>
#include <string.h>

#include "List.h"
#include "AbstractMacro.h"
$expand: include $

typedef struct M$file_name {
  char* (*toString)(void*);
  void (*free)(void*);
$expand: param_field, self_ref_h, ancestor_field $
}M$(file_name);

M$(file_name)* M$(file_name)_init($expand: param_param, ancestor_param, separator=", " $);
void M$(file_name)_free(M$(file_name)* m$(file_name));
$expand: param_prototype, separator="\n" $
$expand: param_ref_prototype, separator="\n" $
char* M$(file_name)_toString(M$(file_name)* m$(file_name));

#endif

$end: text_h $

$comment: ========== text (.c) ========== $

$macro: text_c $
$insert: header $

#include "M$(file_name).h"

M$(file_name)* M$(file_name)_init($expand: param_param, ancestor_param, separator=", " $) {
  M$(file_name)* m$(file_name) = (M$(file_name)*)malloc(sizeof(M$(file_name)));
  m$(file_name)->toString = &M$(file_name)_toString;
  m$(file_name)->free = &M$(file_name)_free;
$expand: param_constructor_init, self_ref_c, ancestor_constructor_init $
  return m$(file_name);
}

void M$(file_name)_free(M$(file_name)* m$(file_name)) {
  free(m$(file_name));
}
$expand: param, before_first="\n", separator="\n" $
$expand: param_ref, before_first="\n", separator="\n" $

//@Override
char* M$(file_name)_toString(M$(file_name)* m$(file_name)) {
  int sizeString = 1;
  List* listString = List_init();
$expand: string_part, eol_part, param_insert_part, text_insert_part $

  char* str = (char*)calloc(sizeString, sizeof(char));
  Node* temp = listString->_first_;
  while(temp != NULL) {
    strcat(str, temp->_elem_);
    temp = temp->_next_;
  }

  List_free(listString);

  return str;
}

$end: text_c $

$comment: ========== macro (.h) ========== $

$macro: macro_h $
$insert: header $

#ifndef M$(file_name)_H
#define M$(file_name)_H

#include <stdlib.h>
#include <string.h>

#include "List.h"
#include "AbstractMacro.h"
$expand: include $

typedef struct M$file_name {
  char* (*toString)(void*);
  void (*free)(void*);
$expand: param_field, self_ref_h, ancestor_field, expand_field $
}M$file_name;

M$file_name* M$(file_name)_init($expand: param_param, ancestor_param, separator=", " $);
void M$(file_name)_free(M$(file_name)* m$(file_name));
$expand: macro_creator_prototype $
$expand: param_prototype $
$expand: param_ref_prototype $
char* M$(file_name)_toString(M$(file_name)* m$(file_name));

#endif

$end: macro_h $


$comment: ========== macro (.c) ========== $

$macro: macro_c $
$insert: header $

#include "M$(file_name).h"

M$(file_name)* M$(file_name)_init($expand: param_param, ancestor_param, separator=", " $) {
  M$(file_name)* m$(file_name) = (M$(file_name)*)malloc(sizeof(M$(file_name)));
  m$(file_name)->toString = &M$(file_name)_toString;
  m$(file_name)->free = &M$(file_name)_free;
$expand: param_constructor_init, self_ref_c, ancestor_constructor_init, expand_constructor_init $
  return m$(file_name);
}

void M$(file_name)_free(M$(file_name)* m$(file_name)) {
$expand: expand_destructor $
  free(m$(file_name));
}
$expand: macro_creator, before_first="\n", separator="\n" $
$expand: param, before_first="\n", separator="\n" $
$expand: param_ref, before_first="\n", separator="\n" $

//@Override
char* M$(file_name)_toString(M$(file_name)* m$(file_name)) {
  int sizeString = 1;
  List* listString = List_init();
$expand: string_part, eol_part, param_insert_part, text_insert_part, expand_insert_part $

  char* str = (char*)calloc(sizeString, sizeof(char));
  Node* temp = listString->_first_;
  while(temp != NULL) {
    strcat(str, temp->_elem_);
    temp = temp->_next_;
  }

  List_free(listString);

  return str;
}

$end: macro_c $


$comment: ========== include ========== $

$macro: include(name) $
#include "M$(name).h"
$end: include $

$comment: ========== self_ref_h ========== $

$macro: self_ref_h $
  struct M$(file_name)* _m$(file_name)_;
$end: self_ref_h $

$comment: ========== self_ref_c ========== $

$macro: self_ref_c $
  m$(file_name)->_m$(file_name)_ = m$(file_name);
$end: self_ref_c $

$comment: ========== param_field ========== $

$macro: param_field(name) $
  char* _p$(name)_;
$end: param_field $

$comment: ========== ancestor_field ========== $

$macro: ancestor_field(name) $
  struct M$(name)* _m$(name)_;
$end: ancestor_field $

$comment: ========== expand_field ========== $

$macro: expand_field(name) $
  struct List* _e$(name)_;
$end: expand_field $

$comment: ========== expand_destructor ========== $

$macro: expand_destructor(name) $
  List_free(m$(file_name)->_e$(name)_);
$end: expand_destructor $

$comment: ========== macro_creator ========== $

$macro: macro_creator(name) $
M$(name)* M$(file_name)_new$(name)(M$(file_name)* m$(file_name)$expand: param_param, before_first=", ", separator=", " $) {
  M$(name)* l$name = M$(name)_init($expand: param_arg, ancestor_arg, separator=", " $);
$macro: add_to_expand(signature) $
  List_pushback_MType(m$(file_name)->_e$(signature)_, l$(name), 1);
$end: add_to_expand $
  return l$(name);
}
$end: macro_creator $

$comment: ========== macro_creator_prototype ========== $

$macro: macro_creator_prototype(name) $
struct M$(name)* M$(file_name)_new$(name)(M$(file_name)* m$(file_name)$expand: param_param, before_first=", ", separator=", " $);
$end: macro_creator_prototype $

$comment: ========== param ========== $

$macro: param(name) $
char* M$(file_name)_p$(name)(M$(file_name)* m$(file_name)) {
  return m$(file_name)->_p$(name)_;
}
$end: param $

$comment: ========== param_prototype ========== $

$macro: param_prototype(name) $
char* M$(file_name)_p$(name)(M$(file_name)* m$(file_name));
$end: param_prototype $

$comment: ========== param_ref ========== $

$macro: param_ref(name, context) $
char* M$(file_name)_r$(name)(M$(file_name)* m$(file_name)) {
  return M$(context)_p$name(m$(file_name)->_m$(context)_);
}
$end: param_ref $

$comment: ========== param_ref_prototype ========== $

$macro: param_ref_prototype(name) $
char* M$(file_name)_r$(name)(M$(file_name)* m$(file_name));
$end: param_ref_prototype $

$comment: ========== param_param ========== $

$macro: param_param(name) $
char* _p$(name)_$no_eol$
$end: param_param $

$comment: ========== ancestor_param ========== $

$macro: ancestor_param(name) $
struct M$(name)* m$(name)$no_eol$
$end: ancestor_param $

$comment: ========== param_arg ========== $

$macro: param_arg(name) $
_p$(name)_$no_eol$
$end: param_arg $

$comment: ========== ancestor_arg ========== $

$macro: ancestor_arg(name) $
m$(file_name)->_m$(name)_$no_eol$
$end: ancestor_arg $

$comment: ========== param_constructor_init ========== $

$macro: param_constructor_init(name) $
  m$(file_name)->_p$(name)_ = _p$(name)_;
$end: param_constructor_init $

$comment: ========== ancestor_constructor_init ========== $

$macro: ancestor_constructor_init(name) $
  m$(file_name)->_m$(name)_ = m$(name);
$end: ancestor_constructor_init $

$comment: ========== expand_constructor_init ========== $

$macro: expand_constructor_init(name) $
  m$(file_name)->_e$(name)_ = List_init();
$end: expand_constructor_init $

$comment: ========== string_part ========== $

$macro: string_part(string) $
  sizeString += List_pushback(listString, strdup("$string"));
$end: string_part $

$comment: ========== eol_part ========== $

$macro: eol_part $
  sizeString += List_pushback(listString, strdup("\\n"));
$end: eol_part $

$comment: ========== param_insert_part ========== $

$macro: param_insert_part(name) $
  sizeString += List_pushback(listString, strdup(M$(file_name)_r$(name)(m$(file_name))));
$end: param_insert_part $

$comment: ========== text_insert_part ========== $

$macro: text_insert_part $
$expand: text_insert $
  sizeString += List_pushback(listString, strdup($expand: text_insert_string, none="\"\"" $));
$expand: text_insert_destructor $
$end: text_insert_part $

$comment: ========== expand_insert_part ========== $

$macro: expand_insert_part(name) $
$macro: none $
  if(m$(file_name)->_e$(name)_->_size_ == 0) {
  $expand: text_insert $
    sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string $));
  $expand: text_insert_destructor $
  }
$end: none $
$macro: before_first $
  if(m$(file_name)->_e$(name)_->_size_ > 0) {
  $expand: text_insert $
    sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string, none="\"\"" $));
  $expand: text_insert_destructor $
  }
$end: before_first $
$macro: before_one $
  if(m$(file_name)->_e$(name)_->_size_ == 1) {
  $expand: text_insert $
    sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string, none="\"\"" $));
  $expand: text_insert_destructor $
  }
$end: before_one $
$macro: before_many $
  if(m$(file_name)->_e$(name)_->_size_ > 1) {
  $expand: text_insert $
    sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string, none="\"\"" $));
  $expand: text_insert_destructor $
  }
$end: before_many $
$macro: separator $
  {
    int first = 1;
    Node* temp = m$(file_name)->_e$(name)_->_first_;
    while(temp != NULL) {
      if(first)
        first = 0;
      else $expand: brace $
      $expand: text_insert, none="\n" $
        sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string, none="\"\"" $));
      $expand: text_insert_destructor $
      $expand: brace_end $

      struct AbstractMacro* Mtemp = temp->_elem_;
      sizeString += List_pushback(listString, Mtemp->toString(Mtemp));
      temp = temp->_next_;
    }
  }
$macro: brace $
{
$end: brace $
$macro: brace_end $
}
$end: brace_end $
$end: separator $
$macro: no_separator $
  {
    Node* temp = m$(file_name)->_e$(name)_->_first_;
    while(temp != NULL) {
      struct AbstractMacro* Mtemp = temp->_elem_;
      sizeString += List_pushback(listString, Mtemp->toString(Mtemp));
      temp = temp->_next_;
    }
  }
$end: no_separator $
$macro: after_last $
  if(m$(file_name)->_e$(name)_->_size_ > 0) {
  $expand: text_insert $
    sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string, none="\"\"" $));
  $expand: text_insert_destructor $
  }
$end: after_last $
$macro: after_one $
  if(m$(file_name)->_e$(name)_->_size_ == 1) {
  $expand: text_insert $
    sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string, none="\"\"" $));
  $expand: text_insert_destructor $
  }
$end: after_one $
$macro: after_many $
  if(m$(file_name)->_e$(name)_->_size_ > 1) {
  $expand: text_insert $
    sizeString += List_pushback(listString, strdup($expand: inline_text, param_insert, text_insert_string, none="\"\""  $));
  $expand: text_insert_destructor $
  }
$end: after_many $
$end: expand_insert_part $

$comment: ========== text_insert ========== $

$macro: text_insert(name) $
  struct M$(name)* t$(name) = M$(name)_init($expand: inline_text, param_insert, text_insert, text_insert_ancestor, separator=", " $);
$end: text_insert $

$comment: ========== text_insert_string ========== $

$macro: text_insert_string(name) $
M$(name)_toString(t$(name))$no_eol$
$end: text_insert_string $

$comment: ========== text_insert_destructor ========== $

$macro: text_insert_destructor(name) $
  M$(name)_free(t$(name));
$end: text_insert_destructor $

$comment: ========== inline_text ========== $

$macro: inline_text $
$expand: inline_string, inline_eol, separator=" " $
$end: inline_text $

$comment: ========== inline_string ========== $

$macro: inline_string(string) $
"$(string)"$no_eol$
$end: inline_string $

$comment: ========== inline_eol ========== $

$macro: inline_eol $
"\\n"$no_eol$
$end: inline_eol $

$comment: ========== param_insert ========== $

$macro: param_insert(name) $
M$(file_name)_r$(name)(m$(file_name))$no_eol$
$end: param_insert $

$comment: ========== text_insert_ancestor ========== $

$macro: text_insert_ancestor(name) $
M$(file_name)->_m$(name)_$no_eol$
$end: text_insert_ancestor $

$end: file $

$comment: ========== file (end) ========== $


$comment: ========== header ========== $

$text: header $
/* This file was generated by SableCC's ObjectMacro. */
$end: header $

$comment: ========== list (.h) ========== $

$macro: list_h $
$insert: header $

#ifndef List_H
#define List_H

#include <stdlib.h>
#include <string.h>

#include "AbstractMacro.h"

typedef struct Node {
  void* _elem_;
  struct Node* _next_;
  int _bool_MType_;
}Node;

typedef struct List {
  int _size_;
  Node* _first_;
  Node* _last_;
}List;

List* List_init();
void List_free(List* array);
int List_pushback(List* array, void* _elem_);
int List_pushback_Mtype(List* array, void* _elem_, int _bool_MType_);

#endif

$end: list_h $

$comment: ========== list (.c) ========== $

$macro: list_c $
$insert: header $

#include "List.h"

int List_pushback(List* array, void* _elem_) {
  return List_pushback_MType(array, _elem_, 0);
}

int List_pushback_MType(List* array, void* _elem_, int _bool_MType_) {
  Node* node = (Node*)calloc(1, sizeof(Node));
  node->_next_ = NULL;
  node->_elem_ = _elem_;
  node->_bool_MType_ = _bool_MType_;

  if(array->_first_ == NULL)
    array->_first_ = node;
  else
    array->_last_->_next_ = node;

  array->_last_ = node;
  array->_size_++;

  if(_bool_MType_)
    return 0;
  else
    return strlen(_elem_);
}

void List_free(List* array) {
  Node* temp = array->_first_;
  Node* temp2 = NULL;

  while(temp != NULL) {
    if(temp->_elem_ != NULL) {
      if(temp->_bool_MType_) {
        struct AbstractMacro* Mtemp = temp->_elem_;
        Mtemp->free(Mtemp);
      }
      else
        free(temp->_elem_);
    }
    temp2 = temp;
    temp = temp->_next_;
    free(temp2);
  }
  free(array);
}

List* List_init() {
  List* array = (List*)calloc(1, sizeof(List));
  array->_size_ = 0;
  array->_first_ = NULL;
  array->_last_ = NULL;
  return array;
}

$end: list_c $

$comment: ========== abstract_macro (.h) ========== $

$macro: abstract_macro_h $
$insert: header $

#ifndef AbstractMacro_H
#define AbstractMacro_H

struct AbstractMacro {
  char* (*toString)(void*);
  void (*free)(void*);
};

#endif

$end: abstract_macro_h $

