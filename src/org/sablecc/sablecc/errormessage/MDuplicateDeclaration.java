/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.errormessage;

public class MDuplicateDeclaration {

    private final String pName;

    private final String pType;

    private final String pLine;

    private final String pChar;

    private final String pRefType;

    private final String pRefLine;

    private final String pRefChar;

    private final MDuplicateDeclaration mDuplicateDeclaration = this;

    public MDuplicateDeclaration(
            String pName,
            String pType,
            String pLine,
            String pChar,
            String pRefType,
            String pRefLine,
            String pRefChar) {

        if (pName == null) {
            throw new NullPointerException();
        }
        this.pName = pName;
        if (pType == null) {
            throw new NullPointerException();
        }
        this.pType = pType;
        if (pLine == null) {
            throw new NullPointerException();
        }
        this.pLine = pLine;
        if (pChar == null) {
            throw new NullPointerException();
        }
        this.pChar = pChar;
        if (pRefType == null) {
            throw new NullPointerException();
        }
        this.pRefType = pRefType;
        if (pRefLine == null) {
            throw new NullPointerException();
        }
        this.pRefLine = pRefLine;
        if (pRefChar == null) {
            throw new NullPointerException();
        }
        this.pRefChar = pRefChar;
    }

    String pName() {

        return this.pName;
    }

    String pType() {

        return this.pType;
    }

    String pLine() {

        return this.pLine;
    }

    String pChar() {

        return this.pChar;
    }

    String pRefType() {

        return this.pRefType;
    }

    String pRefLine() {

        return this.pRefLine;
    }

    String pRefChar() {

        return this.pRefChar;
    }

    private String rLine() {

        return this.mDuplicateDeclaration.pLine();
    }

    private String rChar() {

        return this.mDuplicateDeclaration.pChar();
    }

    private String rName() {

        return this.mDuplicateDeclaration.pName();
    }

    private String rType() {

        return this.mDuplicateDeclaration.pType();
    }

    private String rRefType() {

        return this.mDuplicateDeclaration.pRefType();
    }

    private String rRefLine() {

        return this.mDuplicateDeclaration.pRefLine();
    }

    private String rRefChar() {

        return this.mDuplicateDeclaration.pRefChar();
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(new MSemanticErrorHead().toString());
        sb.append(System.getProperty("line.separator"));
        sb.append("Line: ");
        sb.append(rLine());
        sb.append(System.getProperty("line.separator"));
        sb.append("Char: ");
        sb.append(rChar());
        sb.append(System.getProperty("line.separator"));
        sb.append("The \"");
        sb.append(rName());
        sb.append("\" ");
        sb.append(rType());
        sb.append(" declaration reuses an existing name.");
        sb.append(System.getProperty("line.separator"));
        sb.append("A \"");
        sb.append(rName());
        sb.append("\" ");
        sb.append(rRefType());
        sb.append(" is already declared at line ");
        sb.append(rRefLine());
        sb.append(", char ");
        sb.append(rRefChar());
        sb.append(".");
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
