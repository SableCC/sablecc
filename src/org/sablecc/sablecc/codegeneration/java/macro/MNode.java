/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.codegeneration.java.macro;

import java.util.LinkedList;
import java.util.List;

public class MNode {

    private final List<Object> eDefaultPackage_SpecifiedPackage = new LinkedList<Object>();

    private final List<Object> eNodeTypeEnumEntry = new LinkedList<Object>();

    private final List<Object> eNodeInternalTypeEnumEntry = new LinkedList<Object>();

    public MNode() {

    }

    public MNodeTypeEnumEntry newNodeTypeEnumEntry(
            String pName) {

        MNodeTypeEnumEntry lNodeTypeEnumEntry = new MNodeTypeEnumEntry(pName);
        this.eNodeTypeEnumEntry.add(lNodeTypeEnumEntry);
        return lNodeTypeEnumEntry;
    }

    public MNodeInternalTypeEnumEntry newNodeInternalTypeEnumEntry(
            String pName) {

        MNodeInternalTypeEnumEntry lNodeInternalTypeEnumEntry = new MNodeInternalTypeEnumEntry(
                pName);
        this.eNodeInternalTypeEnumEntry.add(lNodeInternalTypeEnumEntry);
        return lNodeInternalTypeEnumEntry;
    }

    public MDefaultPackage newDefaultPackage(
            String pLanguageName) {

        MDefaultPackage lDefaultPackage = new MDefaultPackage(pLanguageName);
        this.eDefaultPackage_SpecifiedPackage.add(lDefaultPackage);
        return lDefaultPackage;
    }

    public MSpecifiedPackage newSpecifiedPackage(
            String pLanguageName,
            String pPackage) {

        MSpecifiedPackage lSpecifiedPackage = new MSpecifiedPackage(
                pLanguageName, pPackage);
        this.eDefaultPackage_SpecifiedPackage.add(lSpecifiedPackage);
        return lSpecifiedPackage;
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(new MHeader().toString());
        if (this.eDefaultPackage_SpecifiedPackage.size() > 0) {
            sb.append(System.getProperty("line.separator"));
        }
        for (Object oDefaultPackage_SpecifiedPackage : this.eDefaultPackage_SpecifiedPackage) {
            sb.append(oDefaultPackage_SpecifiedPackage.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append("public abstract class Node {");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  public static enum Type {");
        sb.append(System.getProperty("line.separator"));
        for (Object oNodeTypeEnumEntry : this.eNodeTypeEnumEntry) {
            sb.append(oNodeTypeEnumEntry.toString());
        }
        sb.append("    TEnd,");
        sb.append(System.getProperty("line.separator"));
        sb.append("    TAnonymous;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  public abstract Type getType();");
        sb.append(System.getProperty("line.separator"));
        sb.append("  public abstract String getText();");
        sb.append(System.getProperty("line.separator"));
        sb.append("  public abstract int getLine();");
        sb.append(System.getProperty("line.separator"));
        sb.append("  public abstract int getPos();");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  @Override");
        sb.append(System.getProperty("line.separator"));
        sb.append("  public String toString() {");
        sb.append(System.getProperty("line.separator"));
        sb
                .append("    return \"\\\"\" + getText() + \"\\\"@(\" + getLine() + \",\" + getPos() + \")\";");
        sb.append(System.getProperty("line.separator"));
        sb.append("  }");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  abstract InternalType getInternalType();");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  static enum InternalType {");
        sb.append(System.getProperty("line.separator"));
        for (Object oNodeInternalTypeEnumEntry : this.eNodeInternalTypeEnumEntry) {
            sb.append(oNodeInternalTypeEnumEntry.toString());
        }
        sb.append("    TEnd;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  }");
        sb.append(System.getProperty("line.separator"));
        sb.append("}");
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
