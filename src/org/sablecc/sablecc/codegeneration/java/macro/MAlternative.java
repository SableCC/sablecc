/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.codegeneration.java.macro;

import java.util.*;

public class MAlternative {

    private final String pName;

    private final MAlternative mAlternative = this;

    private final List<Object> eDefaultPackage_SpecifiedPackage = new LinkedList<Object>();

    private final List<Object> eNamedAlternativeHeader = new LinkedList<Object>();

    private final List<Object> eAnonymousAlternativeHeader = new LinkedList<Object>();

    private final List<Object> eNormalAlternativeParent = new LinkedList<Object>();

    private final List<Object> eNodeAlternativeParent = new LinkedList<Object>();

    private final List<Object> eElement = new LinkedList<Object>();

    private final List<Object> eEndElement = new LinkedList<Object>();

    public MAlternative(
            String pName) {

        if (pName == null) {
            throw new NullPointerException();
        }
        this.pName = pName;
    }

    public MNamedAlternativeHeader newNamedAlternativeHeader() {

        MNamedAlternativeHeader lNamedAlternativeHeader = new MNamedAlternativeHeader(
                this.mAlternative);
        this.eNamedAlternativeHeader.add(lNamedAlternativeHeader);
        return lNamedAlternativeHeader;
    }

    public MAnonymousAlternativeHeader newAnonymousAlternativeHeader() {

        MAnonymousAlternativeHeader lAnonymousAlternativeHeader = new MAnonymousAlternativeHeader(
                this.mAlternative);
        this.eAnonymousAlternativeHeader.add(lAnonymousAlternativeHeader);
        return lAnonymousAlternativeHeader;
    }

    public MNormalAlternativeParent newNormalAlternativeParent(
            String pParent) {

        MNormalAlternativeParent lNormalAlternativeParent = new MNormalAlternativeParent(
                pParent);
        this.eNormalAlternativeParent.add(lNormalAlternativeParent);
        return lNormalAlternativeParent;
    }

    public MNodeAlternativeParent newNodeAlternativeParent() {

        MNodeAlternativeParent lNodeAlternativeParent = new MNodeAlternativeParent();
        this.eNodeAlternativeParent.add(lNodeAlternativeParent);
        return lNodeAlternativeParent;
    }

    public MElement newElement(
            String pType,
            String pElementName) {

        MElement lElement = new MElement(pType, pElementName);
        this.eElement.add(lElement);
        return lElement;
    }

    public MEndElement newEndElement(
            String pElementName) {

        MEndElement lEndElement = new MEndElement(pElementName);
        this.eEndElement.add(lEndElement);
        return lEndElement;
    }

    public MDefaultPackage newDefaultPackage(
            String pLanguageName) {

        MDefaultPackage lDefaultPackage = new MDefaultPackage(pLanguageName);
        this.eDefaultPackage_SpecifiedPackage.add(lDefaultPackage);
        return lDefaultPackage;
    }

    public MSpecifiedPackage newSpecifiedPackage(
            String pLanguageName,
            String pPackage) {

        MSpecifiedPackage lSpecifiedPackage = new MSpecifiedPackage(
                pLanguageName, pPackage);
        this.eDefaultPackage_SpecifiedPackage.add(lSpecifiedPackage);
        return lSpecifiedPackage;
    }

    String pName() {

        return this.pName;
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(new MHeader().toString());
        if (this.eDefaultPackage_SpecifiedPackage.size() > 0) {
            sb.append(System.getProperty("line.separator"));
        }
        for (Object oDefaultPackage_SpecifiedPackage : this.eDefaultPackage_SpecifiedPackage) {
            sb.append(oDefaultPackage_SpecifiedPackage.toString());
        }
        sb.append(System.getProperty("line.separator"));
        for (Object oNamedAlternativeHeader : this.eNamedAlternativeHeader) {
            sb.append(oNamedAlternativeHeader.toString());
        }
        for (Object oAnonymousAlternativeHeader : this.eAnonymousAlternativeHeader) {
            sb.append(oAnonymousAlternativeHeader.toString());
        }
        for (Object oNormalAlternativeParent : this.eNormalAlternativeParent) {
            sb.append(oNormalAlternativeParent.toString());
        }
        for (Object oNodeAlternativeParent : this.eNodeAlternativeParent) {
            sb.append(oNodeAlternativeParent.toString());
        }
        sb.append(System.getProperty("line.separator"));
        for (Object oElement : this.eElement) {
            sb.append(oElement.toString());
        }
        for (Object oEndElement : this.eEndElement) {
            sb.append(oEndElement.toString());
        }
        sb.append("}");
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
