/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.codegeneration.java.macro;

import java.util.*;

public class MAction {

    private final List<Object> eNormalGroup_FalseGroup = new LinkedList<Object>();

    private final List<Object> eNormalCondition = new LinkedList<Object>();

    private final List<Object> eEndCondition = new LinkedList<Object>();

    private final List<Object> eShift = new LinkedList<Object>();

    private final List<Object> eReduce = new LinkedList<Object>();

    MAction() {

    }

    public MNormalCondition newNormalCondition(
            String pAhead,
            String pTokenType) {

        MNormalCondition lNormalCondition = new MNormalCondition(pAhead,
                pTokenType);
        this.eNormalCondition.add(lNormalCondition);
        return lNormalCondition;
    }

    public MEndCondition newEndCondition(
            String pAhead) {

        MEndCondition lEndCondition = new MEndCondition(pAhead);
        this.eEndCondition.add(lEndCondition);
        return lEndCondition;
    }

    public MShift newShift() {

        MShift lShift = new MShift();
        this.eShift.add(lShift);
        return lShift;
    }

    public MReduce newReduce(
            String pAlternative) {

        MReduce lReduce = new MReduce(pAlternative);
        this.eReduce.add(lReduce);
        return lReduce;
    }

    public MNormalGroup newNormalGroup() {

        MNormalGroup lNormalGroup = new MNormalGroup();
        this.eNormalGroup_FalseGroup.add(lNormalGroup);
        return lNormalGroup;
    }

    public MFalseGroup newFalseGroup() {

        MFalseGroup lFalseGroup = new MFalseGroup();
        this.eNormalGroup_FalseGroup.add(lFalseGroup);
        return lFalseGroup;
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append("    ");
        if (this.eNormalGroup_FalseGroup.size() > 0) {
            sb.append("if (");
        }
        {
            boolean first = true;
            for (Object oNormalGroup_FalseGroup : this.eNormalGroup_FalseGroup) {
                if (first) {
                    first = false;
                }
                else {
                    sb.append(" && ");
                }
                sb.append(oNormalGroup_FalseGroup.toString());
            }
        }
        if (this.eNormalGroup_FalseGroup.size() > 0) {
            sb.append(") ");
        }
        sb.append("{");
        sb.append(System.getProperty("line.separator"));
        for (Object oNormalCondition : this.eNormalCondition) {
            sb.append(oNormalCondition.toString());
        }
        for (Object oEndCondition : this.eEndCondition) {
            sb.append(oEndCondition.toString());
        }
        for (Object oShift : this.eShift) {
            sb.append(oShift.toString());
        }
        for (Object oReduce : this.eReduce) {
            sb.append(oReduce.toString());
        }
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
