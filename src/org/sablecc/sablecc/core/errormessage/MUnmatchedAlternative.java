/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.core.errormessage;

public class MUnmatchedAlternative {

    private final String pAltName;

    private final String pParserProdName;

    private final String pTreeProdName;

    private final String pLine;

    private final String pChar;

    private final MUnmatchedAlternative mUnmatchedAlternative = this;

    public MUnmatchedAlternative(
            String pAltName,
            String pParserProdName,
            String pTreeProdName,
            String pLine,
            String pChar) {

        if (pAltName == null) {
            throw new NullPointerException();
        }
        this.pAltName = pAltName;
        if (pParserProdName == null) {
            throw new NullPointerException();
        }
        this.pParserProdName = pParserProdName;
        if (pTreeProdName == null) {
            throw new NullPointerException();
        }
        this.pTreeProdName = pTreeProdName;
        if (pLine == null) {
            throw new NullPointerException();
        }
        this.pLine = pLine;
        if (pChar == null) {
            throw new NullPointerException();
        }
        this.pChar = pChar;
    }

    String pAltName() {

        return this.pAltName;
    }

    String pParserProdName() {

        return this.pParserProdName;
    }

    String pTreeProdName() {

        return this.pTreeProdName;
    }

    String pLine() {

        return this.pLine;
    }

    String pChar() {

        return this.pChar;
    }

    private String rLine() {

        return this.mUnmatchedAlternative.pLine();
    }

    private String rChar() {

        return this.mUnmatchedAlternative.pChar();
    }

    private String rAltName() {

        return this.mUnmatchedAlternative.pAltName();
    }

    private String rParserProdName() {

        return this.mUnmatchedAlternative.pParserProdName();
    }

    private String rTreeProdName() {

        return this.mUnmatchedAlternative.pTreeProdName();
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(new MSemanticErrorHead().toString());
        sb.append(System.getProperty("line.separator"));
        sb.append("Line: ");
        sb.append(rLine());
        sb.append(System.getProperty("line.separator"));
        sb.append("Char: ");
        sb.append(rChar());
        sb.append(System.getProperty("line.separator"));
        sb.append("Cannot match the alternative \"");
        sb.append(rAltName());
        sb.append("\" of production \"");
        sb.append(rParserProdName());
        sb.append("\" to any alternative of the tree production \"");
        sb.append(rTreeProdName());
        sb.append("\".");
        sb.append(System.getProperty("line.separator"));
        sb.append("You must define an alternative transformation for \"");
        sb.append(rAltName());
        sb.append("\".");
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
