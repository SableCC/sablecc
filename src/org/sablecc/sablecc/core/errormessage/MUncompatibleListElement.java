/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.sablecc.core.errormessage;

public class MUncompatibleListElement {

    private final String pFirstElem;

    private final String pSecondElem;

    private final String pFirstLine;

    private final String pFirstChar;

    private final String pSecondLine;

    private final String pSecondChar;

    private final MUncompatibleListElement mUncompatibleListElement = this;

    public MUncompatibleListElement(
            String pFirstElem,
            String pSecondElem,
            String pFirstLine,
            String pFirstChar,
            String pSecondLine,
            String pSecondChar) {

        if (pFirstElem == null) {
            throw new NullPointerException();
        }
        this.pFirstElem = pFirstElem;
        if (pSecondElem == null) {
            throw new NullPointerException();
        }
        this.pSecondElem = pSecondElem;
        if (pFirstLine == null) {
            throw new NullPointerException();
        }
        this.pFirstLine = pFirstLine;
        if (pFirstChar == null) {
            throw new NullPointerException();
        }
        this.pFirstChar = pFirstChar;
        if (pSecondLine == null) {
            throw new NullPointerException();
        }
        this.pSecondLine = pSecondLine;
        if (pSecondChar == null) {
            throw new NullPointerException();
        }
        this.pSecondChar = pSecondChar;
    }

    String pFirstElem() {

        return this.pFirstElem;
    }

    String pSecondElem() {

        return this.pSecondElem;
    }

    String pFirstLine() {

        return this.pFirstLine;
    }

    String pFirstChar() {

        return this.pFirstChar;
    }

    String pSecondLine() {

        return this.pSecondLine;
    }

    String pSecondChar() {

        return this.pSecondChar;
    }

    private String rSecondLine() {

        return this.mUncompatibleListElement.pSecondLine();
    }

    private String rSecondChar() {

        return this.mUncompatibleListElement.pSecondChar();
    }

    private String rFirstElem() {

        return this.mUncompatibleListElement.pFirstElem();
    }

    private String rFirstLine() {

        return this.mUncompatibleListElement.pFirstLine();
    }

    private String rFirstChar() {

        return this.mUncompatibleListElement.pFirstChar();
    }

    private String rSecondElem() {

        return this.mUncompatibleListElement.pSecondElem();
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(new MSemanticErrorHead().toString());
        sb.append(System.getProperty("line.separator"));
        sb.append("Line: ");
        sb.append(rSecondLine());
        sb.append(System.getProperty("line.separator"));
        sb.append("Char: ");
        sb.append(rSecondChar());
        sb.append(System.getProperty("line.separator"));
        sb.append("List element \"");
        sb.append(rFirstElem());
        sb.append("\" defined at line ");
        sb.append(rFirstLine());
        sb.append(", char ");
        sb.append(rFirstChar());
        sb.append(" is not compatible with \"");
        sb.append(rSecondElem());
        sb.append("\" defined at line ");
        sb.append(rSecondChar());
        sb.append(", char ");
        sb.append(rSecondChar());
        sb.append(".");
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
