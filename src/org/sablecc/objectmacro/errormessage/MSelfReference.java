/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

import java.util.*;

public class MSelfReference extends Macro {
    
    private DSeparator ReferenceSeparator;
    
    private DBeforeFirst ReferenceBeforeFirst;
    
    private DAfterLast ReferenceAfterLast;
    
    private DNone ReferenceNone;
    
    final List<String> list_Reference;
    
    final Context ReferenceContext = new Context();
    
    final StringValue ReferenceValue;
    
    private DSeparator LineSeparator;
    
    private DBeforeFirst LineBeforeFirst;
    
    private DAfterLast LineAfterLast;
    
    private DNone LineNone;
    
    final List<String> list_Line;
    
    final Context LineContext = new Context();
    
    final StringValue LineValue;
    
    private DSeparator CharSeparator;
    
    private DBeforeFirst CharBeforeFirst;
    
    private DAfterLast CharAfterLast;
    
    private DNone CharNone;
    
    final List<String> list_Char;
    
    final Context CharContext = new Context();
    
    final StringValue CharValue;
    
    private DSeparator ContextSeparator;
    
    private DBeforeFirst ContextBeforeFirst;
    
    private DAfterLast ContextAfterLast;
    
    private DNone ContextNone;
    
    final List<String> list_Context;
    
    final Context ContextContext = new Context();
    
    final StringValue ContextValue;
    
    private DSeparator ContextLineSeparator;
    
    private DBeforeFirst ContextLineBeforeFirst;
    
    private DAfterLast ContextLineAfterLast;
    
    private DNone ContextLineNone;
    
    final List<String> list_ContextLine;
    
    final Context ContextLineContext = new Context();
    
    final StringValue ContextLineValue;
    
    private DSeparator ContextCharSeparator;
    
    private DBeforeFirst ContextCharBeforeFirst;
    
    private DAfterLast ContextCharAfterLast;
    
    private DNone ContextCharNone;
    
    final List<String> list_ContextChar;
    
    final Context ContextCharContext = new Context();
    
    final StringValue ContextCharValue;
    
    MSelfReference(Macros macros){
        
        
        this.setMacros(macros);
        this.list_Reference = new LinkedList<>();
        this.list_Line = new LinkedList<>();
        this.list_Char = new LinkedList<>();
        this.list_Context = new LinkedList<>();
        this.list_ContextLine = new LinkedList<>();
        this.list_ContextChar = new LinkedList<>();
        
        this.ReferenceValue = new StringValue(this.list_Reference, this.ReferenceContext);
        this.LineValue = new StringValue(this.list_Line, this.LineContext);
        this.CharValue = new StringValue(this.list_Char, this.CharContext);
        this.ContextValue = new StringValue(this.list_Context, this.ContextContext);
        this.ContextLineValue = new StringValue(this.list_ContextLine, this.ContextLineContext);
        this.ContextCharValue = new StringValue(this.list_ContextChar, this.ContextCharContext);
    }
    
    public void addAllReference(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Reference");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Reference");
            }
    
            this.list_Reference.add(string);
        }
    }
    
    public void addReference(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Reference");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Reference.add(string);
    }
    
    public void addAllLine(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Line");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Line");
            }
    
            this.list_Line.add(string);
        }
    }
    
    public void addLine(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Line");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Line.add(string);
    }
    
    public void addAllChar(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Char");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Char");
            }
    
            this.list_Char.add(string);
        }
    }
    
    public void addChar(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Char");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Char.add(string);
    }
    
    public void addAllContext(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Context");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Context");
            }
    
            this.list_Context.add(string);
        }
    }
    
    public void addContext(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Context");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Context.add(string);
    }
    
    public void addAllContextLine(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ContextLine");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("ContextLine");
            }
    
            this.list_ContextLine.add(string);
        }
    }
    
    public void addContextLine(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("ContextLine");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_ContextLine.add(string);
    }
    
    public void addAllContextChar(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ContextChar");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("ContextChar");
            }
    
            this.list_ContextChar.add(string);
        }
    }
    
    public void addContextChar(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("ContextChar");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_ContextChar.add(string);
    }
    
    private String buildReference() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Reference;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ReferenceNone != null) {
            sb.append(this.ReferenceNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ReferenceBeforeFirst != null) {
                string = this.ReferenceBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ReferenceAfterLast != null) {
                string = this.ReferenceAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ReferenceSeparator != null) {
                string = this.ReferenceSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildLine() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Line;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.LineNone != null) {
            sb.append(this.LineNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.LineBeforeFirst != null) {
                string = this.LineBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.LineAfterLast != null) {
                string = this.LineAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.LineSeparator != null) {
                string = this.LineSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildChar() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Char;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.CharNone != null) {
            sb.append(this.CharNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.CharBeforeFirst != null) {
                string = this.CharBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.CharAfterLast != null) {
                string = this.CharAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.CharSeparator != null) {
                string = this.CharSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildContext() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Context;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ContextNone != null) {
            sb.append(this.ContextNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ContextBeforeFirst != null) {
                string = this.ContextBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ContextAfterLast != null) {
                string = this.ContextAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ContextSeparator != null) {
                string = this.ContextSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildContextLine() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_ContextLine;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ContextLineNone != null) {
            sb.append(this.ContextLineNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ContextLineBeforeFirst != null) {
                string = this.ContextLineBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ContextLineAfterLast != null) {
                string = this.ContextLineAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ContextLineSeparator != null) {
                string = this.ContextLineSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildContextChar() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_ContextChar;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ContextCharNone != null) {
            sb.append(this.ContextCharNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ContextCharBeforeFirst != null) {
                string = this.ContextCharBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ContextCharAfterLast != null) {
                string = this.ContextCharAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ContextCharSeparator != null) {
                string = this.ContextCharSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getReference() {
        return this.ReferenceValue;
    }
    
    StringValue getLine() {
        return this.LineValue;
    }
    
    StringValue getChar() {
        return this.CharValue;
    }
    
    StringValue getContext() {
        return this.ContextValue;
    }
    
    StringValue getContextLine() {
        return this.ContextLineValue;
    }
    
    StringValue getContextChar() {
        return this.ContextCharValue;
    }
    
    
    private void initReferenceDirectives() {
        
    }
    
    private void initLineDirectives() {
        
    }
    
    private void initCharDirectives() {
        
    }
    
    private void initContextDirectives() {
        
    }
    
    private void initContextLineDirectives() {
        
    }
    
    private void initContextCharDirectives() {
        
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setSelfReference(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        initReferenceDirectives();
        initLineDirectives();
        initCharDirectives();
        initContextDirectives();
        initContextLineDirectives();
        initContextCharDirectives();
    
        StringBuilder sb0 = new StringBuilder();
    
        MSemanticErrorHead m1 = this.getMacros().newSemanticErrorHead();
        
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("Line: ");
        sb0.append(buildLine());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Char: ");
        sb0.append(buildChar());
        sb0.append(LINE_SEPARATOR);
        sb0.append("\"");
        sb0.append(buildReference());
        sb0.append("\" is a self reference to \"");
        sb0.append(buildContext());
        sb0.append("\" of line ");
        sb0.append(buildContextLine());
        sb0.append(", char ");
        sb0.append(buildContextChar());
        sb0.append(".");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}