/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

import java.util.*;

public  class MInvalidArgument extends Macro{
    
    String field_ArgumentText;
    
    public MInvalidArgument(String pArgumentText, Macros macros){
        
        
        this.setMacros(macros);
        this.setPArgumentText(pArgumentText);
    }
    
    private void setPArgumentText( String pArgumentText ){
        if(pArgumentText == null){
            throw ObjectMacroException.parameterNull("ArgumentText");
        }
    
        this.field_ArgumentText = pArgumentText;
    }
    
    String buildArgumentText(){
    
        return this.field_ArgumentText;
    }
    
    String getArgumentText(){
    
        return this.field_ArgumentText;
    }
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setInvalidArgument(this);
     }
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("InvalidArgument");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
    
    
    
        StringBuilder sb0 = new StringBuilder();
    
        MCommandLineErrorHead m1 = this.getMacros().newCommandLineErrorHead();
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("The following argument is rejected:");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" ");
        sb0.append(buildArgumentText());
        sb0.append(LINE_SEPARATOR);
        sb0.append("It is invalid.");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        MCommandLineErrorTail m2 = this.getMacros().newCommandLineErrorTail();
        
        
        sb0.append(m2.build(null));
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
     return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}