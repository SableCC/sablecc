/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

import java.util.*;

public  class MInvalidLongOption extends Macro{
    
    String field_OptionName;
    
    public MInvalidLongOption(String pOptionName, Macros macros){
        
        
        this.setMacros(macros);
        this.setPOptionName(pOptionName);
    }
    
    private void setPOptionName( String pOptionName ){
        if(pOptionName == null){
            throw ObjectMacroException.parameterNull("OptionName");
        }
    
        this.field_OptionName = pOptionName;
    }
    
    String buildOptionName(){
    
        return this.field_OptionName;
    }
    
    String getOptionName(){
    
        return this.field_OptionName;
    }
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setInvalidLongOption(this);
     }
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("InvalidLongOption");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
    
    
    
        StringBuilder sb0 = new StringBuilder();
    
        MCommandLineErrorHead m1 = this.getMacros().newCommandLineErrorHead();
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("The following option is rejected:");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" --");
        sb0.append(buildOptionName());
        sb0.append(LINE_SEPARATOR);
        sb0.append("It is not a valid option.");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        MCommandLineErrorTail m2 = this.getMacros().newCommandLineErrorTail();
        
        
        sb0.append(m2.build(null));
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
     return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}