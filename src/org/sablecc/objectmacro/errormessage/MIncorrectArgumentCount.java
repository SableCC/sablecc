/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

import java.util.*;

public  class MIncorrectArgumentCount extends Macro{
    
    String field_Line;
    
    String field_Char;
    
    String field_ExpectedCount;
    
    String field_CurrentCount;
    
    public MIncorrectArgumentCount(String pLine, String pChar, String pExpectedCount, String pCurrentCount, Macros macros){
        
        
        this.setMacros(macros);
        this.setPLine(pLine);
        this.setPChar(pChar);
        this.setPExpectedCount(pExpectedCount);
        this.setPCurrentCount(pCurrentCount);
    }
    
    private void setPLine( String pLine ){
        if(pLine == null){
            throw ObjectMacroException.parameterNull("Line");
        }
    
        this.field_Line = pLine;
    }
    
    private void setPChar( String pChar ){
        if(pChar == null){
            throw ObjectMacroException.parameterNull("Char");
        }
    
        this.field_Char = pChar;
    }
    
    private void setPExpectedCount( String pExpectedCount ){
        if(pExpectedCount == null){
            throw ObjectMacroException.parameterNull("ExpectedCount");
        }
    
        this.field_ExpectedCount = pExpectedCount;
    }
    
    private void setPCurrentCount( String pCurrentCount ){
        if(pCurrentCount == null){
            throw ObjectMacroException.parameterNull("CurrentCount");
        }
    
        this.field_CurrentCount = pCurrentCount;
    }
    
    String buildLine(){
    
        return this.field_Line;
    }
    
    String buildChar(){
    
        return this.field_Char;
    }
    
    String buildExpectedCount(){
    
        return this.field_ExpectedCount;
    }
    
    String buildCurrentCount(){
    
        return this.field_CurrentCount;
    }
    
    String getLine(){
    
        return this.field_Line;
    }
    
    String getChar(){
    
        return this.field_Char;
    }
    
    String getExpectedCount(){
    
        return this.field_ExpectedCount;
    }
    
    String getCurrentCount(){
    
        return this.field_CurrentCount;
    }
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setIncorrectArgumentCount(this);
     }
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("IncorrectArgumentCount");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
    
    
    
        StringBuilder sb0 = new StringBuilder();
    
        MSemanticErrorHead m1 = this.getMacros().newSemanticErrorHead();
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("Line: ");
        sb0.append(buildLine());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Char: ");
        sb0.append(buildChar());
        sb0.append(LINE_SEPARATOR);
        sb0.append("The macro reference has ");
        sb0.append(buildCurrentCount());
        sb0.append(" arguments, instead of ");
        sb0.append(buildExpectedCount());
        sb0.append(" arguments.");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
     return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}