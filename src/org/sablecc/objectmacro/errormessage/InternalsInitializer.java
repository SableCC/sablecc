/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

class InternalsInitializer {

    private final String _paramName;

    InternalsInitializer(String paramName) {
        this._paramName = paramName;
    }

    void setSyntaxError(MSyntaxError mSyntaxError) {
        throw ObjectMacroException.incorrectType("MSyntaxError", this._paramName);
    }
    
    void setLexicalError(MLexicalError mLexicalError) {
        throw ObjectMacroException.incorrectType("MLexicalError", this._paramName);
    }
    
    void setInternalError(MInternalError mInternalError) {
        throw ObjectMacroException.incorrectType("MInternalError", this._paramName);
    }
    
    void setCommandLineErrorHead(MCommandLineErrorHead mCommandLineErrorHead) {
        throw ObjectMacroException.incorrectType("MCommandLineErrorHead", this._paramName);
    }
    
    void setCommandLineErrorTail(MCommandLineErrorTail mCommandLineErrorTail) {
        throw ObjectMacroException.incorrectType("MCommandLineErrorTail", this._paramName);
    }
    
    void setInvalidArgument(MInvalidArgument mInvalidArgument) {
        throw ObjectMacroException.incorrectType("MInvalidArgument", this._paramName);
    }
    
    void setMissingLongOptionOperand(MMissingLongOptionOperand mMissingLongOptionOperand) {
        throw ObjectMacroException.incorrectType("MMissingLongOptionOperand", this._paramName);
    }
    
    void setMissingShortOptionOperand(MMissingShortOptionOperand mMissingShortOptionOperand) {
        throw ObjectMacroException.incorrectType("MMissingShortOptionOperand", this._paramName);
    }
    
    void setInvalidLongOption(MInvalidLongOption mInvalidLongOption) {
        throw ObjectMacroException.incorrectType("MInvalidLongOption", this._paramName);
    }
    
    void setSpuriousLongOptionOperand(MSpuriousLongOptionOperand mSpuriousLongOptionOperand) {
        throw ObjectMacroException.incorrectType("MSpuriousLongOptionOperand", this._paramName);
    }
    
    void setInvalidShortOption(MInvalidShortOption mInvalidShortOption) {
        throw ObjectMacroException.incorrectType("MInvalidShortOption", this._paramName);
    }
    
    void setSpuriousShortOptionOperand(MSpuriousShortOptionOperand mSpuriousShortOptionOperand) {
        throw ObjectMacroException.incorrectType("MSpuriousShortOptionOperand", this._paramName);
    }
    
    void setUnknownTarget(MUnknownTarget mUnknownTarget) {
        throw ObjectMacroException.incorrectType("MUnknownTarget", this._paramName);
    }
    
    void setInvalidArgumentCount(MInvalidArgumentCount mInvalidArgumentCount) {
        throw ObjectMacroException.incorrectType("MInvalidArgumentCount", this._paramName);
    }
    
    void setInvalidObjectmacroSuffix(MInvalidObjectmacroSuffix mInvalidObjectmacroSuffix) {
        throw ObjectMacroException.incorrectType("MInvalidObjectmacroSuffix", this._paramName);
    }
    
    void setInvalidIntermediateSuffix(MInvalidIntermediateSuffix mInvalidIntermediateSuffix) {
        throw ObjectMacroException.incorrectType("MInvalidIntermediateSuffix", this._paramName);
    }
    
    void setMissingMacroFile(MMissingMacroFile mMissingMacroFile) {
        throw ObjectMacroException.incorrectType("MMissingMacroFile", this._paramName);
    }
    
    void setMacroNotFile(MMacroNotFile mMacroNotFile) {
        throw ObjectMacroException.incorrectType("MMacroNotFile", this._paramName);
    }
    
    void setInputError(MInputError mInputError) {
        throw ObjectMacroException.incorrectType("MInputError", this._paramName);
    }
    
    void setOutputError(MOutputError mOutputError) {
        throw ObjectMacroException.incorrectType("MOutputError", this._paramName);
    }
    
    void setSemanticErrorHead(MSemanticErrorHead mSemanticErrorHead) {
        throw ObjectMacroException.incorrectType("MSemanticErrorHead", this._paramName);
    }
    
    void setUnknownMacro(MUnknownMacro mUnknownMacro) {
        throw ObjectMacroException.incorrectType("MUnknownMacro", this._paramName);
    }
    
    void setPlainText(MPlainText mPlainText) {
        throw ObjectMacroException.incorrectType("MPlainText", this._paramName);
    }
    
    void setUnknownVersion(MUnknownVersion mUnknownVersion) {
        throw ObjectMacroException.incorrectType("MUnknownVersion", this._paramName);
    }
    
    void setDuplicateDeclaration(MDuplicateDeclaration mDuplicateDeclaration) {
        throw ObjectMacroException.incorrectType("MDuplicateDeclaration", this._paramName);
    }
    
    void setDuplicateMacroVersionDeclaration(MDuplicateMacroVersionDeclaration mDuplicateMacroVersionDeclaration) {
        throw ObjectMacroException.incorrectType("MDuplicateMacroVersionDeclaration", this._paramName);
    }
    
    void setDuplicateOption(MDuplicateOption mDuplicateOption) {
        throw ObjectMacroException.incorrectType("MDuplicateOption", this._paramName);
    }
    
    void setConflictingOption(MConflictingOption mConflictingOption) {
        throw ObjectMacroException.incorrectType("MConflictingOption", this._paramName);
    }
    
    void setUnknownOption(MUnknownOption mUnknownOption) {
        throw ObjectMacroException.incorrectType("MUnknownOption", this._paramName);
    }
    
    void setEndMismatch(MEndMismatch mEndMismatch) {
        throw ObjectMacroException.incorrectType("MEndMismatch", this._paramName);
    }
    
    void setUnknownParam(MUnknownParam mUnknownParam) {
        throw ObjectMacroException.incorrectType("MUnknownParam", this._paramName);
    }
    
    void setParamCyclicReference(MParamCyclicReference mParamCyclicReference) {
        throw ObjectMacroException.incorrectType("MParamCyclicReference", this._paramName);
    }
    
    void setSelfReference(MSelfReference mSelfReference) {
        throw ObjectMacroException.incorrectType("MSelfReference", this._paramName);
    }
    
    void setUnusedTextBlock(MUnusedTextBlock mUnusedTextBlock) {
        throw ObjectMacroException.incorrectType("MUnusedTextBlock", this._paramName);
    }
    
    void setUnusedParam(MUnusedParam mUnusedParam) {
        throw ObjectMacroException.incorrectType("MUnusedParam", this._paramName);
    }
    
    void setIncorrectArgumentCount(MIncorrectArgumentCount mIncorrectArgumentCount) {
        throw ObjectMacroException.incorrectType("MIncorrectArgumentCount", this._paramName);
    }
    
    void setIncorrectArgumentType(MIncorrectArgumentType mIncorrectArgumentType) {
        throw ObjectMacroException.incorrectType("MIncorrectArgumentType", this._paramName);
    }
    
    void setCannotCreateDirectory(MCannotCreateDirectory mCannotCreateDirectory) {
        throw ObjectMacroException.incorrectType("MCannotCreateDirectory", this._paramName);
    }
    
    void setBodyTokenMisused(MBodyTokenMisused mBodyTokenMisused) {
        throw ObjectMacroException.incorrectType("MBodyTokenMisused", this._paramName);
    }
    
    void setIndentTokenMisused(MIndentTokenMisused mIndentTokenMisused) {
        throw ObjectMacroException.incorrectType("MIndentTokenMisused", this._paramName);
    }
    
    void setDuplicateMacroRef(MDuplicateMacroRef mDuplicateMacroRef) {
        throw ObjectMacroException.incorrectType("MDuplicateMacroRef", this._paramName);
    }
    
    void setIncorrectMacroType(MIncorrectMacroType mIncorrectMacroType) {
        throw ObjectMacroException.incorrectType("MIncorrectMacroType", this._paramName);
    }
    
    void setInvalidInsert(MInvalidInsert mInvalidInsert) {
        throw ObjectMacroException.incorrectType("MInvalidInsert", this._paramName);
    }

    void setObjectMacroUserErrorHead(MObjectMacroUserErrorHead mObjectMacroUserErrorHead) {
        throw ObjectMacroException.incorrectType("MObjectMacroUserErrorHead", this._paramName);
    }

    void setUserErrorIncorrectType(MUserErrorIncorrectType mUserErrorIncorrectType) {
        throw ObjectMacroException.incorrectType("MUserErrorIncorrectType", this._paramName);
    }

    void setUserErrorMacroNullInList(MUserErrorMacroNullInList mUserErrorMacroNullInList) {
        throw ObjectMacroException.incorrectType("MUserErrorMacroNullInList", this._paramName);
    }

    void setUserErrorCyclicReference(MUserErrorCyclicReference mUserErrorCyclicReference) {
        throw ObjectMacroException.incorrectType("MUserErrorCyclicReference", this._paramName);
    }

    void setUserErrorParameterNull(MUserErrorParameterNull mUserErrorParameterNull) {
        throw ObjectMacroException.incorrectType("MUserErrorParameterNull", this._paramName);
    }

    void setUserErrorCannotModify(MUserErrorCannotModify mUserErrorCannotModify) {
        throw ObjectMacroException.incorrectType("MUserErrorCannotModify", this._paramName);
    }

    void setUserErrorVersionNull(MUserErrorVersionNull mUserErrorVersionNull) {
        throw ObjectMacroException.incorrectType("MUserErrorVersionNull", this._paramName);
    }

    void setUserErrorVersionsDifferent(MUserErrorVersionsDifferent mUserErrorVersionsDifferent) {
        throw ObjectMacroException.incorrectType("MUserErrorVersionsDifferent", this._paramName);
    }

    void setUserErrorInternalException(MUserErrorInternalException mUserErrorInternalException) {
        throw ObjectMacroException.incorrectType("MUserErrorInternalException", this._paramName);
    }

}