/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

import java.util.*;

public class MIncorrectMacroType extends Macro {
    
    private DSeparator ExpectedSeparator;
    
    private DBeforeFirst ExpectedBeforeFirst;
    
    private DAfterLast ExpectedAfterLast;
    
    private DNone ExpectedNone;
    
    final List<String> list_Expected;
    
    final Context ExpectedContext = new Context();
    
    final StringValue ExpectedValue;
    
    private DSeparator FoundSeparator;
    
    private DBeforeFirst FoundBeforeFirst;
    
    private DAfterLast FoundAfterLast;
    
    private DNone FoundNone;
    
    final List<String> list_Found;
    
    final Context FoundContext = new Context();
    
    final StringValue FoundValue;
    
    private DSeparator IndexSeparator;
    
    private DBeforeFirst IndexBeforeFirst;
    
    private DAfterLast IndexAfterLast;
    
    private DNone IndexNone;
    
    final List<String> list_Index;
    
    final Context IndexContext = new Context();
    
    final StringValue IndexValue;
    
    private DSeparator LineSeparator;
    
    private DBeforeFirst LineBeforeFirst;
    
    private DAfterLast LineAfterLast;
    
    private DNone LineNone;
    
    final List<String> list_Line;
    
    final Context LineContext = new Context();
    
    final StringValue LineValue;
    
    private DSeparator CharSeparator;
    
    private DBeforeFirst CharBeforeFirst;
    
    private DAfterLast CharAfterLast;
    
    private DNone CharNone;
    
    final List<String> list_Char;
    
    final Context CharContext = new Context();
    
    final StringValue CharValue;
    
    MIncorrectMacroType(Macros macros){
        
        
        this.setMacros(macros);
        this.list_Expected = new LinkedList<>();
        this.list_Found = new LinkedList<>();
        this.list_Index = new LinkedList<>();
        this.list_Line = new LinkedList<>();
        this.list_Char = new LinkedList<>();
        
        this.ExpectedValue = new StringValue(this.list_Expected, this.ExpectedContext);
        this.FoundValue = new StringValue(this.list_Found, this.FoundContext);
        this.IndexValue = new StringValue(this.list_Index, this.IndexContext);
        this.LineValue = new StringValue(this.list_Line, this.LineContext);
        this.CharValue = new StringValue(this.list_Char, this.CharContext);
    }
    
    public void addAllExpected(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Expected");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Expected");
            }
    
            this.list_Expected.add(string);
        }
    }
    
    public void addExpected(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Expected");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Expected.add(string);
    }
    
    public void addAllFound(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Found");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Found");
            }
    
            this.list_Found.add(string);
        }
    }
    
    public void addFound(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Found");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Found.add(string);
    }
    
    public void addAllIndex(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Index");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Index");
            }
    
            this.list_Index.add(string);
        }
    }
    
    public void addIndex(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Index");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Index.add(string);
    }
    
    public void addAllLine(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Line");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Line");
            }
    
            this.list_Line.add(string);
        }
    }
    
    public void addLine(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Line");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Line.add(string);
    }
    
    public void addAllChar(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Char");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Char");
            }
    
            this.list_Char.add(string);
        }
    }
    
    public void addChar(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Char");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Char.add(string);
    }
    
    private String buildExpected() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Expected;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ExpectedNone != null) {
            sb.append(this.ExpectedNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ExpectedBeforeFirst != null) {
                string = this.ExpectedBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ExpectedAfterLast != null) {
                string = this.ExpectedAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ExpectedSeparator != null) {
                string = this.ExpectedSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildFound() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Found;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.FoundNone != null) {
            sb.append(this.FoundNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.FoundBeforeFirst != null) {
                string = this.FoundBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.FoundAfterLast != null) {
                string = this.FoundAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.FoundSeparator != null) {
                string = this.FoundSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildIndex() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Index;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.IndexNone != null) {
            sb.append(this.IndexNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.IndexBeforeFirst != null) {
                string = this.IndexBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.IndexAfterLast != null) {
                string = this.IndexAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.IndexSeparator != null) {
                string = this.IndexSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildLine() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Line;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.LineNone != null) {
            sb.append(this.LineNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.LineBeforeFirst != null) {
                string = this.LineBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.LineAfterLast != null) {
                string = this.LineAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.LineSeparator != null) {
                string = this.LineSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildChar() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Char;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.CharNone != null) {
            sb.append(this.CharNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.CharBeforeFirst != null) {
                string = this.CharBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.CharAfterLast != null) {
                string = this.CharAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.CharSeparator != null) {
                string = this.CharSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getExpected() {
        return this.ExpectedValue;
    }
    
    StringValue getFound() {
        return this.FoundValue;
    }
    
    StringValue getIndex() {
        return this.IndexValue;
    }
    
    StringValue getLine() {
        return this.LineValue;
    }
    
    StringValue getChar() {
        return this.CharValue;
    }
    
    
    private void initExpectedDirectives() {
        
    }
    
    private void initFoundDirectives() {
        
    }
    
    private void initIndexDirectives() {
        
    }
    
    private void initLineDirectives() {
        
    }
    
    private void initCharDirectives() {
        
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setIncorrectMacroType(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        initExpectedDirectives();
        initFoundDirectives();
        initIndexDirectives();
        initLineDirectives();
        initCharDirectives();
    
        StringBuilder sb0 = new StringBuilder();
    
        MSemanticErrorHead m1 = this.getMacros().newSemanticErrorHead();
        
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("Line : ");
        sb0.append(buildLine());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Char : ");
        sb0.append(buildChar());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Incorrect macro type at index ");
        sb0.append(buildIndex());
        sb0.append(". (expected : ");
        sb0.append(buildExpected());
        sb0.append(", found : ");
        sb0.append(buildFound());
        sb0.append(")");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}