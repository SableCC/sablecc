/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

import java.util.*;

public class MIncorrectMacroType extends Macro{

    private String field_Expected;

    private String field_Found;

    private String field_Index;

    private String field_Line;

    private String field_Char;




    public MIncorrectMacroType(String pExpected, String pFound, String pIndex, String pLine, String pChar){

            this.setPExpected(pExpected);
            this.setPFound(pFound);
            this.setPIndex(pIndex);
            this.setPLine(pLine);
            this.setPChar(pChar);

    }


    private void setPExpected( String pExpected ){
        if(pExpected == null){
            throw ObjectMacroException.parameterNull("Expected");
        }

        this.field_Expected = pExpected;
    }

    private void setPFound( String pFound ){
        if(pFound == null){
            throw ObjectMacroException.parameterNull("Found");
        }

        this.field_Found = pFound;
    }

    private void setPIndex( String pIndex ){
        if(pIndex == null){
            throw ObjectMacroException.parameterNull("Index");
        }

        this.field_Index = pIndex;
    }

    private void setPLine( String pLine ){
        if(pLine == null){
            throw ObjectMacroException.parameterNull("Line");
        }

        this.field_Line = pLine;
    }

    private void setPChar( String pChar ){
        if(pChar == null){
            throw ObjectMacroException.parameterNull("Char");
        }

        this.field_Char = pChar;
    }


    private String buildExpected(){

        return this.field_Expected;
    }

    private String buildFound(){

        return this.field_Found;
    }

    private String buildIndex(){

        return this.field_Index;
    }

    private String buildLine(){

        return this.field_Line;
    }

    private String buildChar(){

        return this.field_Char;
    }


    private String getExpected(){

        return this.field_Expected;
    }

    private String getFound(){

        return this.field_Found;
    }

    private String getIndex(){

        return this.field_Index;
    }

    private String getLine(){

        return this.field_Line;
    }

    private String getChar(){

        return this.field_Char;
    }





    @Override
     void apply(
             InternalsInitializer internalsInitializer){

         internalsInitializer.setIncorrectMacroType(this);
     }


    @Override
    public String build(){

        BuildState buildState = this.build_state;

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("IncorrectMacroType");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();





        StringBuilder sb0 = new StringBuilder();

        MSemanticErrorHead minsert_1 = new MSemanticErrorHead();


        sb0.append(minsert_1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("Line : ");
        sb0.append(buildLine());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Char : ");
        sb0.append(buildChar());
        sb0.append(LINE_SEPARATOR);
        sb0.append("Incorrect macro type at index ");
        sb0.append(buildIndex());
        sb0.append(". (expected : ");
        sb0.append(buildExpected());
        sb0.append(", found : ");
        sb0.append(buildFound());
        sb0.append(")");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }


    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}
