/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.errormessage;

import java.util.*;

public class MUnknownTarget extends Macro {
    
    private DSeparator TargetSeparator;
    
    private DBeforeFirst TargetBeforeFirst;
    
    private DAfterLast TargetAfterLast;
    
    private DNone TargetNone;
    
    final List<String> list_Target;
    
    final Context TargetContext = new Context();
    
    final StringValue TargetValue;
    
    MUnknownTarget(Macros macros){
        
        
        this.setMacros(macros);
        this.list_Target = new LinkedList<>();
        
        this.TargetValue = new StringValue(this.list_Target, this.TargetContext);
    }
    
    public void addAllTarget(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Target");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Target");
            }
    
            this.list_Target.add(string);
        }
    }
    
    public void addTarget(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Target");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Target.add(string);
    }
    
    private String buildTarget() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Target;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.TargetNone != null) {
            sb.append(this.TargetNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.TargetBeforeFirst != null) {
                string = this.TargetBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.TargetAfterLast != null) {
                string = this.TargetAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.TargetSeparator != null) {
                string = this.TargetSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getTarget() {
        return this.TargetValue;
    }
    
    
    private void initTargetDirectives() {
        
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setUnknownTarget(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        initTargetDirectives();
    
    
    
        StringBuilder sb0 = new StringBuilder();
    
        MCommandLineErrorHead m1 = this.getMacros().newCommandLineErrorHead();
        
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("The \"");
        sb0.append(buildTarget());
        sb0.append("\" target is not supported.");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("The following command lists available target languages:");
        sb0.append(LINE_SEPARATOR);
        sb0.append(" objectmacro --list-targets");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        MCommandLineErrorTail m2 = this.getMacros().newCommandLineErrorTail();
        
        
        
        sb0.append(m2.build(null));
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}