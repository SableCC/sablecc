/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.macro;

import java.util.LinkedList;
import java.util.List;

public class M_submacro_creator
        extends Macro {

    // ---- constructor ----

    M_submacro_creator(
            Macro parent,
            String p_submacro_name) {

        this.parent = parent;
        this.p_submacro_name = p_submacro_name;
    }

    // ---- parent ----

    private final Macro parent;

    @Override
    Macro get_parent() {

        return this.parent;
    }

    // ---- parameters ----

    private final String p_submacro_name;

    String get_local_p_submacro_name() {

        return this.p_submacro_name;
    }

    // ---- expands ----

    private final List<Macro> e_expand_18 = new LinkedList<Macro>();

    private final List<Macro> e_expand_20 = new LinkedList<Macro>();

    private final List<Macro> e_expand_21 = new LinkedList<Macro>();

    private final List<Macro> e_expand_22 = new LinkedList<Macro>();

    // ---- parameter accessors ----

    private String cached_p_submacro_name;

    String get_p_submacro_name() {

        String result = this.cached_p_submacro_name;

        if (result == null) {
            Macro current = this;

            while (!(current instanceof M_submacro_creator)) {
                current = current.get_parent();
            }

            result = ((M_submacro_creator) current).get_local_p_submacro_name();
            this.cached_p_submacro_name = result;
        }

        return result;
    }

    // ---- text block accessors ----

    private T_comma cached_t_comma;

    T_comma get_t_comma() {

        T_comma result = this.cached_t_comma;

        if (result == null) {
            result = T_comma.getInstance();
            this.cached_t_comma = result;
        }

        return result;
    }

    // ---- macro creators ----

    public M_submacro_parameter new_submacro_parameter(
            String p_param_name) {

        M_submacro_parameter result = new M_submacro_parameter(this,
                p_param_name);
        this.e_expand_18.add(result);
        return result;
    }

    public M_submacro_this new_submacro_this() {

        M_submacro_this result = new M_submacro_this(this);
        this.e_expand_20.add(result);
        return result;
    }

    public M_submacro_call_param new_submacro_call_param(
            String p_param_name) {

        M_submacro_call_param result = new M_submacro_call_param(this,
                p_param_name);
        this.e_expand_21.add(result);
        return result;
    }

    public M_add_to_expand new_add_to_expand(
            String p_expand_name) {

        M_add_to_expand result = new M_add_to_expand(this, p_expand_name);
        this.e_expand_22.add(result);
        return result;
    }

    // ---- appendTo ----

    @Override
    public void appendTo(
            StringBuilder sb) {

        sb.append("  public M_");

        sb.append(get_p_submacro_name());

        sb.append(" new_");

        sb.append(get_p_submacro_name());

        sb.append("(");

        if (this.e_expand_18.size() == 0) {
        }
        else {
            boolean first = true;
            for (Macro macro : this.e_expand_18) {
                if (first) {
                    first = false;
                }
                else {
                    get_t_comma().appendTo(sb);
                }
                macro.appendTo(sb);
            }
        }

        sb.append(") {");

        sb.append(EOL);

        sb.append("    M_");

        sb.append(get_p_submacro_name());

        sb.append(" result = new M_");

        sb.append(get_p_submacro_name());

        sb.append("(");

        if (this.e_expand_20.size() == 0) {
        }
        else {
            boolean first = true;
            for (Macro macro : this.e_expand_20) {
                if (first) {
                    first = false;
                }
                else {
                }
                macro.appendTo(sb);
            }
        }

        if (this.e_expand_21.size() == 0) {
        }
        else {
            boolean first = true;
            for (Macro macro : this.e_expand_21) {
                if (first) {
                    first = false;
                }
                else {
                    get_t_comma().appendTo(sb);
                }
                macro.appendTo(sb);
            }
        }

        sb.append(");");

        sb.append(EOL);

        if (this.e_expand_22.size() == 0) {
        }
        else {
            boolean first = true;
            for (Macro macro : this.e_expand_22) {
                if (first) {
                    first = false;
                }
                else {
                }
                macro.appendTo(sb);
            }
        }

        sb.append("    return result;");

        sb.append(EOL);

        sb.append("  }");

        sb.append(EOL);

        sb.append(EOL);
    }

}
