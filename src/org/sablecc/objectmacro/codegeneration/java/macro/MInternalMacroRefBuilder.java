/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public  class MInternalMacroRefBuilder extends Macro{
    
    String field_InternalName;
    
    MInternalMacroRefBuilder(String pInternalName, Macros macros){
        
        
        this.setMacros(macros);
        this.setPInternalName(pInternalName);
    }
    
    private void setPInternalName( String pInternalName ){
        if(pInternalName == null){
            throw ObjectMacroException.parameterNull("InternalName");
        }
    
        this.field_InternalName = pInternalName;
    }
    
    String buildInternalName(){
    
        return this.field_InternalName;
    }
    
    String getInternalName(){
    
        return this.field_InternalName;
    }
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setInternalMacroRefBuilder(this);
     }
    
    @Override
    public String build(){
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null){
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null){
            throw new InternalException("Cycle detection detected lately");
        }
        else{
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
    
    
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("private String build");
        sb0.append(buildInternalName());
        sb0.append("(Context context)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    InternalValue macros = this.list_");
        sb0.append(buildInternalName());
        sb0.append(".get(context);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return macros.build();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
     return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}