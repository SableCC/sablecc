/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MMacro extends Macro {
    
    private DSeparator ClassNameSeparator;
    
    private DBeforeFirst ClassNameBeforeFirst;
    
    private DAfterLast ClassNameAfterLast;
    
    private DNone ClassNameNone;
    
    final List<String> list_ClassName;
    
    final Context ClassNameContext = new Context();
    
    final StringValue ClassNameValue;
    
    private DSeparator ParentClassSeparator;
    
    private DBeforeFirst ParentClassBeforeFirst;
    
    private DAfterLast ParentClassAfterLast;
    
    private DNone ParentClassNone;
    
    final List<String> list_ParentClass;
    
    final Context ParentClassContext = new Context();
    
    final StringValue ParentClassValue;
    
    private DSeparator PublicSeparator;
    
    private DBeforeFirst PublicBeforeFirst;
    
    private DAfterLast PublicAfterLast;
    
    private DNone PublicNone;
    
    final List<Macro> list_Public;
    
    final Context PublicContext = new Context();
    
    final MacroValue PublicValue;
    
    private DSeparator AbstractSeparator;
    
    private DBeforeFirst AbstractBeforeFirst;
    
    private DAfterLast AbstractAfterLast;
    
    private DNone AbstractNone;
    
    final List<Macro> list_Abstract;
    
    final Context AbstractContext = new Context();
    
    final MacroValue AbstractValue;
    
    private DSeparator PackageDeclarationSeparator;
    
    private DBeforeFirst PackageDeclarationBeforeFirst;
    
    private DAfterLast PackageDeclarationAfterLast;
    
    private DNone PackageDeclarationNone;
    
    final List<Macro> list_PackageDeclaration;
    
    final Context PackageDeclarationContext = new Context();
    
    final MacroValue PackageDeclarationValue;
    
    private DSeparator FieldsSeparator;
    
    private DBeforeFirst FieldsBeforeFirst;
    
    private DAfterLast FieldsAfterLast;
    
    private DNone FieldsNone;
    
    final List<Macro> list_Fields;
    
    final Context FieldsContext = new Context();
    
    final MacroValue FieldsValue;
    
    private DSeparator ConstructorSeparator;
    
    private DBeforeFirst ConstructorBeforeFirst;
    
    private DAfterLast ConstructorAfterLast;
    
    private DNone ConstructorNone;
    
    final List<Macro> list_Constructor;
    
    final Context ConstructorContext = new Context();
    
    final MacroValue ConstructorValue;
    
    private DSeparator SettersSeparator;
    
    private DBeforeFirst SettersBeforeFirst;
    
    private DAfterLast SettersAfterLast;
    
    private DNone SettersNone;
    
    final List<Macro> list_Setters;
    
    final Context SettersContext = new Context();
    
    final MacroValue SettersValue;
    
    private DSeparator BuildersSeparator;
    
    private DBeforeFirst BuildersBeforeFirst;
    
    private DAfterLast BuildersAfterLast;
    
    private DNone BuildersNone;
    
    final List<Macro> list_Builders;
    
    final Context BuildersContext = new Context();
    
    final MacroValue BuildersValue;
    
    private DSeparator GettersSeparator;
    
    private DBeforeFirst GettersBeforeFirst;
    
    private DAfterLast GettersAfterLast;
    
    private DNone GettersNone;
    
    final List<Macro> list_Getters;
    
    final Context GettersContext = new Context();
    
    final MacroValue GettersValue;
    
    private DSeparator InitInternalsMethodsSeparator;
    
    private DBeforeFirst InitInternalsMethodsBeforeFirst;
    
    private DAfterLast InitInternalsMethodsAfterLast;
    
    private DNone InitInternalsMethodsNone;
    
    final List<Macro> list_InitInternalsMethods;
    
    final Context InitInternalsMethodsContext = new Context();
    
    final MacroValue InitInternalsMethodsValue;
    
    private DSeparator InitDirectivesSeparator;
    
    private DBeforeFirst InitDirectivesBeforeFirst;
    
    private DAfterLast InitDirectivesAfterLast;
    
    private DNone InitDirectivesNone;
    
    final List<Macro> list_InitDirectives;
    
    final Context InitDirectivesContext = new Context();
    
    final MacroValue InitDirectivesValue;
    
    private DSeparator RedefinedApplyInitializerSeparator;
    
    private DBeforeFirst RedefinedApplyInitializerBeforeFirst;
    
    private DAfterLast RedefinedApplyInitializerAfterLast;
    
    private DNone RedefinedApplyInitializerNone;
    
    final List<Macro> list_RedefinedApplyInitializer;
    
    final Context RedefinedApplyInitializerContext = new Context();
    
    final MacroValue RedefinedApplyInitializerValue;
    
    private DSeparator MacroBuildersSeparator;
    
    private DBeforeFirst MacroBuildersBeforeFirst;
    
    private DAfterLast MacroBuildersAfterLast;
    
    private DNone MacroBuildersNone;
    
    final List<Macro> list_MacroBuilders;
    
    final Context MacroBuildersContext = new Context();
    
    final MacroValue MacroBuildersValue;
    
    private DSeparator AppliedVersionSeparator;
    
    private DBeforeFirst AppliedVersionBeforeFirst;
    
    private DAfterLast AppliedVersionAfterLast;
    
    private DNone AppliedVersionNone;
    
    final List<Macro> list_AppliedVersion;
    
    final Context AppliedVersionContext = new Context();
    
    final MacroValue AppliedVersionValue;
    
    private DSeparator InitMacrosMethodSeparator;
    
    private DBeforeFirst InitMacrosMethodBeforeFirst;
    
    private DAfterLast InitMacrosMethodAfterLast;
    
    private DNone InitMacrosMethodNone;
    
    final List<Macro> list_InitMacrosMethod;
    
    final Context InitMacrosMethodContext = new Context();
    
    final MacroValue InitMacrosMethodValue;
    
    MMacro(Macros macros){
        
        this.setMacros(macros);
        this.list_ClassName = new LinkedList<>();
        this.list_ParentClass = new LinkedList<>();
        this.list_Public = new LinkedList<>();
        this.list_Abstract = new LinkedList<>();
        this.list_PackageDeclaration = new LinkedList<>();
        this.list_Fields = new LinkedList<>();
        this.list_Constructor = new LinkedList<>();
        this.list_Setters = new LinkedList<>();
        this.list_Builders = new LinkedList<>();
        this.list_Getters = new LinkedList<>();
        this.list_InitInternalsMethods = new LinkedList<>();
        this.list_InitDirectives = new LinkedList<>();
        this.list_RedefinedApplyInitializer = new LinkedList<>();
        this.list_MacroBuilders = new LinkedList<>();
        this.list_AppliedVersion = new LinkedList<>();
        this.list_InitMacrosMethod = new LinkedList<>();
        
        this.ClassNameValue = new StringValue(this.list_ClassName, this.ClassNameContext);
        this.ParentClassValue = new StringValue(this.list_ParentClass, this.ParentClassContext);
        this.PublicValue = new MacroValue(this.list_Public, this.PublicContext);
        this.AbstractValue = new MacroValue(this.list_Abstract, this.AbstractContext);
        this.PackageDeclarationValue = new MacroValue(this.list_PackageDeclaration, this.PackageDeclarationContext);
        this.FieldsValue = new MacroValue(this.list_Fields, this.FieldsContext);
        this.ConstructorValue = new MacroValue(this.list_Constructor, this.ConstructorContext);
        this.SettersValue = new MacroValue(this.list_Setters, this.SettersContext);
        this.BuildersValue = new MacroValue(this.list_Builders, this.BuildersContext);
        this.GettersValue = new MacroValue(this.list_Getters, this.GettersContext);
        this.InitInternalsMethodsValue = new MacroValue(this.list_InitInternalsMethods, this.InitInternalsMethodsContext);
        this.InitDirectivesValue = new MacroValue(this.list_InitDirectives, this.InitDirectivesContext);
        this.RedefinedApplyInitializerValue = new MacroValue(this.list_RedefinedApplyInitializer, this.RedefinedApplyInitializerContext);
        this.MacroBuildersValue = new MacroValue(this.list_MacroBuilders, this.MacroBuildersContext);
        this.AppliedVersionValue = new MacroValue(this.list_AppliedVersion, this.AppliedVersionContext);
        this.InitMacrosMethodValue = new MacroValue(this.list_InitMacrosMethod, this.InitMacrosMethodContext);
    }
    
    MMacro(String pClassName, String pParentClass, List<Macro> pPublic, List<Macro> pAbstract, List<Macro> pPackageDeclaration, List<Macro> pFields, List<Macro> pConstructor, List<Macro> pSetters, List<Macro> pBuilders, List<Macro> pGetters, List<Macro> pInitInternalsMethods, List<Macro> pInitDirectives, List<Macro> pRedefinedApplyInitializer, List<Macro> pMacroBuilders, List<Macro> pAppliedVersion, List<Macro> pInitMacrosMethod, Macros macros){
        
        this.setMacros(macros);
        this.list_ClassName = new LinkedList<>();
        this.list_ParentClass = new LinkedList<>();
        this.list_Public = new LinkedList<>();
        this.list_Abstract = new LinkedList<>();
        this.list_PackageDeclaration = new LinkedList<>();
        this.list_Fields = new LinkedList<>();
        this.list_Constructor = new LinkedList<>();
        this.list_Setters = new LinkedList<>();
        this.list_Builders = new LinkedList<>();
        this.list_Getters = new LinkedList<>();
        this.list_InitInternalsMethods = new LinkedList<>();
        this.list_InitDirectives = new LinkedList<>();
        this.list_RedefinedApplyInitializer = new LinkedList<>();
        this.list_MacroBuilders = new LinkedList<>();
        this.list_AppliedVersion = new LinkedList<>();
        this.list_InitMacrosMethod = new LinkedList<>();
        
        this.ClassNameValue = new StringValue(this.list_ClassName, this.ClassNameContext);
        this.ParentClassValue = new StringValue(this.list_ParentClass, this.ParentClassContext);
        this.PublicValue = new MacroValue(this.list_Public, this.PublicContext);
        this.AbstractValue = new MacroValue(this.list_Abstract, this.AbstractContext);
        this.PackageDeclarationValue = new MacroValue(this.list_PackageDeclaration, this.PackageDeclarationContext);
        this.FieldsValue = new MacroValue(this.list_Fields, this.FieldsContext);
        this.ConstructorValue = new MacroValue(this.list_Constructor, this.ConstructorContext);
        this.SettersValue = new MacroValue(this.list_Setters, this.SettersContext);
        this.BuildersValue = new MacroValue(this.list_Builders, this.BuildersContext);
        this.GettersValue = new MacroValue(this.list_Getters, this.GettersContext);
        this.InitInternalsMethodsValue = new MacroValue(this.list_InitInternalsMethods, this.InitInternalsMethodsContext);
        this.InitDirectivesValue = new MacroValue(this.list_InitDirectives, this.InitDirectivesContext);
        this.RedefinedApplyInitializerValue = new MacroValue(this.list_RedefinedApplyInitializer, this.RedefinedApplyInitializerContext);
        this.MacroBuildersValue = new MacroValue(this.list_MacroBuilders, this.MacroBuildersContext);
        this.AppliedVersionValue = new MacroValue(this.list_AppliedVersion, this.AppliedVersionContext);
        this.InitMacrosMethodValue = new MacroValue(this.list_InitMacrosMethod, this.InitMacrosMethodContext);
        if (pPublic != null) {
            this.addAllPublic(pPublic);
        }
        if (pAbstract != null) {
            this.addAllAbstract(pAbstract);
        }
        if (pPackageDeclaration != null) {
            this.addAllPackageDeclaration(pPackageDeclaration);
        }
        if (pFields != null) {
            this.addAllFields(pFields);
        }
        if (pConstructor != null) {
            this.addAllConstructor(pConstructor);
        }
        if (pSetters != null) {
            this.addAllSetters(pSetters);
        }
        if (pBuilders != null) {
            this.addAllBuilders(pBuilders);
        }
        if (pGetters != null) {
            this.addAllGetters(pGetters);
        }
        if (pInitInternalsMethods != null) {
            this.addAllInitInternalsMethods(pInitInternalsMethods);
        }
        if (pInitDirectives != null) {
            this.addAllInitDirectives(pInitDirectives);
        }
        if (pRedefinedApplyInitializer != null) {
            this.addAllRedefinedApplyInitializer(pRedefinedApplyInitializer);
        }
        if (pMacroBuilders != null) {
            this.addAllMacroBuilders(pMacroBuilders);
        }
        if (pAppliedVersion != null) {
            this.addAllAppliedVersion(pAppliedVersion);
        }
        if (pInitMacrosMethod != null) {
            this.addAllInitMacrosMethod(pInitMacrosMethod);
        }
        
        if (pClassName != null) {
            this.addClassName(pClassName);
        }
        if (pParentClass != null) {
            this.addParentClass(pParentClass);
        }
    }
    
    public void addAllClassName(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ClassName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("ClassName");
            }
    
            this.list_ClassName.add(string);
        }
    }
    
    public void addClassName(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("ClassName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_ClassName.add(string);
    }
    
    public void addAllParentClass(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ParentClass");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("ParentClass");
            }
    
            this.list_ParentClass.add(string);
        }
    }
    
    public void addParentClass(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("ParentClass");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_ParentClass.add(string);
    }
    
    public void addAllPublic(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Public");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Public");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypePublic(macro);
            this.list_Public.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypePublic (Macro macro) {
        macro.apply(new InternalsInitializer("Public"){
            @Override
            void setPublic(MPublic mPublic){
                
            
            
            }
        });
    }
    
    public void addPublic(MPublic macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Public");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Public.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllAbstract(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Abstract");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Abstract");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeAbstract(macro);
            this.list_Abstract.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeAbstract (Macro macro) {
        macro.apply(new InternalsInitializer("Abstract"){
            @Override
            void setAbstract(MAbstract mAbstract){
                
            
            
            }
        });
    }
    
    public void addAbstract(MAbstract macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Abstract");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Abstract.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllPackageDeclaration(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "PackageDeclaration");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypePackageDeclaration(macro);
            this.list_PackageDeclaration.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypePackageDeclaration (Macro macro) {
        macro.apply(new InternalsInitializer("PackageDeclaration"){
            @Override
            void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
                
            
            
            }
        });
    }
    
    public void addPackageDeclaration(MPackageDeclaration macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_PackageDeclaration.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllFields(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Fields");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Fields");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeFields(macro);
            this.list_Fields.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeFields (Macro macro) {
        macro.apply(new InternalsInitializer("Fields"){
            @Override
            void setParamMacroField(MParamMacroField mParamMacroField){
                
            
            
            }
            
            @Override
            void setParamStringField(MParamStringField mParamStringField){
                
            
            
            }
            
            @Override
            void setInternalMacroField(MInternalMacroField mInternalMacroField){
                
            
            
            }
            
            @Override
            void setInternalStringField(MInternalStringField mInternalStringField){
                
            
            
            }
            
            @Override
            void setDirectiveFields(MDirectiveFields mDirectiveFields){
                
            
            
            }
        });
    }
    
    public void addFields(MParamMacroField macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Fields");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Fields.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFields(MParamStringField macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Fields");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Fields.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFields(MInternalMacroField macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Fields");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Fields.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFields(MInternalStringField macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Fields");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Fields.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addFields(MDirectiveFields macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Fields");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Fields.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllConstructor(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Constructor");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Constructor");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeConstructor(macro);
            this.list_Constructor.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeConstructor (Macro macro) {
        macro.apply(new InternalsInitializer("Constructor"){
            @Override
            void setConstructor(MConstructor mConstructor){
                
            
            
            }
        });
    }
    
    public void addConstructor(MConstructor macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Constructor");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Constructor.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllSetters(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Setters");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeSetters(macro);
            this.list_Setters.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeSetters (Macro macro) {
        macro.apply(new InternalsInitializer("Setters"){
            @Override
            void setSingleMacroAdd(MSingleMacroAdd mSingleMacroAdd){
                
            
            
            }
            
            @Override
            void setAddAllMacro(MAddAllMacro mAddAllMacro){
                
            
            
            }
            
            @Override
            void setSingleStringAdd(MSingleStringAdd mSingleStringAdd){
                
            
            
            }
            
            @Override
            void setAddAllString(MAddAllString mAddAllString){
                
            
            
            }
            
            @Override
            void setAbstractTypeVerifier(MAbstractTypeVerifier mAbstractTypeVerifier){
                
            
            
            }
            
            @Override
            void setTypeVerifier(MTypeVerifier mTypeVerifier){
                
            
            
            }
            
            @Override
            void setInternalStringSetter(MInternalStringSetter mInternalStringSetter){
                
            
            
            }
            
            @Override
            void setInternalMacroSetter(MInternalMacroSetter mInternalMacroSetter){
                
            
            
            }
        });
    }
    
    public void addSetters(MSingleMacroAdd macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetters(MAddAllMacro macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetters(MSingleStringAdd macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetters(MAddAllString macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetters(MAbstractTypeVerifier macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetters(MTypeVerifier macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetters(MInternalStringSetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetters(MInternalMacroSetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Setters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Setters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllBuilders(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Builders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Builders");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeBuilders(macro);
            this.list_Builders.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeBuilders (Macro macro) {
        macro.apply(new InternalsInitializer("Builders"){
            @Override
            void setParamStringRefBuilder(MParamStringRefBuilder mParamStringRefBuilder){
                
            
            
            }
            
            @Override
            void setParamMacroRefBuilder(MParamMacroRefBuilder mParamMacroRefBuilder){
                
            
            
            }
            
            @Override
            void setInternalMacroRefBuilder(MInternalMacroRefBuilder mInternalMacroRefBuilder){
                
            
            
            }
            
            @Override
            void setInternalStringRefBuilder(MInternalStringRefBuilder mInternalStringRefBuilder){
                
            
            
            }
        });
    }
    
    public void addBuilders(MParamStringRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Builders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Builders.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addBuilders(MParamMacroRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Builders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Builders.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addBuilders(MInternalMacroRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Builders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Builders.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addBuilders(MInternalStringRefBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Builders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Builders.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllGetters(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Getters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "Getters");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeGetters(macro);
            this.list_Getters.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeGetters (Macro macro) {
        macro.apply(new InternalsInitializer("Getters"){
            @Override
            void setParamStringRef(MParamStringRef mParamStringRef){
                
            
            
            }
            
            @Override
            void setParamMacroRef(MParamMacroRef mParamMacroRef){
                
            
            
            }
            
            @Override
            void setInternalMacroRef(MInternalMacroRef mInternalMacroRef){
                
            
            
            }
            
            @Override
            void setInternalStringRef(MInternalStringRef mInternalStringRef){
                
            
            
            }
        });
    }
    
    public void addGetters(MParamStringRef macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Getters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Getters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addGetters(MParamMacroRef macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Getters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Getters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addGetters(MInternalMacroRef macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Getters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Getters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addGetters(MInternalStringRef macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("Getters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_Getters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllInitInternalsMethods(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("InitInternalsMethods");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "InitInternalsMethods");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeInitInternalsMethods(macro);
            this.list_InitInternalsMethods.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeInitInternalsMethods (Macro macro) {
        macro.apply(new InternalsInitializer("InitInternalsMethods"){
            @Override
            void setInitInternalsMethod(MInitInternalsMethod mInitInternalsMethod){
                
            
            
            }
        });
    }
    
    public void addInitInternalsMethods(MInitInternalsMethod macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InitInternalsMethods");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_InitInternalsMethods.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllInitDirectives(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("InitDirectives");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "InitDirectives");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeInitDirectives(macro);
            this.list_InitDirectives.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeInitDirectives (Macro macro) {
        macro.apply(new InternalsInitializer("InitDirectives"){
            @Override
            void setInitDirectives(MInitDirectives mInitDirectives){
                
            
            
            }
        });
    }
    
    public void addInitDirectives(MInitDirectives macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InitDirectives");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_InitDirectives.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllRedefinedApplyInitializer(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("RedefinedApplyInitializer");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "RedefinedApplyInitializer");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeRedefinedApplyInitializer(macro);
            this.list_RedefinedApplyInitializer.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeRedefinedApplyInitializer (Macro macro) {
        macro.apply(new InternalsInitializer("RedefinedApplyInitializer"){
            @Override
            void setRedefinedApplyInitializer(MRedefinedApplyInitializer mRedefinedApplyInitializer){
                
            
            
            }
        });
    }
    
    public void addRedefinedApplyInitializer(MRedefinedApplyInitializer macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("RedefinedApplyInitializer");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_RedefinedApplyInitializer.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllMacroBuilders(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("MacroBuilders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "MacroBuilders");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeMacroBuilders(macro);
            this.list_MacroBuilders.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeMacroBuilders (Macro macro) {
        macro.apply(new InternalsInitializer("MacroBuilders"){
            @Override
            void setMacroBuilder(MMacroBuilder mMacroBuilder){
                
            
            
            }
            
            @Override
            void setAbstractBuilder(MAbstractBuilder mAbstractBuilder){
                
            
            
            }
            
            @Override
            void setEmptyBuilderWithContext(MEmptyBuilderWithContext mEmptyBuilderWithContext){
                
            
            
            }
        });
    }
    
    public void addMacroBuilders(MMacroBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBuilders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBuilders.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBuilders(MAbstractBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBuilders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBuilders.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBuilders(MEmptyBuilderWithContext macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBuilders");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBuilders.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllAppliedVersion(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("AppliedVersion");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "AppliedVersion");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeAppliedVersion(macro);
            this.list_AppliedVersion.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeAppliedVersion (Macro macro) {
        macro.apply(new InternalsInitializer("AppliedVersion"){
            @Override
            void setAppliedVersion(MAppliedVersion mAppliedVersion){
                
            
            
            }
        });
    }
    
    public void addAppliedVersion(MAppliedVersion macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("AppliedVersion");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_AppliedVersion.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllInitMacrosMethod(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("InitMacrosMethod");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "InitMacrosMethod");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeInitMacrosMethod(macro);
            this.list_InitMacrosMethod.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeInitMacrosMethod (Macro macro) {
        macro.apply(new InternalsInitializer("InitMacrosMethod"){
            @Override
            void setSetMacrosMethod(MSetMacrosMethod mSetMacrosMethod){
                
            
            
            }
        });
    }
    
    public void addInitMacrosMethod(MSetMacrosMethod macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InitMacrosMethod");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_InitMacrosMethod.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    private String buildClassName() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_ClassName;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ClassNameNone != null) {
            sb.append(this.ClassNameNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ClassNameBeforeFirst != null) {
                string = this.ClassNameBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ClassNameAfterLast != null) {
                string = this.ClassNameAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ClassNameSeparator != null) {
                string = this.ClassNameSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildParentClass() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_ParentClass;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ParentClassNone != null) {
            sb.append(this.ParentClassNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ParentClassBeforeFirst != null) {
                string = this.ParentClassBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ParentClassAfterLast != null) {
                string = this.ParentClassAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ParentClassSeparator != null) {
                string = this.ParentClassSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildPublic() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.PublicContext;
        List<Macro> macros = this.list_Public;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.PublicNone != null) {
            sb.append(this.PublicNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.PublicBeforeFirst != null) {
                expansion = this.PublicBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.PublicAfterLast != null) {
                expansion = this.PublicAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.PublicSeparator != null) {
                expansion = this.PublicSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildAbstract() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.AbstractContext;
        List<Macro> macros = this.list_Abstract;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.AbstractNone != null) {
            sb.append(this.AbstractNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.AbstractBeforeFirst != null) {
                expansion = this.AbstractBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.AbstractAfterLast != null) {
                expansion = this.AbstractAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.AbstractSeparator != null) {
                expansion = this.AbstractSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildPackageDeclaration() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.PackageDeclarationContext;
        List<Macro> macros = this.list_PackageDeclaration;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.PackageDeclarationNone != null) {
            sb.append(this.PackageDeclarationNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.PackageDeclarationBeforeFirst != null) {
                expansion = this.PackageDeclarationBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.PackageDeclarationAfterLast != null) {
                expansion = this.PackageDeclarationAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.PackageDeclarationSeparator != null) {
                expansion = this.PackageDeclarationSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildFields() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.FieldsContext;
        List<Macro> macros = this.list_Fields;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.FieldsNone != null) {
            sb.append(this.FieldsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.FieldsBeforeFirst != null) {
                expansion = this.FieldsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.FieldsAfterLast != null) {
                expansion = this.FieldsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.FieldsSeparator != null) {
                expansion = this.FieldsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildConstructor() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.ConstructorContext;
        List<Macro> macros = this.list_Constructor;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.ConstructorNone != null) {
            sb.append(this.ConstructorNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.ConstructorBeforeFirst != null) {
                expansion = this.ConstructorBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.ConstructorAfterLast != null) {
                expansion = this.ConstructorAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.ConstructorSeparator != null) {
                expansion = this.ConstructorSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildSetters() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.SettersContext;
        List<Macro> macros = this.list_Setters;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.SettersNone != null) {
            sb.append(this.SettersNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.SettersBeforeFirst != null) {
                expansion = this.SettersBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.SettersAfterLast != null) {
                expansion = this.SettersAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.SettersSeparator != null) {
                expansion = this.SettersSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildBuilders() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.BuildersContext;
        List<Macro> macros = this.list_Builders;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.BuildersNone != null) {
            sb.append(this.BuildersNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.BuildersBeforeFirst != null) {
                expansion = this.BuildersBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.BuildersAfterLast != null) {
                expansion = this.BuildersAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.BuildersSeparator != null) {
                expansion = this.BuildersSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildGetters() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.GettersContext;
        List<Macro> macros = this.list_Getters;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.GettersNone != null) {
            sb.append(this.GettersNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.GettersBeforeFirst != null) {
                expansion = this.GettersBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.GettersAfterLast != null) {
                expansion = this.GettersAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.GettersSeparator != null) {
                expansion = this.GettersSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildInitInternalsMethods() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.InitInternalsMethodsContext;
        List<Macro> macros = this.list_InitInternalsMethods;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.InitInternalsMethodsNone != null) {
            sb.append(this.InitInternalsMethodsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.InitInternalsMethodsBeforeFirst != null) {
                expansion = this.InitInternalsMethodsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.InitInternalsMethodsAfterLast != null) {
                expansion = this.InitInternalsMethodsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.InitInternalsMethodsSeparator != null) {
                expansion = this.InitInternalsMethodsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildInitDirectives() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.InitDirectivesContext;
        List<Macro> macros = this.list_InitDirectives;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.InitDirectivesNone != null) {
            sb.append(this.InitDirectivesNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.InitDirectivesBeforeFirst != null) {
                expansion = this.InitDirectivesBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.InitDirectivesAfterLast != null) {
                expansion = this.InitDirectivesAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.InitDirectivesSeparator != null) {
                expansion = this.InitDirectivesSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildRedefinedApplyInitializer() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.RedefinedApplyInitializerContext;
        List<Macro> macros = this.list_RedefinedApplyInitializer;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.RedefinedApplyInitializerNone != null) {
            sb.append(this.RedefinedApplyInitializerNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.RedefinedApplyInitializerBeforeFirst != null) {
                expansion = this.RedefinedApplyInitializerBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.RedefinedApplyInitializerAfterLast != null) {
                expansion = this.RedefinedApplyInitializerAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.RedefinedApplyInitializerSeparator != null) {
                expansion = this.RedefinedApplyInitializerSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildMacroBuilders() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.MacroBuildersContext;
        List<Macro> macros = this.list_MacroBuilders;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroBuildersNone != null) {
            sb.append(this.MacroBuildersNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.MacroBuildersBeforeFirst != null) {
                expansion = this.MacroBuildersBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBuildersAfterLast != null) {
                expansion = this.MacroBuildersAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBuildersSeparator != null) {
                expansion = this.MacroBuildersSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildAppliedVersion() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.AppliedVersionContext;
        List<Macro> macros = this.list_AppliedVersion;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.AppliedVersionNone != null) {
            sb.append(this.AppliedVersionNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.AppliedVersionBeforeFirst != null) {
                expansion = this.AppliedVersionBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.AppliedVersionAfterLast != null) {
                expansion = this.AppliedVersionAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.AppliedVersionSeparator != null) {
                expansion = this.AppliedVersionSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildInitMacrosMethod() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.InitMacrosMethodContext;
        List<Macro> macros = this.list_InitMacrosMethod;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.InitMacrosMethodNone != null) {
            sb.append(this.InitMacrosMethodNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.InitMacrosMethodBeforeFirst != null) {
                expansion = this.InitMacrosMethodBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.InitMacrosMethodAfterLast != null) {
                expansion = this.InitMacrosMethodAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.InitMacrosMethodSeparator != null) {
                expansion = this.InitMacrosMethodSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getClassName() {
        return this.ClassNameValue;
    }
    
    StringValue getParentClass() {
        return this.ParentClassValue;
    }
    
    MacroValue getPublic() {
        return this.PublicValue;
    }
    
    MacroValue getAbstract() {
        return this.AbstractValue;
    }
    
    MacroValue getPackageDeclaration() {
        return this.PackageDeclarationValue;
    }
    
    MacroValue getFields() {
        return this.FieldsValue;
    }
    
    MacroValue getConstructor() {
        return this.ConstructorValue;
    }
    
    MacroValue getSetters() {
        return this.SettersValue;
    }
    
    MacroValue getBuilders() {
        return this.BuildersValue;
    }
    
    MacroValue getGetters() {
        return this.GettersValue;
    }
    
    MacroValue getInitInternalsMethods() {
        return this.InitInternalsMethodsValue;
    }
    
    MacroValue getInitDirectives() {
        return this.InitDirectivesValue;
    }
    
    MacroValue getRedefinedApplyInitializer() {
        return this.RedefinedApplyInitializerValue;
    }
    
    MacroValue getMacroBuilders() {
        return this.MacroBuildersValue;
    }
    
    MacroValue getAppliedVersion() {
        return this.AppliedVersionValue;
    }
    
    MacroValue getInitMacrosMethod() {
        return this.InitMacrosMethodValue;
    }
    
    private void initPublicInternals(Context context) {
        for(Macro macro : this.list_Public) {
            macro.apply(new InternalsInitializer("Public"){
                @Override
                void setPublic(MPublic mPublic){
                    
                
                
                }
            });
        }
    }
    
    private void initAbstractInternals(Context context) {
        for(Macro macro : this.list_Abstract) {
            macro.apply(new InternalsInitializer("Abstract"){
                @Override
                void setAbstract(MAbstract mAbstract){
                    
                
                
                }
            });
        }
    }
    
    private void initPackageDeclarationInternals(Context context) {
        for(Macro macro : this.list_PackageDeclaration) {
            macro.apply(new InternalsInitializer("PackageDeclaration"){
                @Override
                void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
                    
                
                
                }
            });
        }
    }
    
    private void initFieldsInternals(Context context) {
        for(Macro macro : this.list_Fields) {
            macro.apply(new InternalsInitializer("Fields"){
                @Override
                void setParamMacroField(MParamMacroField mParamMacroField){
                    
                
                
                }
                
                @Override
                void setParamStringField(MParamStringField mParamStringField){
                    
                
                
                }
                
                @Override
                void setInternalMacroField(MInternalMacroField mInternalMacroField){
                    
                
                
                }
                
                @Override
                void setInternalStringField(MInternalStringField mInternalStringField){
                    
                
                
                }
                
                @Override
                void setDirectiveFields(MDirectiveFields mDirectiveFields){
                    
                
                
                }
            });
        }
    }
    
    private void initConstructorInternals(Context context) {
        for(Macro macro : this.list_Constructor) {
            macro.apply(new InternalsInitializer("Constructor"){
                @Override
                void setConstructor(MConstructor mConstructor){
                    
                    
                    mConstructor.setClassName(ConstructorContext, getClassName());
                }
            });
        }
    }
    
    private void initSettersInternals(Context context) {
        for(Macro macro : this.list_Setters) {
            macro.apply(new InternalsInitializer("Setters"){
                @Override
                void setSingleMacroAdd(MSingleMacroAdd mSingleMacroAdd){
                    
                
                
                }
                
                @Override
                void setAddAllMacro(MAddAllMacro mAddAllMacro){
                    
                
                
                }
                
                @Override
                void setSingleStringAdd(MSingleStringAdd mSingleStringAdd){
                    
                
                
                }
                
                @Override
                void setAddAllString(MAddAllString mAddAllString){
                    
                
                
                }
                
                @Override
                void setAbstractTypeVerifier(MAbstractTypeVerifier mAbstractTypeVerifier){
                    
                
                
                }
                
                @Override
                void setTypeVerifier(MTypeVerifier mTypeVerifier){
                    
                
                
                }
                
                @Override
                void setInternalStringSetter(MInternalStringSetter mInternalStringSetter){
                    
                
                
                }
                
                @Override
                void setInternalMacroSetter(MInternalMacroSetter mInternalMacroSetter){
                    
                
                
                }
            });
        }
    }
    
    private void initBuildersInternals(Context context) {
        for(Macro macro : this.list_Builders) {
            macro.apply(new InternalsInitializer("Builders"){
                @Override
                void setParamStringRefBuilder(MParamStringRefBuilder mParamStringRefBuilder){
                    
                
                
                }
                
                @Override
                void setParamMacroRefBuilder(MParamMacroRefBuilder mParamMacroRefBuilder){
                    
                
                
                }
                
                @Override
                void setInternalMacroRefBuilder(MInternalMacroRefBuilder mInternalMacroRefBuilder){
                    
                
                
                }
                
                @Override
                void setInternalStringRefBuilder(MInternalStringRefBuilder mInternalStringRefBuilder){
                    
                
                
                }
            });
        }
    }
    
    private void initGettersInternals(Context context) {
        for(Macro macro : this.list_Getters) {
            macro.apply(new InternalsInitializer("Getters"){
                @Override
                void setParamStringRef(MParamStringRef mParamStringRef){
                    
                
                
                }
                
                @Override
                void setParamMacroRef(MParamMacroRef mParamMacroRef){
                    
                
                
                }
                
                @Override
                void setInternalMacroRef(MInternalMacroRef mInternalMacroRef){
                    
                
                
                }
                
                @Override
                void setInternalStringRef(MInternalStringRef mInternalStringRef){
                    
                
                
                }
            });
        }
    }
    
    private void initInitInternalsMethodsInternals(Context context) {
        for(Macro macro : this.list_InitInternalsMethods) {
            macro.apply(new InternalsInitializer("InitInternalsMethods"){
                @Override
                void setInitInternalsMethod(MInitInternalsMethod mInitInternalsMethod){
                    
                
                
                }
            });
        }
    }
    
    private void initInitDirectivesInternals(Context context) {
        for(Macro macro : this.list_InitDirectives) {
            macro.apply(new InternalsInitializer("InitDirectives"){
                @Override
                void setInitDirectives(MInitDirectives mInitDirectives){
                    
                
                
                }
            });
        }
    }
    
    private void initRedefinedApplyInitializerInternals(Context context) {
        for(Macro macro : this.list_RedefinedApplyInitializer) {
            macro.apply(new InternalsInitializer("RedefinedApplyInitializer"){
                @Override
                void setRedefinedApplyInitializer(MRedefinedApplyInitializer mRedefinedApplyInitializer){
                    
                    
                    mRedefinedApplyInitializer.setClassName(RedefinedApplyInitializerContext, getClassName());
                }
            });
        }
    }
    
    private void initMacroBuildersInternals(Context context) {
        for(Macro macro : this.list_MacroBuilders) {
            macro.apply(new InternalsInitializer("MacroBuilders"){
                @Override
                void setMacroBuilder(MMacroBuilder mMacroBuilder){
                    
                
                
                }
                
                @Override
                void setAbstractBuilder(MAbstractBuilder mAbstractBuilder){
                    
                
                
                }
                
                @Override
                void setEmptyBuilderWithContext(MEmptyBuilderWithContext mEmptyBuilderWithContext){
                    
                
                
                }
            });
        }
    }
    
    private void initAppliedVersionInternals(Context context) {
        for(Macro macro : this.list_AppliedVersion) {
            macro.apply(new InternalsInitializer("AppliedVersion"){
                @Override
                void setAppliedVersion(MAppliedVersion mAppliedVersion){
                    
                
                
                }
            });
        }
    }
    
    private void initInitMacrosMethodInternals(Context context) {
        for(Macro macro : this.list_InitMacrosMethod) {
            macro.apply(new InternalsInitializer("InitMacrosMethod"){
                @Override
                void setSetMacrosMethod(MSetMacrosMethod mSetMacrosMethod){
                    
                
                
                }
            });
        }
    }
    
    private void initClassNameDirectives() {
        
    }
    
    private void initParentClassDirectives() {
        
    }
    
    private void initPublicDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(" ");
        this.PublicAfterLast = new DAfterLast(sb1.toString());
        this.PublicValue.setAfterLast(this.PublicAfterLast);
    }
    
    private void initAbstractDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(" ");
        this.AbstractAfterLast = new DAfterLast(sb1.toString());
        this.AbstractValue.setAfterLast(this.AbstractAfterLast);
    }
    
    private void initPackageDeclarationDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.PackageDeclarationBeforeFirst = new DBeforeFirst(sb1.toString());
        this.PackageDeclarationValue.setBeforeFirst(this.PackageDeclarationBeforeFirst);
    }
    
    private void initFieldsDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.FieldsSeparator = new DSeparator(sb1.toString());
        this.FieldsValue.setSeparator(this.FieldsSeparator);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.FieldsBeforeFirst = new DBeforeFirst(sb2.toString());
        this.FieldsValue.setBeforeFirst(this.FieldsBeforeFirst);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        this.FieldsAfterLast = new DAfterLast(sb3.toString());
        this.FieldsValue.setAfterLast(this.FieldsAfterLast);
    }
    
    private void initConstructorDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.ConstructorBeforeFirst = new DBeforeFirst(sb1.toString());
        this.ConstructorValue.setBeforeFirst(this.ConstructorBeforeFirst);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.ConstructorAfterLast = new DAfterLast(sb2.toString());
        this.ConstructorValue.setAfterLast(this.ConstructorAfterLast);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        sb3.append(LINE_SEPARATOR);
        this.ConstructorSeparator = new DSeparator(sb3.toString());
        this.ConstructorValue.setSeparator(this.ConstructorSeparator);
    }
    
    private void initSettersDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.SettersSeparator = new DSeparator(sb1.toString());
        this.SettersValue.setSeparator(this.SettersSeparator);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.SettersBeforeFirst = new DBeforeFirst(sb2.toString());
        this.SettersValue.setBeforeFirst(this.SettersBeforeFirst);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        this.SettersAfterLast = new DAfterLast(sb3.toString());
        this.SettersValue.setAfterLast(this.SettersAfterLast);
    }
    
    private void initBuildersDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.BuildersSeparator = new DSeparator(sb1.toString());
        this.BuildersValue.setSeparator(this.BuildersSeparator);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.BuildersBeforeFirst = new DBeforeFirst(sb2.toString());
        this.BuildersValue.setBeforeFirst(this.BuildersBeforeFirst);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        this.BuildersAfterLast = new DAfterLast(sb3.toString());
        this.BuildersValue.setAfterLast(this.BuildersAfterLast);
    }
    
    private void initGettersDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.GettersSeparator = new DSeparator(sb1.toString());
        this.GettersValue.setSeparator(this.GettersSeparator);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.GettersBeforeFirst = new DBeforeFirst(sb2.toString());
        this.GettersValue.setBeforeFirst(this.GettersBeforeFirst);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        this.GettersAfterLast = new DAfterLast(sb3.toString());
        this.GettersValue.setAfterLast(this.GettersAfterLast);
    }
    
    private void initInitInternalsMethodsDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.InitInternalsMethodsSeparator = new DSeparator(sb1.toString());
        this.InitInternalsMethodsValue.setSeparator(this.InitInternalsMethodsSeparator);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.InitInternalsMethodsBeforeFirst = new DBeforeFirst(sb2.toString());
        this.InitInternalsMethodsValue.setBeforeFirst(this.InitInternalsMethodsBeforeFirst);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        this.InitInternalsMethodsAfterLast = new DAfterLast(sb3.toString());
        this.InitInternalsMethodsValue.setAfterLast(this.InitInternalsMethodsAfterLast);
    }
    
    private void initInitDirectivesDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.InitDirectivesSeparator = new DSeparator(sb1.toString());
        this.InitDirectivesValue.setSeparator(this.InitDirectivesSeparator);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.InitDirectivesBeforeFirst = new DBeforeFirst(sb2.toString());
        this.InitDirectivesValue.setBeforeFirst(this.InitDirectivesBeforeFirst);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        this.InitDirectivesAfterLast = new DAfterLast(sb3.toString());
        this.InitDirectivesValue.setAfterLast(this.InitDirectivesAfterLast);
    }
    
    private void initRedefinedApplyInitializerDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.RedefinedApplyInitializerBeforeFirst = new DBeforeFirst(sb1.toString());
        this.RedefinedApplyInitializerValue.setBeforeFirst(this.RedefinedApplyInitializerBeforeFirst);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.RedefinedApplyInitializerAfterLast = new DAfterLast(sb2.toString());
        this.RedefinedApplyInitializerValue.setAfterLast(this.RedefinedApplyInitializerAfterLast);
    }
    
    private void initMacroBuildersDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.MacroBuildersSeparator = new DSeparator(sb1.toString());
        this.MacroBuildersValue.setSeparator(this.MacroBuildersSeparator);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.MacroBuildersBeforeFirst = new DBeforeFirst(sb2.toString());
        this.MacroBuildersValue.setBeforeFirst(this.MacroBuildersBeforeFirst);StringBuilder sb3 = new StringBuilder();
        sb3.append(LINE_SEPARATOR);
        this.MacroBuildersAfterLast = new DAfterLast(sb3.toString());
        this.MacroBuildersValue.setAfterLast(this.MacroBuildersAfterLast);
    }
    
    private void initAppliedVersionDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.AppliedVersionBeforeFirst = new DBeforeFirst(sb1.toString());
        this.AppliedVersionValue.setBeforeFirst(this.AppliedVersionBeforeFirst);
    }
    
    private void initInitMacrosMethodDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.InitMacrosMethodBeforeFirst = new DBeforeFirst(sb1.toString());
        this.InitMacrosMethodValue.setBeforeFirst(this.InitMacrosMethodBeforeFirst);StringBuilder sb2 = new StringBuilder();
        sb2.append(LINE_SEPARATOR);
        this.InitMacrosMethodAfterLast = new DAfterLast(sb2.toString());
        this.InitMacrosMethodValue.setAfterLast(this.InitMacrosMethodAfterLast);
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setMacro(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initClassNameDirectives();
        initParentClassDirectives();
        initPublicDirectives();
        initAbstractDirectives();
        initPackageDeclarationDirectives();
        initFieldsDirectives();
        initConstructorDirectives();
        initSettersDirectives();
        initBuildersDirectives();
        initGettersDirectives();
        initInitInternalsMethodsDirectives();
        initInitDirectivesDirectives();
        initRedefinedApplyInitializerDirectives();
        initMacroBuildersDirectives();
        initAppliedVersionDirectives();
        initInitMacrosMethodDirectives();
        
        initPublicInternals(null);
        initAbstractInternals(null);
        initPackageDeclarationInternals(null);
        initFieldsInternals(null);
        initConstructorInternals(null);
        initSettersInternals(null);
        initBuildersInternals(null);
        initGettersInternals(null);
        initInitInternalsMethodsInternals(null);
        initInitDirectivesInternals(null);
        initRedefinedApplyInitializerInternals(null);
        initMacroBuildersInternals(null);
        initAppliedVersionInternals(null);
        initInitMacrosMethodInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
        
        MHeader m1 = this.getMacros().newHeader();
        
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildPackageDeclaration());
        sb0.append(LINE_SEPARATOR);
        MImportJavaUtil m2 = this.getMacros().newImportJavaUtil();
        
        
        
        sb0.append(m2.build(null));
        sb0.append(buildAppliedVersion());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildPublic());
        sb0.append(buildAbstract());
        sb0.append("class M");
        sb0.append(buildClassName());
        sb0.append(" extends M");
        sb0.append(buildParentClass());
        sb0.append(" ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        sb2.append("    ");
        indentations.add(sb2.toString());
        sb1.append(buildFields());
        sb1.append(buildConstructor());
        sb1.append(buildSetters());
        sb1.append(buildBuilders());
        sb1.append(buildGetters());
        sb1.append(buildInitInternalsMethods());
        sb1.append(buildInitDirectives());
        sb1.append(buildRedefinedApplyInitializer());
        sb1.append(buildMacroBuilders());
        sb1.append(buildInitMacrosMethod());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}