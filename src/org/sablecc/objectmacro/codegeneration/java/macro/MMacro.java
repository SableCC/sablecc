/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MMacro extends Macro{
    
    private String field_Name;
    
    
    private final List<Macro> list_PackageDeclaration;
    
    
    private DSeparator PackageDeclarationSeparator;
    
    private DBeforeFirst PackageDeclarationBeforeFirst;
    
    private DAfterLast PackageDeclarationAfterLast;
    
    private DNone PackageDeclarationNone;
    
    
    private final InternalValue PackageDeclarationValue;
    
    
    private final List<Macro> list_MacroFields;
    
    
    private DSeparator MacroFieldsSeparator;
    
    private DBeforeFirst MacroFieldsBeforeFirst;
    
    private DAfterLast MacroFieldsAfterLast;
    
    private DNone MacroFieldsNone;
    
    
    private final InternalValue MacroFieldsValue;
    
    
    private final List<Macro> list_MacroContextField;
    
    
    private DSeparator MacroContextFieldSeparator;
    
    private DBeforeFirst MacroContextFieldBeforeFirst;
    
    private DAfterLast MacroContextFieldAfterLast;
    
    private DNone MacroContextFieldNone;
    
    
    private final InternalValue MacroContextFieldValue;
    
    
    private final List<Macro> list_MacroConstructor;
    
    
    private DSeparator MacroConstructorSeparator;
    
    private DBeforeFirst MacroConstructorBeforeFirst;
    
    private DAfterLast MacroConstructorAfterLast;
    
    private DNone MacroConstructorNone;
    
    
    private final InternalValue MacroConstructorValue;
    
    
    private final List<Macro> list_MacroSetters;
    
    
    private DSeparator MacroSettersSeparator;
    
    private DBeforeFirst MacroSettersBeforeFirst;
    
    private DAfterLast MacroSettersAfterLast;
    
    private DNone MacroSettersNone;
    
    
    private final InternalValue MacroSettersValue;
    
    
    private final List<Macro> list_MacroBuilders;
    
    
    private DSeparator MacroBuildersSeparator;
    
    private DBeforeFirst MacroBuildersBeforeFirst;
    
    private DAfterLast MacroBuildersAfterLast;
    
    private DNone MacroBuildersNone;
    
    
    private final InternalValue MacroBuildersValue;
    
    
    private final List<Macro> list_MacroRefs;
    
    
    private DSeparator MacroRefsSeparator;
    
    private DBeforeFirst MacroRefsBeforeFirst;
    
    private DAfterLast MacroRefsAfterLast;
    
    private DNone MacroRefsNone;
    
    
    private final InternalValue MacroRefsValue;
    
    
    private final List<Macro> list_MacroInitInternalsMethod;
    
    
    private DSeparator MacroInitInternalsMethodSeparator;
    
    private DBeforeFirst MacroInitInternalsMethodBeforeFirst;
    
    private DAfterLast MacroInitInternalsMethodAfterLast;
    
    private DNone MacroInitInternalsMethodNone;
    
    
    private final InternalValue MacroInitInternalsMethodValue;
    
    
    private final List<Macro> list_MacroInitDirectives;
    
    
    private DSeparator MacroInitDirectivesSeparator;
    
    private DBeforeFirst MacroInitDirectivesBeforeFirst;
    
    private DAfterLast MacroInitDirectivesAfterLast;
    
    private DNone MacroInitDirectivesNone;
    
    
    private final InternalValue MacroInitDirectivesValue;
    
    
    private final List<Macro> list_MacroRedefinedApplyInitializer;
    
    
    private DSeparator MacroRedefinedApplyInitializerSeparator;
    
    private DBeforeFirst MacroRedefinedApplyInitializerBeforeFirst;
    
    private DAfterLast MacroRedefinedApplyInitializerAfterLast;
    
    private DNone MacroRedefinedApplyInitializerNone;
    
    
    private final InternalValue MacroRedefinedApplyInitializerValue;
    
    
    private final List<Macro> list_MacroMacroBuilder;
    
    
    private DSeparator MacroMacroBuilderSeparator;
    
    private DBeforeFirst MacroMacroBuilderBeforeFirst;
    
    private DAfterLast MacroMacroBuilderAfterLast;
    
    private DNone MacroMacroBuilderNone;
    
    
    private final InternalValue MacroMacroBuilderValue;
    
    
    private final List<Macro> list_MacroEmptyBuilderWithContext;
    
    
    private DSeparator MacroEmptyBuilderWithContextSeparator;
    
    private DBeforeFirst MacroEmptyBuilderWithContextBeforeFirst;
    
    private DAfterLast MacroEmptyBuilderWithContextAfterLast;
    
    private DNone MacroEmptyBuilderWithContextNone;
    
    
    private final InternalValue MacroEmptyBuilderWithContextValue;
    
    private final Context PackageDeclarationContext = new Context();private final Context MacroFieldsContext = new Context();private final Context MacroContextFieldContext = new Context();private final Context MacroConstructorContext = new Context();private final Context MacroSettersContext = new Context();private final Context MacroBuildersContext = new Context();private final Context MacroRefsContext = new Context();private final Context MacroInitInternalsMethodContext = new Context();private final Context MacroInitDirectivesContext = new Context();private final Context MacroRedefinedApplyInitializerContext = new Context();private final Context MacroMacroBuilderContext = new Context();private final Context MacroEmptyBuilderWithContextContext = new Context();
    
    public MMacro(String pName){
        
                this.setPName(pName);
        
            this.list_PackageDeclaration = new ArrayList<>();    this.list_MacroFields = new ArrayList<>();    this.list_MacroContextField = new ArrayList<>();    this.list_MacroConstructor = new ArrayList<>();    this.list_MacroSetters = new ArrayList<>();    this.list_MacroBuilders = new ArrayList<>();    this.list_MacroRefs = new ArrayList<>();    this.list_MacroInitInternalsMethod = new ArrayList<>();    this.list_MacroInitDirectives = new ArrayList<>();    this.list_MacroRedefinedApplyInitializer = new ArrayList<>();    this.list_MacroMacroBuilder = new ArrayList<>();    this.list_MacroEmptyBuilderWithContext = new ArrayList<>();
        
            this.PackageDeclarationValue = new InternalValue(this.list_PackageDeclaration, this.PackageDeclarationContext);    this.MacroFieldsValue = new InternalValue(this.list_MacroFields, this.MacroFieldsContext);    this.MacroContextFieldValue = new InternalValue(this.list_MacroContextField, this.MacroContextFieldContext);    this.MacroConstructorValue = new InternalValue(this.list_MacroConstructor, this.MacroConstructorContext);    this.MacroSettersValue = new InternalValue(this.list_MacroSetters, this.MacroSettersContext);    this.MacroBuildersValue = new InternalValue(this.list_MacroBuilders, this.MacroBuildersContext);    this.MacroRefsValue = new InternalValue(this.list_MacroRefs, this.MacroRefsContext);    this.MacroInitInternalsMethodValue = new InternalValue(this.list_MacroInitInternalsMethod, this.MacroInitInternalsMethodContext);    this.MacroInitDirectivesValue = new InternalValue(this.list_MacroInitDirectives, this.MacroInitDirectivesContext);    this.MacroRedefinedApplyInitializerValue = new InternalValue(this.list_MacroRedefinedApplyInitializer, this.MacroRedefinedApplyInitializerContext);    this.MacroMacroBuilderValue = new InternalValue(this.list_MacroMacroBuilder, this.MacroMacroBuilderContext);    this.MacroEmptyBuilderWithContextValue = new InternalValue(this.list_MacroEmptyBuilderWithContext, this.MacroEmptyBuilderWithContextContext);
    }
    
    private void setPName( String pName ){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }
    
        this.field_Name = pName;
    }
        public void addPackageDeclaration(MPackageDeclaration macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("PackageDeclaration");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("PackageDeclaration");
            }
    
            this.list_PackageDeclaration.add(macro);
        }
        public void addMacroFields(MParamMacroField macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroFields");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ParamMacroField");
            }
    
            this.list_MacroFields.add(macro);
        }
        public void addMacroFields(MParamStringField macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroFields");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ParamStringField");
            }
    
            this.list_MacroFields.add(macro);
        }
        public void addMacroFields(MInternalMacroField macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroFields");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InternalMacroField");
            }
    
            this.list_MacroFields.add(macro);
        }
        public void addMacroFields(MInternalStringField macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroFields");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InternalStringField");
            }
    
            this.list_MacroFields.add(macro);
        }
        public void addMacroFields(MInternalMacrosValueField macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroFields");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InternalMacrosValueField");
            }
    
            this.list_MacroFields.add(macro);
        }
        public void addMacroFields(MDirectiveFields macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroFields");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("DirectiveFields");
            }
    
            this.list_MacroFields.add(macro);
        }
        public void addMacroContextField(MContextField macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroContextField");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ContextField");
            }
    
            this.list_MacroContextField.add(macro);
        }
        public void addMacroConstructor(MConstructor macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroConstructor");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("Constructor");
            }
    
            this.list_MacroConstructor.add(macro);
        }
        public void addMacroSetters(MParamStringSetter macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroSetters");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ParamStringSetter");
            }
    
            this.list_MacroSetters.add(macro);
        }
        public void addMacroSetters(MSingleAdd macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroSetters");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("SingleAdd");
            }
    
            this.list_MacroSetters.add(macro);
        }
        public void addMacroSetters(MInternalStringSetter macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroSetters");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InternalStringSetter");
            }
    
            this.list_MacroSetters.add(macro);
        }
        public void addMacroSetters(MInternalMacroSetter macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroSetters");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InternalMacroSetter");
            }
    
            this.list_MacroSetters.add(macro);
        }
        public void addMacroBuilders(MParamStringRefBuilder macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroBuilders");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ParamStringRefBuilder");
            }
    
            this.list_MacroBuilders.add(macro);
        }
        public void addMacroBuilders(MParamMacroRefBuilder macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroBuilders");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ParamMacroRefBuilder");
            }
    
            this.list_MacroBuilders.add(macro);
        }
        public void addMacroBuilders(MInternalMacroRefBuilder macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroBuilders");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InternalMacroRefBuilder");
            }
    
            this.list_MacroBuilders.add(macro);
        }
        public void addMacroRefs(MParamStringRef macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroRefs");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ParamStringRef");
            }
    
            this.list_MacroRefs.add(macro);
        }
        public void addMacroRefs(MParamMacroRef macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroRefs");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("ParamMacroRef");
            }
    
            this.list_MacroRefs.add(macro);
        }
        public void addMacroRefs(MInternalMacroRef macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroRefs");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InternalMacroRef");
            }
    
            this.list_MacroRefs.add(macro);
        }
        public void addMacroInitInternalsMethod(MInitInternalsMethod macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroInitInternalsMethod");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InitInternalsMethod");
            }
    
            this.list_MacroInitInternalsMethod.add(macro);
        }
        public void addMacroInitDirectives(MInitDirectives macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroInitDirectives");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("InitDirectives");
            }
    
            this.list_MacroInitDirectives.add(macro);
        }
        public void addMacroRedefinedApplyInitializer(MRedefinedApplyInitializer macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroRedefinedApplyInitializer");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("RedefinedApplyInitializer");
            }
    
            this.list_MacroRedefinedApplyInitializer.add(macro);
        }
        public void addMacroMacroBuilder(MMacroBuilder macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroMacroBuilder");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("MacroBuilder");
            }
    
            this.list_MacroMacroBuilder.add(macro);
        }
        public void addMacroEmptyBuilderWithContext(MEmptyBuilderWithContext macro){
            if(macro == null){
                throw ObjectMacroException.parameterNull("MacroEmptyBuilderWithContext");
            }
                    if(this.build_state != null){
                throw ObjectMacroException.cannotModify("EmptyBuilderWithContext");
            }
    
            this.list_MacroEmptyBuilderWithContext.add(macro);
        }
    
    private String buildName(){
    
        return this.field_Name;
    }
    private String buildPackageDeclaration(){
        StringBuilder sb = new StringBuilder();
        Context local_context = PackageDeclarationContext;
        List<Macro> macros = this.list_PackageDeclaration;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.PackageDeclarationNone != null){
            sb.append(this.PackageDeclarationNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.PackageDeclarationBeforeFirst != null){
                expansion = this.PackageDeclarationBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.PackageDeclarationAfterLast != null){
                expansion = this.PackageDeclarationAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.PackageDeclarationSeparator != null){
                expansion = this.PackageDeclarationSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroFields(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroFieldsContext;
        List<Macro> macros = this.list_MacroFields;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroFieldsNone != null){
            sb.append(this.MacroFieldsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroFieldsBeforeFirst != null){
                expansion = this.MacroFieldsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroFieldsAfterLast != null){
                expansion = this.MacroFieldsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroFieldsSeparator != null){
                expansion = this.MacroFieldsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroContextField(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroContextFieldContext;
        List<Macro> macros = this.list_MacroContextField;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroContextFieldNone != null){
            sb.append(this.MacroContextFieldNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroContextFieldBeforeFirst != null){
                expansion = this.MacroContextFieldBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroContextFieldAfterLast != null){
                expansion = this.MacroContextFieldAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroContextFieldSeparator != null){
                expansion = this.MacroContextFieldSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroConstructor(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroConstructorContext;
        List<Macro> macros = this.list_MacroConstructor;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroConstructorNone != null){
            sb.append(this.MacroConstructorNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroConstructorBeforeFirst != null){
                expansion = this.MacroConstructorBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroConstructorAfterLast != null){
                expansion = this.MacroConstructorAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroConstructorSeparator != null){
                expansion = this.MacroConstructorSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroSetters(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroSettersContext;
        List<Macro> macros = this.list_MacroSetters;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroSettersNone != null){
            sb.append(this.MacroSettersNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroSettersBeforeFirst != null){
                expansion = this.MacroSettersBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroSettersAfterLast != null){
                expansion = this.MacroSettersAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroSettersSeparator != null){
                expansion = this.MacroSettersSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroBuilders(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroBuildersContext;
        List<Macro> macros = this.list_MacroBuilders;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroBuildersNone != null){
            sb.append(this.MacroBuildersNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroBuildersBeforeFirst != null){
                expansion = this.MacroBuildersBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBuildersAfterLast != null){
                expansion = this.MacroBuildersAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBuildersSeparator != null){
                expansion = this.MacroBuildersSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroRefs(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroRefsContext;
        List<Macro> macros = this.list_MacroRefs;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroRefsNone != null){
            sb.append(this.MacroRefsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroRefsBeforeFirst != null){
                expansion = this.MacroRefsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroRefsAfterLast != null){
                expansion = this.MacroRefsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroRefsSeparator != null){
                expansion = this.MacroRefsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroInitInternalsMethod(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroInitInternalsMethodContext;
        List<Macro> macros = this.list_MacroInitInternalsMethod;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroInitInternalsMethodNone != null){
            sb.append(this.MacroInitInternalsMethodNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroInitInternalsMethodBeforeFirst != null){
                expansion = this.MacroInitInternalsMethodBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroInitInternalsMethodAfterLast != null){
                expansion = this.MacroInitInternalsMethodAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroInitInternalsMethodSeparator != null){
                expansion = this.MacroInitInternalsMethodSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroInitDirectives(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroInitDirectivesContext;
        List<Macro> macros = this.list_MacroInitDirectives;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroInitDirectivesNone != null){
            sb.append(this.MacroInitDirectivesNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroInitDirectivesBeforeFirst != null){
                expansion = this.MacroInitDirectivesBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroInitDirectivesAfterLast != null){
                expansion = this.MacroInitDirectivesAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroInitDirectivesSeparator != null){
                expansion = this.MacroInitDirectivesSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroRedefinedApplyInitializer(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroRedefinedApplyInitializerContext;
        List<Macro> macros = this.list_MacroRedefinedApplyInitializer;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroRedefinedApplyInitializerNone != null){
            sb.append(this.MacroRedefinedApplyInitializerNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroRedefinedApplyInitializerBeforeFirst != null){
                expansion = this.MacroRedefinedApplyInitializerBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroRedefinedApplyInitializerAfterLast != null){
                expansion = this.MacroRedefinedApplyInitializerAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroRedefinedApplyInitializerSeparator != null){
                expansion = this.MacroRedefinedApplyInitializerSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroMacroBuilder(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroMacroBuilderContext;
        List<Macro> macros = this.list_MacroMacroBuilder;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroMacroBuilderNone != null){
            sb.append(this.MacroMacroBuilderNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroMacroBuilderBeforeFirst != null){
                expansion = this.MacroMacroBuilderBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroMacroBuilderAfterLast != null){
                expansion = this.MacroMacroBuilderAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroMacroBuilderSeparator != null){
                expansion = this.MacroMacroBuilderSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    private String buildMacroEmptyBuilderWithContext(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroEmptyBuilderWithContextContext;
        List<Macro> macros = this.list_MacroEmptyBuilderWithContext;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroEmptyBuilderWithContextNone != null){
            sb.append(this.MacroEmptyBuilderWithContextNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroEmptyBuilderWithContextBeforeFirst != null){
                expansion = this.MacroEmptyBuilderWithContextBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroEmptyBuilderWithContextAfterLast != null){
                expansion = this.MacroEmptyBuilderWithContextAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroEmptyBuilderWithContextSeparator != null){
                expansion = this.MacroEmptyBuilderWithContextSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String getName(){
    
        return this.field_Name;
    }
    private InternalValue getPackageDeclaration(){
        return this.PackageDeclarationValue;
    }
    private InternalValue getMacroFields(){
        return this.MacroFieldsValue;
    }
    private InternalValue getMacroContextField(){
        return this.MacroContextFieldValue;
    }
    private InternalValue getMacroConstructor(){
        return this.MacroConstructorValue;
    }
    private InternalValue getMacroSetters(){
        return this.MacroSettersValue;
    }
    private InternalValue getMacroBuilders(){
        return this.MacroBuildersValue;
    }
    private InternalValue getMacroRefs(){
        return this.MacroRefsValue;
    }
    private InternalValue getMacroInitInternalsMethod(){
        return this.MacroInitInternalsMethodValue;
    }
    private InternalValue getMacroInitDirectives(){
        return this.MacroInitDirectivesValue;
    }
    private InternalValue getMacroRedefinedApplyInitializer(){
        return this.MacroRedefinedApplyInitializerValue;
    }
    private InternalValue getMacroMacroBuilder(){
        return this.MacroMacroBuilderValue;
    }
    private InternalValue getMacroEmptyBuilderWithContext(){
        return this.MacroEmptyBuilderWithContextValue;
    }
    private void initPackageDeclarationInternals(Context context){
        for(Macro macro : this.list_PackageDeclaration){
            macro.apply(new InternalsInitializer("PackageDeclaration"){
            @Override
            void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
            
                
                
            }
            });
        }
    }
    private void initMacroFieldsInternals(Context context){
        for(Macro macro : this.list_MacroFields){
            macro.apply(new InternalsInitializer("MacroFields"){
            @Override
            void setParamMacroField(MParamMacroField mParamMacroField){
            
                
                
            }@Override
            void setParamStringField(MParamStringField mParamStringField){
            
                
                
            }@Override
            void setInternalMacroField(MInternalMacroField mInternalMacroField){
            
                
                
            }@Override
            void setInternalStringField(MInternalStringField mInternalStringField){
            
                
                
            }@Override
            void setInternalMacrosValueField(MInternalMacrosValueField mInternalMacrosValueField){
            
                
                
            }@Override
            void setDirectiveFields(MDirectiveFields mDirectiveFields){
            
                
                
            }
            });
        }
    }
    private void initMacroContextFieldInternals(Context context){
        for(Macro macro : this.list_MacroContextField){
            macro.apply(new InternalsInitializer("MacroContextField"){
            @Override
            void setContextField(MContextField mContextField){
            
                
                
            }
            });
        }
    }
    private void initMacroConstructorInternals(Context context){
        for(Macro macro : this.list_MacroConstructor){
            macro.apply(new InternalsInitializer("MacroConstructor"){
            @Override
            void setConstructor(MConstructor mConstructor){
            
                
                
            }
            });
        }
    }
    private void initMacroSettersInternals(Context context){
        for(Macro macro : this.list_MacroSetters){
            macro.apply(new InternalsInitializer("MacroSetters"){
            @Override
            void setParamStringSetter(MParamStringSetter mParamStringSetter){
            
                
                
            }@Override
            void setSingleAdd(MSingleAdd mSingleAdd){
            
                
                
            }@Override
            void setInternalStringSetter(MInternalStringSetter mInternalStringSetter){
            
                
                
            }@Override
            void setInternalMacroSetter(MInternalMacroSetter mInternalMacroSetter){
            
                
                
            }
            });
        }
    }
    private void initMacroBuildersInternals(Context context){
        for(Macro macro : this.list_MacroBuilders){
            macro.apply(new InternalsInitializer("MacroBuilders"){
            @Override
            void setParamStringRefBuilder(MParamStringRefBuilder mParamStringRefBuilder){
            
                
                
            }@Override
            void setParamMacroRefBuilder(MParamMacroRefBuilder mParamMacroRefBuilder){
            
                
                
            }@Override
            void setInternalMacroRefBuilder(MInternalMacroRefBuilder mInternalMacroRefBuilder){
            
                
                
            }
            });
        }
    }
    private void initMacroRefsInternals(Context context){
        for(Macro macro : this.list_MacroRefs){
            macro.apply(new InternalsInitializer("MacroRefs"){
            @Override
            void setParamStringRef(MParamStringRef mParamStringRef){
            
                
                
            }@Override
            void setParamMacroRef(MParamMacroRef mParamMacroRef){
            
                
                
            }@Override
            void setInternalMacroRef(MInternalMacroRef mInternalMacroRef){
            
                
                
            }
            });
        }
    }
    private void initMacroInitInternalsMethodInternals(Context context){
        for(Macro macro : this.list_MacroInitInternalsMethod){
            macro.apply(new InternalsInitializer("MacroInitInternalsMethod"){
            @Override
            void setInitInternalsMethod(MInitInternalsMethod mInitInternalsMethod){
            
                
                
            }
            });
        }
    }
    private void initMacroInitDirectivesInternals(Context context){
        for(Macro macro : this.list_MacroInitDirectives){
            macro.apply(new InternalsInitializer("MacroInitDirectives"){
            @Override
            void setInitDirectives(MInitDirectives mInitDirectives){
            
                
                
            }
            });
        }
    }
    private void initMacroRedefinedApplyInitializerInternals(Context context){
        for(Macro macro : this.list_MacroRedefinedApplyInitializer){
            macro.apply(new InternalsInitializer("MacroRedefinedApplyInitializer"){
            @Override
            void setRedefinedApplyInitializer(MRedefinedApplyInitializer mRedefinedApplyInitializer){
            
                
                
            }
            });
        }
    }
    private void initMacroMacroBuilderInternals(Context context){
        for(Macro macro : this.list_MacroMacroBuilder){
            macro.apply(new InternalsInitializer("MacroMacroBuilder"){
            @Override
            void setMacroBuilder(MMacroBuilder mMacroBuilder){
            
                
                
            }
            });
        }
    }
    private void initMacroEmptyBuilderWithContextInternals(Context context){
        for(Macro macro : this.list_MacroEmptyBuilderWithContext){
            macro.apply(new InternalsInitializer("MacroEmptyBuilderWithContext"){
            @Override
            void setEmptyBuilderWithContext(MEmptyBuilderWithContext mEmptyBuilderWithContext){
            
                
                
            }
            });
        }
    }
    
    private void initPackageDeclarationDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.PackageDeclarationBeforeFirst = new DBeforeFirst(sb0.toString());
        this.PackageDeclarationValue.setBeforeFirst(this.PackageDeclarationBeforeFirst);
    }
    private void initMacroFieldsDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);sb0.append(LINE_SEPARATOR);sb0.append(LINE_SEPARATOR);
        this.MacroFieldsSeparator = new DSeparator(sb0.toString());
        this.MacroFieldsValue.setSeparator(this.MacroFieldsSeparator);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.MacroFieldsBeforeFirst = new DBeforeFirst(sb1.toString());
        this.MacroFieldsValue.setBeforeFirst(this.MacroFieldsBeforeFirst);
    }
    private void initMacroContextFieldDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroContextFieldBeforeFirst = new DBeforeFirst(sb0.toString());
        this.MacroContextFieldValue.setBeforeFirst(this.MacroContextFieldBeforeFirst);
    }
    private void initMacroConstructorDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroConstructorBeforeFirst = new DBeforeFirst(sb0.toString());
        this.MacroConstructorValue.setBeforeFirst(this.MacroConstructorBeforeFirst);
    }
    private void initMacroSettersDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroSettersSeparator = new DSeparator(sb0.toString());
        this.MacroSettersValue.setSeparator(this.MacroSettersSeparator);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.MacroSettersBeforeFirst = new DBeforeFirst(sb1.toString());
        this.MacroSettersValue.setBeforeFirst(this.MacroSettersBeforeFirst);
    }
    private void initMacroBuildersDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroBuildersSeparator = new DSeparator(sb0.toString());
        this.MacroBuildersValue.setSeparator(this.MacroBuildersSeparator);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.MacroBuildersBeforeFirst = new DBeforeFirst(sb1.toString());
        this.MacroBuildersValue.setBeforeFirst(this.MacroBuildersBeforeFirst);
    }
    private void initMacroRefsDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroRefsSeparator = new DSeparator(sb0.toString());
        this.MacroRefsValue.setSeparator(this.MacroRefsSeparator);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.MacroRefsBeforeFirst = new DBeforeFirst(sb1.toString());
        this.MacroRefsValue.setBeforeFirst(this.MacroRefsBeforeFirst);
    }
    private void initMacroInitInternalsMethodDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroInitInternalsMethodSeparator = new DSeparator(sb0.toString());
        this.MacroInitInternalsMethodValue.setSeparator(this.MacroInitInternalsMethodSeparator);
    }
    private void initMacroInitDirectivesDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroInitDirectivesSeparator = new DSeparator(sb0.toString());
        this.MacroInitDirectivesValue.setSeparator(this.MacroInitDirectivesSeparator);StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.MacroInitDirectivesBeforeFirst = new DBeforeFirst(sb1.toString());
        this.MacroInitDirectivesValue.setBeforeFirst(this.MacroInitDirectivesBeforeFirst);
    }
    private void initMacroRedefinedApplyInitializerDirectives(){
        
    }
    private void initMacroMacroBuilderDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroMacroBuilderBeforeFirst = new DBeforeFirst(sb0.toString());
        this.MacroMacroBuilderValue.setBeforeFirst(this.MacroMacroBuilderBeforeFirst);
    }
    private void initMacroEmptyBuilderWithContextDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.MacroEmptyBuilderWithContextBeforeFirst = new DBeforeFirst(sb0.toString());
        this.MacroEmptyBuilderWithContextValue.setBeforeFirst(this.MacroEmptyBuilderWithContextBeforeFirst);
    }
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setMacro(this);
     }
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("Macro");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
    
    initPackageDeclarationDirectives();
    initMacroFieldsDirectives();
    initMacroContextFieldDirectives();
    initMacroConstructorDirectives();
    initMacroSettersDirectives();
    initMacroBuildersDirectives();
    initMacroRefsDirectives();
    initMacroInitInternalsMethodDirectives();
    initMacroInitDirectivesDirectives();
    initMacroRedefinedApplyInitializerDirectives();
    initMacroMacroBuilderDirectives();
    initMacroEmptyBuilderWithContextDirectives();
    
    initPackageDeclarationInternals(null);
    initMacroFieldsInternals(null);
    initMacroContextFieldInternals(null);
    initMacroConstructorInternals(null);
    initMacroSettersInternals(null);
    initMacroBuildersInternals(null);
    initMacroRefsInternals(null);
    initMacroInitInternalsMethodInternals(null);
    initMacroInitDirectivesInternals(null);
    initMacroRedefinedApplyInitializerInternals(null);
    initMacroMacroBuilderInternals(null);
    initMacroEmptyBuilderWithContextInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_1 = new MHeader();
        
        
        sb0.append(minsert_1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildPackageDeclaration());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        MImportJavaUtil minsert_2 = new MImportJavaUtil();
        
        
        sb0.append(minsert_2.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("public class M");
        sb0.append(buildName());
        sb0.append(" extends Macro");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        sbIndentation = new StringBuilder();
        sbIndentation.append("    ");
        indentations.add(sbIndentation.toString());
        sb1.append(buildMacroFields());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroContextField());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroConstructor());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroSetters());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroBuilders());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroRefs());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroInitInternalsMethod());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroInitDirectives());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroRedefinedApplyInitializer());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroMacroBuilder());
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildMacroEmptyBuilderWithContext());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append("    private String applyIndent(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                            String macro,");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                            String indent)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            StringBuilder sb = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String[] lines = macro.split( \"\\n\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(lines.length > 1)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                for(int i = 0; i < lines.length; i++)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    String line = lines[i];");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    sb.append(indent).append(line);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    if(i < lines.length - 1)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                        sb.append(LINE_SEPARATOR);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            else");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                sb.append(indent).append(macro);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            return sb.toString();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
     String build(Context context) {
         return build();
     }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}