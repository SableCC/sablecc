/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MNewDirective extends Macro{

    private String field_DirectiveName;
    private String field_IndexBuilder;
    private final List<Macro> list_ListParts;
    private DSeparator ListPartsSeparator;

    private DBeforeFirst ListPartsBeforeFirst;

    private DAfterLast ListPartsAfterLast;

    private DNone ListPartsNone;
    private final InternalValue ListPartsValue;
    private Map<Context, String> field_ParamName = new LinkedHashMap<>();

    private final Context ListPartsContext = new Context();

    public MNewDirective(String pDirectiveName, String pIndexBuilder){

        this.setPDirectiveName(pDirectiveName);        this.setPIndexBuilder(pIndexBuilder);

    this.list_ListParts = new ArrayList<>();

    this.ListPartsValue = new InternalValue(this.list_ListParts, this.ListPartsContext);
    }

    private void setPDirectiveName( String pDirectiveName ){
        if(pDirectiveName == null){
            throw ObjectMacroException.parameterNull("DirectiveName");
        }

        this.field_DirectiveName = pDirectiveName;
    }
    private void setPIndexBuilder( String pIndexBuilder ){
        if(pIndexBuilder == null){
            throw ObjectMacroException.parameterNull("IndexBuilder");
        }

        this.field_IndexBuilder = pIndexBuilder;
    }
    public void addListParts(MStringPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
        

        this.list_ListParts.add(macro);
    }
    public void addListParts(MParamInsertPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
        

        this.list_ListParts.add(macro);
    }
    public void addListParts(MEolPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
        

        this.list_ListParts.add(macro);
    }
    public void addListParts(MInsertMacroPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
        

        this.list_ListParts.add(macro);
    }
    void setParamName(
            Context context,
            String value) {

        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }

        this.field_ParamName.put(context, value);
    }

    private String buildDirectiveName(){

        return this.field_DirectiveName;
    }
    private String buildIndexBuilder(){

        return this.field_IndexBuilder;
    }
    private String buildListParts(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListPartsContext;
        List<Macro> macros = this.list_ListParts;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListPartsNone != null){
            sb.append(this.ListPartsNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListPartsBeforeFirst != null){
                expansion = this.ListPartsBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListPartsAfterLast != null){
                expansion = this.ListPartsAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListPartsSeparator != null){
                expansion = this.ListPartsSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }
    private String buildParamName(Context context){

        return this.field_ParamName.get(context);
    }

    private String getDirectiveName(){

        return this.field_DirectiveName;
    }
    private String getIndexBuilder(){

        return this.field_IndexBuilder;
    }
    private InternalValue getListParts(){
        return this.ListPartsValue;
    }
    private String getParamName(Context context){

        return this.field_ParamName.get(context);
    }
    private void initListPartsInternals(Context context){
        for(Macro macro : this.list_ListParts){
            macro.apply(new InternalsInitializer("ListParts"){
@Override
void setStringPart(MStringPart mStringPart){

    
    
}@Override
void setParamInsertPart(MParamInsertPart mParamInsertPart){

    
    
}@Override
void setEolPart(MEolPart mEolPart){

    
    
}@Override
void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){

    
    
}
});
        }
    }

    private void initListPartsDirectives(){
        
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setNewDirective(this);
    }

   @Override
    public String build(Context context){

        BuildState buildState = this.build_states.get(context);

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("NewDirective");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_states.put(context, buildState);

        initListPartsDirectives();

        initListPartsInternals(context);

        StringBuilder sb0 = new StringBuilder();

        sb0.append("StringBuilder sb");
        sb0.append(buildIndexBuilder());
        sb0.append(" = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListParts());
        sb0.append(LINE_SEPARATOR);
        sb0.append("this.");
        sb0.append(buildParamName(context));
        sb0.append(buildDirectiveName());
        sb0.append(" = new D");
        sb0.append(buildDirectiveName());
        sb0.append("(sb");
        sb0.append(buildIndexBuilder());
        sb0.append(".toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("this.");
        sb0.append(buildParamName(context));
        sb0.append("Value.set");
        sb0.append(buildDirectiveName());
        sb0.append("(this.");
        sb0.append(buildParamName(context));
        sb0.append(buildDirectiveName());
        sb0.append(");");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }

}