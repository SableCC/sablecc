/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public  class MNewDirective extends Macro{
    
    String field_DirectiveName;
    
    String field_IndexBuilder;
    
    final List<Macro> list_TextParts;
    
    final Context TextPartsContext = new Context();
    
    final InternalValue TextPartsValue;
    
    private DSeparator TextPartsSeparator;
    
    private DBeforeFirst TextPartsBeforeFirst;
    
    private DAfterLast TextPartsAfterLast;
    
    private DNone TextPartsNone;
    
    private Map<Context, String> field_ParamName = new LinkedHashMap<>();
    
    MNewDirective(String pDirectiveName, String pIndexBuilder, Macros macros){
        
        
        this.setMacros(macros);
        this.setPDirectiveName(pDirectiveName);
        this.setPIndexBuilder(pIndexBuilder);
        this.list_TextParts = new LinkedList<>();
        
        this.TextPartsValue = new InternalValue(this.list_TextParts, this.TextPartsContext);
    }
    
    private void setPDirectiveName( String pDirectiveName ){
        if(pDirectiveName == null){
            throw ObjectMacroException.parameterNull("DirectiveName");
        }
    
        this.field_DirectiveName = pDirectiveName;
    }
    
    private void setPIndexBuilder( String pIndexBuilder ){
        if(pIndexBuilder == null){
            throw ObjectMacroException.parameterNull("IndexBuilder");
        }
    
        this.field_IndexBuilder = pIndexBuilder;
    }
    
    public void addAllTextParts(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("TextParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("NewDirective");
        }
        
        int i = 0;
        
        for(Macro macro: macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "TextParts");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeTextParts(macro);
            this.list_TextParts.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeTextParts (Macro macro) {
        macro.apply(new InternalsInitializer("TextParts"){
            @Override
            void setStringPart(MStringPart mStringPart){
            
                
                
            }
            
            @Override
            void setParamInsertPart(MParamInsertPart mParamInsertPart){
            
                
                
            }
            
            @Override
            void setEolPart(MEolPart mEolPart){
            
                
                
            }
            
            @Override
            void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
            
                
                
            }
        });
    }
    
    public void addTextParts(MStringPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("TextParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("NewDirective");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_TextParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addTextParts(MParamInsertPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("TextParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("NewDirective");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_TextParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addTextParts(MEolPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("TextParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("NewDirective");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_TextParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addTextParts(MInsertMacroPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("TextParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("NewDirective");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_TextParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
        void setParamName(
                Context context,
                String value) {
    
            if(value == null){
                throw new RuntimeException("value cannot be null here");
            }
    
            this.field_ParamName.put(context, value);
        }
    
    String buildDirectiveName(){
    
        return this.field_DirectiveName;
    }
    
    String buildIndexBuilder(){
    
        return this.field_IndexBuilder;
    }
    
    private String buildTextParts(){
        StringBuilder sb = new StringBuilder();
        Context local_context = TextPartsContext;
        List<Macro> macros = this.list_TextParts;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.TextPartsNone != null){
            sb.append(this.TextPartsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro: macros){
            expansion = macro.build(local_context);
    
            if(this.TextPartsBeforeFirst != null){
                expansion = this.TextPartsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.TextPartsAfterLast != null){
                expansion = this.TextPartsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.TextPartsSeparator != null){
                expansion = this.TextPartsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    String buildParamName(Context context){
    
        return this.field_ParamName.get(context);
    }
    
    String getDirectiveName(){
    
        return this.field_DirectiveName;
    }
    
    String getIndexBuilder(){
    
        return this.field_IndexBuilder;
    }
    
    private InternalValue getTextParts(){
        return this.TextPartsValue;
    }
    
    String getParamName(Context context){
    
        return this.field_ParamName.get(context);
    }
    private void initTextPartsInternals(Context context){
        for(Macro macro : this.list_TextParts){
            macro.apply(new InternalsInitializer("TextParts"){
                @Override
                void setStringPart(MStringPart mStringPart){
                
                    
                    
                }
                
                @Override
                void setParamInsertPart(MParamInsertPart mParamInsertPart){
                
                    
                    
                }
                
                @Override
                void setEolPart(MEolPart mEolPart){
                
                    
                    
                }
                
                @Override
                void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
                
                    
                    
                }
            });
        }
    }
    
    private void initTextPartsDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.TextPartsSeparator = new DSeparator(sb1.toString());
        this.TextPartsValue.setSeparator(this.TextPartsSeparator);
    }
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setNewDirective(this);
     }
    
    @Override
    public String build(Context context){
    
        CacheBuilder cache_builder = this.cacheBuilders.get(context);
    
        if(cache_builder == null){
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null){
            throw new InternalException("Cycle detection detected lately");
        }
        else{
            return cache_builder.getExpansion();
        }
        this.cacheBuilders.put(context, cache_builder);
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initTextPartsDirectives();
        
        initTextPartsInternals(context);
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("StringBuilder sb");
        sb0.append(buildIndexBuilder());
        sb0.append(" = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildTextParts());
        sb0.append(LINE_SEPARATOR);
        sb0.append("this.");
        sb0.append(buildParamName(context));
        sb0.append(buildDirectiveName());
        sb0.append(" = new D");
        sb0.append(buildDirectiveName());
        sb0.append("(sb");
        sb0.append(buildIndexBuilder());
        sb0.append(".toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("this.");
        sb0.append(buildParamName(context));
        sb0.append("Value.set");
        sb0.append(buildDirectiveName());
        sb0.append("(this.");
        sb0.append(buildParamName(context));
        sb0.append(buildDirectiveName());
        sb0.append(");");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}