/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MMacroCaseInit extends Macro {
    
    private DSeparator VersionSeparator;
    
    private DBeforeFirst VersionBeforeFirst;
    
    private DAfterLast VersionAfterLast;
    
    private DNone VersionNone;
    
    final List<String> list_Version;
    
    final Context VersionContext = new Context();
    
    final StringValue VersionValue;
    
    private DSeparator VersionClassNameSeparator;
    
    private DBeforeFirst VersionClassNameBeforeFirst;
    
    private DAfterLast VersionClassNameAfterLast;
    
    private DNone VersionClassNameNone;
    
    final List<String> list_VersionClassName;
    
    final Context VersionClassNameContext = new Context();
    
    final StringValue VersionClassNameValue;
    
    private Map<Context, StringValue> list_ClassName = new LinkedHashMap<>();
    
    private Map<Context, MacroValue> list_Args = new LinkedHashMap<>();
    
    MMacroCaseInit(Macros macros){
        
        this.setMacros(macros);
        this.list_Version = new LinkedList<>();
        this.list_VersionClassName = new LinkedList<>();
        this.list_ClassName = new LinkedHashMap<>();
        this.list_Args = new LinkedHashMap<>();
        
        this.VersionValue = new StringValue(this.list_Version, this.VersionContext);
        this.VersionClassNameValue = new StringValue(this.list_VersionClassName, this.VersionClassNameContext);
    }
    
    MMacroCaseInit(String pVersion, String pVersionClassName, Macros macros){
        
        this.setMacros(macros);
        this.list_Version = new LinkedList<>();
        this.list_VersionClassName = new LinkedList<>();
        this.list_ClassName = new LinkedHashMap<>();
        this.list_Args = new LinkedHashMap<>();
        
        this.VersionValue = new StringValue(this.list_Version, this.VersionContext);
        this.VersionClassNameValue = new StringValue(this.list_VersionClassName, this.VersionClassNameContext);
        
        if (pVersion != null) {
            this.addVersion(pVersion);
        }
        if (pVersionClassName != null) {
            this.addVersionClassName(pVersionClassName);
        }
    }
    
    public void addAllVersion(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Version");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Version");
            }
    
            this.list_Version.add(string);
        }
    }
    
    public void addVersion(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Version");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Version.add(string);
    }
    
    public void addAllVersionClassName(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("VersionClassName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("VersionClassName");
            }
    
            this.list_VersionClassName.add(string);
        }
    }
    
    public void addVersionClassName(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("VersionClassName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_VersionClassName.add(string);
    }
    
    void setClassName(
            Context context,
            StringValue value) {
    
        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }
    
        this.list_ClassName.put(context, value);
    }
    
    void setArgs(
                Context context,
                MacroValue macro_value) {
    
        if(macro_value == null){
            throw new RuntimeException("macros cannot be null");
        }
    
        this.list_Args.put(context, macro_value);
    }
    
    private String buildVersion() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Version;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildVersionClassName() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_VersionClassName;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildClassName(Context context) {
    
        StringValue stringValue = this.list_ClassName.get(context);
        return stringValue.build();
    }
    
    private String buildArgs(Context context) {
    
        MacroValue macros = this.list_Args.get(context);
        return macros.build();
    }
    
    StringValue getVersion() {
        return this.VersionValue;
    }
    
    StringValue getVersionClassName() {
        return this.VersionClassNameValue;
    }
    
    private StringValue getClassName(Context context) {
    
        return this.list_ClassName.get(context);
    }
    
    private MacroValue getArgs(Context context) {
        return this.list_Args.get(context);
    }
    
    private void initVersionDirectives() {
        
    }
    
    private void initVersionClassNameDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setMacroCaseInit(this);
    }
    
    
    String build(Context context) {
    
        CacheBuilder cache_builder = this.cacheBuilders.get(context);
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        
    this.cacheBuilders.put(context, cache_builder);
        List<String> indentations = new LinkedList<>();
    
        
        initVersionDirectives();
        initVersionClassNameDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("case ");
        sb0.append(buildVersion());
        sb0.append(" :");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    m");
        sb0.append(buildClassName(context));
        sb0.append(" = new M");
        sb0.append(buildVersionClassName());
        sb0.append("(");
        sb0.append(buildArgs(context));
        sb0.append("this);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    break;");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}