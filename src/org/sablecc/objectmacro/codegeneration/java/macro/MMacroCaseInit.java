/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public  class MMacroCaseInit extends Macro{
    
    String field_Version;
    
    String field_VersionClassName;
    
    private Map<Context, String> field_ClassName = new LinkedHashMap<>();
    
    private Map<Context, InternalValue> list_Args = new LinkedHashMap<>();
    
    MMacroCaseInit(String pVersion, String pVersionClassName, Macros macros){
        
        
        this.setMacros(macros);
        this.setPVersion(pVersion);
        this.setPVersionClassName(pVersionClassName);
    }
    
    private void setPVersion( String pVersion ){
        if(pVersion == null){
            throw ObjectMacroException.parameterNull("Version");
        }
    
        this.field_Version = pVersion;
    }
    
    private void setPVersionClassName( String pVersionClassName ){
        if(pVersionClassName == null){
            throw ObjectMacroException.parameterNull("VersionClassName");
        }
    
        this.field_VersionClassName = pVersionClassName;
    }
    
        void setClassName(
                Context context,
                String value) {
    
            if(value == null){
                throw new RuntimeException("value cannot be null here");
            }
    
            this.field_ClassName.put(context, value);
        }
    
        void setArgs(
                    Context context,
                    InternalValue internal_value) {
    
                if(internal_value == null){
                    throw new RuntimeException("macros cannot be null");
                }
    
                this.list_Args.put(context, internal_value);
            }
    
    String buildVersion(){
    
        return this.field_Version;
    }
    
    String buildVersionClassName(){
    
        return this.field_VersionClassName;
    }
    
    String buildClassName(Context context){
    
        return this.field_ClassName.get(context);
    }
    
    private String buildArgs(Context context){
    
        InternalValue macros = this.list_Args.get(context);
        return macros.build();
    }
    
    String getVersion(){
    
        return this.field_Version;
    }
    
    String getVersionClassName(){
    
        return this.field_VersionClassName;
    }
    
    String getClassName(Context context){
    
        return this.field_ClassName.get(context);
    }
    
    private InternalValue getArgs(Context context){
        return this.list_Args.get(context);
    }
    
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setMacroCaseInit(this);
     }
    
    @Override
    public String build(Context context){
    
        CacheBuilder cache_builder = this.cacheBuilders.get(context);
    
        if(cache_builder == null){
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null){
            throw new InternalException("Cycle detection detected lately");
        }
        else{
            return cache_builder.getExpansion();
        }
        this.cacheBuilders.put(context, cache_builder);
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        
    
    
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("case ");
        sb0.append(buildVersion());
        sb0.append(" :");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    m");
        sb0.append(buildClassName(context));
        sb0.append(" = new M");
        sb0.append(buildVersionClassName());
        sb0.append("(");
        sb0.append(buildArgs(context));
        sb0.append(" this);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    break;");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}