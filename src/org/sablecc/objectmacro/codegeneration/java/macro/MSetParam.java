/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

public class MSetParam extends Macro{

    private String field_Name;

    private Macro list_ListParamArg[];

    private final Context ListParamArgContext = new Context();

    public MSetParam(String pName, Macro pListParamArg[]){

        this.setPName(pName);
        this.setPListParamArg(pListParamArg);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }

        this.field_Name = pName;
    }

    private void setPListParamArg(Macro pListParamArg[]){
        if(pListParamArg == null){
            throw ObjectMacroException.parameterNull("ListParamArg");
        }

        Macro macros[] = pListParamArg;
        this.list_ListParamArg = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ListParamArg");
            }

            macro.apply(new InternalsInitializer("ListParamArg"){
@Override
void setParamArg(MParamArg mParamArg){

        }
});

            this.list_ListParamArg[i++] = macro;

        }
    }

    private String buildName(){

        return this.field_Name;
    }

    private String buildListParamArg(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ListParamArgContext;
        Macro macros[] = this.list_ListParamArg;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String getName(){

        return this.field_Name;
    }

    private Macro[] getListParamArg(){

        return this.list_ListParamArg;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setSetParam(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("        this.setP");
        sb0.append(buildName());
        sb0.append("(");
        sb0.append(buildListParamArg());
        sb0.append(");");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
