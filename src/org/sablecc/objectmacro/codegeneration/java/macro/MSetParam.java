/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public  class MSetParam extends Macro{
    
    String field_Name;
    
    final List<Macro> list_SetParam;
    
    final Context SetParamContext = new Context();
    
    final InternalValue SetParamValue;
    
    private DSeparator SetParamSeparator;
    
    private DBeforeFirst SetParamBeforeFirst;
    
    private DAfterLast SetParamAfterLast;
    
    private DNone SetParamNone;
    
    MSetParam(String pName, Macros macros){
        
        
        this.setMacros(macros);
        this.setPName(pName);
        this.list_SetParam = new LinkedList<>();
        
        this.SetParamValue = new InternalValue(this.list_SetParam, this.SetParamContext);
    }
    
    private void setPName( String pName ){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }
    
        this.field_Name = pName;
    }
    
    public void addAllSetParam(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("SetParam");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("SetParam");
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "SetParam");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeSetParam(macro);
            this.list_SetParam.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeSetParam (Macro macro) {
        macro.apply(new InternalsInitializer("SetParam"){
            @Override
            void setParamArg(MParamArg mParamArg){
            
                
                
            }
        });
    }
    
    public void addSetParam(MParamArg macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("SetParam");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("SetParam");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_SetParam.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    String buildName(){
    
        return this.field_Name;
    }
    
    private String buildSetParam(){
        StringBuilder sb = new StringBuilder();
        Context local_context = SetParamContext;
        List<Macro> macros = this.list_SetParam;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.SetParamNone != null){
            sb.append(this.SetParamNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.SetParamBeforeFirst != null){
                expansion = this.SetParamBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.SetParamAfterLast != null){
                expansion = this.SetParamAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.SetParamSeparator != null){
                expansion = this.SetParamSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    String getName(){
    
        return this.field_Name;
    }
    
    private InternalValue getSetParam(){
        return this.SetParamValue;
    }
    private void initSetParamInternals(Context context){
        for(Macro macro : this.list_SetParam){
            macro.apply(new InternalsInitializer("SetParam"){
                @Override
                void setParamArg(MParamArg mParamArg){
                
                    
                    
                }
            });
        }
    }
    
    private void initSetParamDirectives(){
        
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer){
    
        internalsInitializer.setSetParam(this);
    }
    
    
    public String build(){
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null){
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null){
            throw new InternalException("Cycle detection detected lately");
        }
        else{
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initSetParamDirectives();
        
        initSetParamInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("this.setP");
        sb0.append(buildName());
        sb0.append("(");
        sb0.append(buildSetParam());
        sb0.append(");");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}