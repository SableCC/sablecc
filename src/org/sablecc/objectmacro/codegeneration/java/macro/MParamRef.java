/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MParamRef extends Macro {
    
    private DSeparator NameSeparator;
    
    private DBeforeFirst NameBeforeFirst;
    
    private DAfterLast NameAfterLast;
    
    private DNone NameNone;
    
    final List<String> list_Name;
    
    final Context NameContext = new Context();
    
    final StringValue NameValue;
    
    private DSeparator GetParamsSeparator;
    
    private DBeforeFirst GetParamsBeforeFirst;
    
    private DAfterLast GetParamsAfterLast;
    
    private DNone GetParamsNone;
    
    final List<String> list_GetParams;
    
    final Context GetParamsContext = new Context();
    
    final StringValue GetParamsValue;
    
    MParamRef(Macros macros){
        
        this.setMacros(macros);
        this.list_Name = new LinkedList<>();
        this.list_GetParams = new LinkedList<>();
        
        this.NameValue = new StringValue(this.list_Name, this.NameContext);
        this.GetParamsValue = new StringValue(this.list_GetParams, this.GetParamsContext);
    }
    
    MParamRef(String pName, String pGetParams, Macros macros){
        
        this.setMacros(macros);
        this.list_Name = new LinkedList<>();
        this.list_GetParams = new LinkedList<>();
        
        this.NameValue = new StringValue(this.list_Name, this.NameContext);
        this.GetParamsValue = new StringValue(this.list_GetParams, this.GetParamsContext);
        
        if (pName != null) {
            this.addName(pName);
        }
        if (pGetParams != null) {
            this.addGetParams(pGetParams);
        }
    }
    
    public void addAllName(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Name");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Name");
            }
    
            this.list_Name.add(string);
        }
    }
    
    public void addName(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Name");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Name.add(string);
    }
    
    public void addAllGetParams(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("GetParams");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("GetParams");
            }
    
            this.list_GetParams.add(string);
        }
    }
    
    public void addGetParams(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("GetParams");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_GetParams.add(string);
    }
    
    private String buildName() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Name;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.NameNone != null) {
            sb.append(this.NameNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.NameBeforeFirst != null) {
                string = this.NameBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.NameAfterLast != null) {
                string = this.NameAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.NameSeparator != null) {
                string = this.NameSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildGetParams() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_GetParams;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.GetParamsNone != null) {
            sb.append(this.GetParamsNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.GetParamsBeforeFirst != null) {
                string = this.GetParamsBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.GetParamsAfterLast != null) {
                string = this.GetParamsAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.GetParamsSeparator != null) {
                string = this.GetParamsSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getName() {
        return this.NameValue;
    }
    
    StringValue getGetParams() {
        return this.GetParamsValue;
    }
    
    private void initNameDirectives() {
        
    }
    
    private void initGetParamsDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setParamRef(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initNameDirectives();
        initGetParamsDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("get");
        sb0.append(buildName());
        sb0.append("(");
        sb0.append(buildGetParams());
        sb0.append(")");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}