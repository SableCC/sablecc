/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public  class MInitDirectives extends Macro{
    
    String field_ParamName;
    
    final List<Macro> list_NewDirectives;
    
    final Context NewDirectivesContext = new Context();
    
    final InternalValue NewDirectivesValue;
    
    private DSeparator NewDirectivesSeparator;
    
    private DBeforeFirst NewDirectivesBeforeFirst;
    
    private DAfterLast NewDirectivesAfterLast;
    
    private DNone NewDirectivesNone;
    
    public MInitDirectives(String pParamName, Macros macros){
        
        
        this.setMacros(macros);
        this.setPParamName(pParamName);
        this.list_NewDirectives = new LinkedList<>();
        
        this.NewDirectivesValue = new InternalValue(this.list_NewDirectives, this.NewDirectivesContext);
    }
    
    private void setPParamName( String pParamName ){
        if(pParamName == null){
            throw ObjectMacroException.parameterNull("ParamName");
        }
    
        this.field_ParamName = pParamName;
    }
    
    public void addAllNewDirectives(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("NewDirectives");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("InitDirectives");
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "NewDirectives");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeNewDirectives(macro);
            this.list_NewDirectives.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeNewDirectives (Macro macro) {
        macro.apply(new InternalsInitializer("NewDirectives"){
            @Override
            void setNewDirective(MNewDirective mNewDirective){
            
                
                
            }
        });
    }
    
    public void addNewDirectives(MNewDirective macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("NewDirectives");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("InitDirectives");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_NewDirectives.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    String buildParamName(){
    
        return this.field_ParamName;
    }
    
    private String buildNewDirectives(){
        StringBuilder sb = new StringBuilder();
        Context local_context = NewDirectivesContext;
        List<Macro> macros = this.list_NewDirectives;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.NewDirectivesNone != null){
            sb.append(this.NewDirectivesNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.NewDirectivesBeforeFirst != null){
                expansion = this.NewDirectivesBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.NewDirectivesAfterLast != null){
                expansion = this.NewDirectivesAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.NewDirectivesSeparator != null){
                expansion = this.NewDirectivesSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    String getParamName(){
    
        return this.field_ParamName;
    }
    
    private InternalValue getNewDirectives(){
        return this.NewDirectivesValue;
    }
    private void initNewDirectivesInternals(Context context){
        for(Macro macro : this.list_NewDirectives){
            macro.apply(new InternalsInitializer("NewDirectives"){
                @Override
                void setNewDirective(MNewDirective mNewDirective){
                
                    
                    mNewDirective.setParamName(NewDirectivesContext, getParamName());
                }
            });
        }
    }
    
    private void initNewDirectivesDirectives(){
        
    }
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setInitDirectives(this);
     }
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("InitDirectives");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initNewDirectivesDirectives();
        
        initNewDirectivesInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("private void init");
        sb0.append(buildParamName());
        sb0.append("Directives()");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        sb2.append("    ");
        indentations.add(sb2.toString());
        sb1.append(buildNewDirectives());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
     return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}