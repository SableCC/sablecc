/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MInternalsInitializer extends Macro {
    
    private DSeparator PackageDeclarationSeparator;
    
    private DBeforeFirst PackageDeclarationBeforeFirst;
    
    private DAfterLast PackageDeclarationAfterLast;
    
    private DNone PackageDeclarationNone;
    
    final List<Macro> list_PackageDeclaration;
    
    final Context PackageDeclarationContext = new Context();
    
    final MacroValue PackageDeclarationValue;
    
    private DSeparator ParentInternalSettersSeparator;
    
    private DBeforeFirst ParentInternalSettersBeforeFirst;
    
    private DAfterLast ParentInternalSettersAfterLast;
    
    private DNone ParentInternalSettersNone;
    
    final List<Macro> list_ParentInternalSetters;
    
    final Context ParentInternalSettersContext = new Context();
    
    final MacroValue ParentInternalSettersValue;
    
    MInternalsInitializer(Macros macros){
        
        this.setMacros(macros);
        this.list_PackageDeclaration = new LinkedList<>();
        this.list_ParentInternalSetters = new LinkedList<>();
        
        this.PackageDeclarationValue = new MacroValue(this.list_PackageDeclaration, this.PackageDeclarationContext);
        this.ParentInternalSettersValue = new MacroValue(this.list_ParentInternalSetters, this.ParentInternalSettersContext);
    }
    
    MInternalsInitializer(List<Macro> pPackageDeclaration, List<Macro> pParentInternalSetters, Macros macros){
        
        this.setMacros(macros);
        this.list_PackageDeclaration = new LinkedList<>();
        this.list_ParentInternalSetters = new LinkedList<>();
        
        this.PackageDeclarationValue = new MacroValue(this.list_PackageDeclaration, this.PackageDeclarationContext);
        this.ParentInternalSettersValue = new MacroValue(this.list_ParentInternalSetters, this.ParentInternalSettersContext);
        if (pPackageDeclaration != null) {
            this.addAllPackageDeclaration(pPackageDeclaration);
        }
        if (pParentInternalSetters != null) {
            this.addAllParentInternalSetters(pParentInternalSetters);
        }
    }
    
    public void addAllPackageDeclaration(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "PackageDeclaration");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypePackageDeclaration(macro);
            this.list_PackageDeclaration.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypePackageDeclaration (Macro macro) {
        macro.apply(new InternalsInitializer("PackageDeclaration"){
            @Override
            void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
                
            
            
            }
        });
    }
    
    public void addPackageDeclaration(MPackageDeclaration macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_PackageDeclaration.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllParentInternalSetters(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ParentInternalSetters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "ParentInternalSetters");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeParentInternalSetters(macro);
            this.list_ParentInternalSetters.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeParentInternalSetters (Macro macro) {
        macro.apply(new InternalsInitializer("ParentInternalSetters"){
            @Override
            void setParentInternalsSetter(MParentInternalsSetter mParentInternalsSetter){
                
            
            
            }
        });
    }
    
    public void addParentInternalSetters(MParentInternalsSetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ParentInternalSetters");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_ParentInternalSetters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    private String buildPackageDeclaration() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.PackageDeclarationContext;
        List<Macro> macros = this.list_PackageDeclaration;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        if(this.PackageDeclarationBeforeFirst == null) {
            initPackageDeclarationDirectives();
        }
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            expansion = this.PackageDeclarationBeforeFirst.apply(i, expansion, nb_macros);
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildParentInternalSetters() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.ParentInternalSettersContext;
        List<Macro> macros = this.list_ParentInternalSetters;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        if(this.ParentInternalSettersSeparator == null) {
            initParentInternalSettersDirectives();
        }
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            expansion = this.ParentInternalSettersSeparator.apply(i, expansion, nb_macros);
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    MacroValue getPackageDeclaration() {
        return this.PackageDeclarationValue;
    }
    
    MacroValue getParentInternalSetters() {
        return this.ParentInternalSettersValue;
    }
    
    private void initPackageDeclarationInternals(Context context) {
        for(Macro macro : this.list_PackageDeclaration) {
            macro.apply(new InternalsInitializer("PackageDeclaration"){
                @Override
                void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
                    
                
                
                }
            });
        }
    }
    
    private void initParentInternalSettersInternals(Context context) {
        for(Macro macro : this.list_ParentInternalSetters) {
            macro.apply(new InternalsInitializer("ParentInternalSetters"){
                @Override
                void setParentInternalsSetter(MParentInternalsSetter mParentInternalsSetter){
                    
                
                
                }
            });
        }
    }
    
    private void initPackageDeclarationDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.PackageDeclarationBeforeFirst = new DBeforeFirst(sb1.toString());
        this.PackageDeclarationValue.setBeforeFirst(this.PackageDeclarationBeforeFirst);
    }
    
    private void initParentInternalSettersDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        this.ParentInternalSettersSeparator = new DSeparator(sb1.toString());
        this.ParentInternalSettersValue.setSeparator(this.ParentInternalSettersSeparator);
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setInternalsInitializer(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initPackageDeclarationInternals(null);
        initParentInternalSettersInternals(null);
        
        initPackageDeclarationDirectives();
        initParentInternalSettersDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        MHeader m1 = this.getMacros().newHeader();
        
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildPackageDeclaration());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("class InternalsInitializer ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    private final String _paramName;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    InternalsInitializer(String paramName) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this._paramName = paramName;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        sb2.append("    ");
        indentations.add(sb2.toString());
        sb1.append(buildParentInternalSetters());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setObjectMacroUserErrorHead(MObjectMacroUserErrorHead mObjectMacroUserErrorHead) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MObjectMacroUserErrorHead\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorIncorrectType(MUserErrorIncorrectType mUserErrorIncorrectType) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorIncorrectType\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorMacroNullInList(MUserErrorMacroNullInList mUserErrorMacroNullInList) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorMacroNullInList\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorCyclicReference(MUserErrorCyclicReference mUserErrorCyclicReference) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorCyclicReference\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorParameterNull(MUserErrorParameterNull mUserErrorParameterNull) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorParameterNull\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorCannotModify(MUserErrorCannotModify mUserErrorCannotModify) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorCannotModify\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorVersionNull(MUserErrorVersionNull mUserErrorVersionNull) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorVersionNull\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorVersionsDifferent(MUserErrorVersionsDifferent mUserErrorVersionsDifferent) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorVersionsDifferent\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorInternalException(MUserErrorInternalException mUserErrorInternalException) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorInternalException\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}