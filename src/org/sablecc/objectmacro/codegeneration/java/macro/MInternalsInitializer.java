/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MInternalsInitializer extends Macro{
    
    private final List<Macro> list_PackageDeclaration;
    
    private DSeparator PackageDeclarationSeparator;
    
    private DBeforeFirst PackageDeclarationBeforeFirst;
    
    private DAfterLast PackageDeclarationAfterLast;
    
    private DNone PackageDeclarationNone;
    
    private final InternalValue PackageDeclarationValue;
    
    private final List<Macro> list_ParentInternalSetters;
    
    private DSeparator ParentInternalSettersSeparator;
    
    private DBeforeFirst ParentInternalSettersBeforeFirst;
    
    private DAfterLast ParentInternalSettersAfterLast;
    
    private DNone ParentInternalSettersNone;
    
    private final InternalValue ParentInternalSettersValue;
    
    
    private final Context PackageDeclarationContext = new Context();
    
    private final Context ParentInternalSettersContext = new Context();
    
    
    public MInternalsInitializer(){
    
        this.list_PackageDeclaration = new ArrayList<>();
        this.list_ParentInternalSetters = new ArrayList<>();
    
        this.PackageDeclarationValue = new InternalValue(this.list_PackageDeclaration, this.PackageDeclarationContext);
        this.ParentInternalSettersValue = new InternalValue(this.list_ParentInternalSetters, this.ParentInternalSettersContext);
    }
    
    
    public void addPackageDeclaration(MPackageDeclaration macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("PackageDeclaration");
                }
    
        this.list_PackageDeclaration.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addParentInternalSetters(MParentInternalsSetter macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ParentInternalSetters");
        }
                if(this.build_state != null){
                    throw ObjectMacroException.cannotModify("ParentInternalsSetter");
                }
    
        this.list_ParentInternalSetters.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    
    private String buildPackageDeclaration(){
        StringBuilder sb = new StringBuilder();
        Context local_context = PackageDeclarationContext;
        List<Macro> macros = this.list_PackageDeclaration;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.PackageDeclarationNone != null){
            sb.append(this.PackageDeclarationNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.PackageDeclarationBeforeFirst != null){
                expansion = this.PackageDeclarationBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.PackageDeclarationAfterLast != null){
                expansion = this.PackageDeclarationAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.PackageDeclarationSeparator != null){
                expansion = this.PackageDeclarationSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildParentInternalSetters(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ParentInternalSettersContext;
        List<Macro> macros = this.list_ParentInternalSetters;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.ParentInternalSettersNone != null){
            sb.append(this.ParentInternalSettersNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.ParentInternalSettersBeforeFirst != null){
                expansion = this.ParentInternalSettersBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.ParentInternalSettersAfterLast != null){
                expansion = this.ParentInternalSettersAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.ParentInternalSettersSeparator != null){
                expansion = this.ParentInternalSettersSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    
    private InternalValue getPackageDeclaration(){
        return this.PackageDeclarationValue;
    }
    
    private InternalValue getParentInternalSetters(){
        return this.ParentInternalSettersValue;
    }
    
    private void initPackageDeclarationInternals(Context context){
        for(Macro macro : this.list_PackageDeclaration){
            macro.apply(new InternalsInitializer("PackageDeclaration"){
                @Override
                void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
                
                    
                    
                }
            });
        }
    }
    
    private void initParentInternalSettersInternals(Context context){
        for(Macro macro : this.list_ParentInternalSetters){
            macro.apply(new InternalsInitializer("ParentInternalSetters"){
                @Override
                void setParentInternalsSetter(MParentInternalsSetter mParentInternalsSetter){
                
                    
                    
                }
            });
        }
    }
    
    
    private void initPackageDeclarationDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);
        this.PackageDeclarationBeforeFirst = new DBeforeFirst(sb0.toString());
        this.PackageDeclarationValue.setBeforeFirst(this.PackageDeclarationBeforeFirst);
    }
    
    private void initParentInternalSettersDirectives(){
        StringBuilder sb0 = new StringBuilder();
        sb0.append(LINE_SEPARATOR);sb0.append(LINE_SEPARATOR);
        this.ParentInternalSettersSeparator = new DSeparator(sb0.toString());
        this.ParentInternalSettersValue.setSeparator(this.ParentInternalSettersSeparator);
    }
    
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setInternalsInitializer(this);
     }
    
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("InternalsInitializer");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initPackageDeclarationDirectives();
        initParentInternalSettersDirectives();
        
        initPackageDeclarationInternals(null);
        initParentInternalSettersInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        MHeader minsert_1 = new MHeader();
        
        
        sb0.append(minsert_1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildPackageDeclaration());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("class InternalsInitializer ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    private final String _paramName;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    InternalsInitializer(String paramName)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        this._paramName = paramName;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        sbIndentation = new StringBuilder();
        sbIndentation.append("    ");
        indentations.add(sbIndentation.toString());
        sb1.append(buildParentInternalSetters());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setObjectMacroUserErrorHead(MObjectMacroUserErrorHead mObjectMacroUserErrorHead)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MObjectMacroUserErrorHead\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorIncorrectType(MUserErrorIncorrectType mUserErrorIncorrectType)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorIncorrectType\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorMacroNullInList(MUserErrorMacroNullInList mUserErrorMacroNullInList)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorMacroNullInList\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorCyclicReference(MUserErrorCyclicReference mUserErrorCyclicReference)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorCyclicReference\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorParameterNull(MUserErrorParameterNull mUserErrorParameterNull)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorParameterNull\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorCannotModify(MUserErrorCannotModify mUserErrorCannotModify)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorCannotModify\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorVersionNull(MUserErrorVersionNull mUserErrorVersionNull)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorVersionNull\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorVersionsDifferent(MUserErrorVersionsDifferent mUserErrorVersionsDifferent)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorVersionsDifferent\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    void setUserErrorInternalException(MUserErrorInternalException mUserErrorInternalException)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw ObjectMacroException.incorrectType(\"MUserErrorInternalException\", this._paramName);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    
    @Override
    String build(Context context) {
     return build();
    }
    private String applyIndent(
                            String macro,
                            String indent){

            StringBuilder sb = new StringBuilder();
            String[] lines = macro.split( "\n");

            if(lines.length > 1){
                for(int i = 0; i < lines.length; i++){
                    String line = lines[i];
                    sb.append(indent).append(line);

                    if(i < lines.length - 1){
                        sb.append(LINE_SEPARATOR);
                    }
                }
            }
            else{
                sb.append(indent).append(macro);
            }

            return sb.toString();
    }
}