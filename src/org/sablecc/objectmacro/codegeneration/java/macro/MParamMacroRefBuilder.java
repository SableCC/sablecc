/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MParamMacroRefBuilder extends Macro {
    
    private DSeparator NameSeparator;
    
    private DBeforeFirst NameBeforeFirst;
    
    private DAfterLast NameAfterLast;
    
    private DNone NameNone;
    
    final List<String> list_Name;
    
    final Context NameContext = new Context();
    
    final StringValue NameValue;
    
    private DSeparator ContextNameSeparator;
    
    private DBeforeFirst ContextNameBeforeFirst;
    
    private DAfterLast ContextNameAfterLast;
    
    private DNone ContextNameNone;
    
    final List<String> list_ContextName;
    
    final Context ContextNameContext = new Context();
    
    final StringValue ContextNameValue;
    
    MParamMacroRefBuilder(Macros macros){
        
        this.setMacros(macros);
        this.list_Name = new LinkedList<>();
        this.list_ContextName = new LinkedList<>();
        
        this.NameValue = new StringValue(this.list_Name, this.NameContext);
        this.ContextNameValue = new StringValue(this.list_ContextName, this.ContextNameContext);
    }
    
    MParamMacroRefBuilder(String pName, String pContextName, Macros macros){
        
        this.setMacros(macros);
        this.list_Name = new LinkedList<>();
        this.list_ContextName = new LinkedList<>();
        
        this.NameValue = new StringValue(this.list_Name, this.NameContext);
        this.ContextNameValue = new StringValue(this.list_ContextName, this.ContextNameContext);
        
        if (pName != null) {
            this.addName(pName);
        }
        if (pContextName != null) {
            this.addContextName(pContextName);
        }
    }
    
    public void addAllName(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Name");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Name");
            }
    
            this.list_Name.add(string);
        }
    }
    
    public void addName(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Name");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Name.add(string);
    }
    
    public void addAllContextName(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ContextName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("ContextName");
            }
    
            this.list_ContextName.add(string);
        }
    }
    
    public void addContextName(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("ContextName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_ContextName.add(string);
    }
    
    private String buildName() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Name;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.NameNone != null) {
            sb.append(this.NameNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.NameBeforeFirst != null) {
                string = this.NameBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.NameAfterLast != null) {
                string = this.NameAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.NameSeparator != null) {
                string = this.NameSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildContextName() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_ContextName;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.ContextNameNone != null) {
            sb.append(this.ContextNameNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.ContextNameBeforeFirst != null) {
                string = this.ContextNameBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.ContextNameAfterLast != null) {
                string = this.ContextNameAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.ContextNameSeparator != null) {
                string = this.ContextNameSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getName() {
        return this.NameValue;
    }
    
    StringValue getContextName() {
        return this.ContextNameValue;
    }
    
    private void initNameDirectives() {
        
    }
    
    private void initContextNameDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append("context");
        this.ContextNameNone = new DNone(sb1.toString());
        this.ContextNameValue.setNone(this.ContextNameNone);StringBuilder sb2 = new StringBuilder();
        sb2.append("this.");
        this.ContextNameBeforeFirst = new DBeforeFirst(sb2.toString());
        this.ContextNameValue.setBeforeFirst(this.ContextNameBeforeFirst);
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setParamMacroRefBuilder(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initNameDirectives();
        initContextNameDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("private String build");
        sb0.append(buildName());
        sb0.append("() ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    StringBuilder sb = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    Context local_context = ");
        sb0.append(buildContextName());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    List<Macro> macros = this.list_");
        sb0.append(buildName());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    int i = 0;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    int nb_macros = macros.size();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    String expansion = null;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(this.");
        sb0.append(buildName());
        sb0.append("None != null) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        sb.append(this.");
        sb0.append(buildName());
        sb0.append("None.apply(i, \"\", nb_macros));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    for(Macro macro : macros) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        expansion = macro.build(local_context);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this.");
        sb0.append(buildName());
        sb0.append("BeforeFirst != null) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            expansion = this.");
        sb0.append(buildName());
        sb0.append("BeforeFirst.apply(i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this.");
        sb0.append(buildName());
        sb0.append("AfterLast != null) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            expansion = this.");
        sb0.append(buildName());
        sb0.append("AfterLast.apply(i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this.");
        sb0.append(buildName());
        sb0.append("Separator != null) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            expansion = this.");
        sb0.append(buildName());
        sb0.append("Separator.apply(i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        sb.append(expansion);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        i++;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return sb.toString();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}