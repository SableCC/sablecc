/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

public class MParamMacroRefBuilder extends Macro{

    private String field_Name;

    private Macro list_ContextName[];

    private final Context ContextNameContext = new Context();

    public MParamMacroRefBuilder(String pName, Macro pContextName[]){

        this.setPName(pName);
        this.setPContextName(pContextName);
    }

    private void setPName(String pName){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }

        this.field_Name = pName;
    }

    private void setPContextName(Macro pContextName[]){
        if(pContextName == null){
            throw ObjectMacroException.parameterNull("ContextName");
        }

        Macro macros[] = pContextName;
        this.list_ContextName = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "ContextName");
            }

            macro.apply(new InternalsInitializer("ContextName"){
@Override
void setContextName(MContextName mContextName){

        }
});

            this.list_ContextName[i++] = macro;

        }
    }

    private String buildName(){

        return this.field_Name;
    }

    private String buildContextName(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = ContextNameContext;
        Macro macros[] = this.list_ContextName;
        if(macros.length == 0){
            sb0.append("context");
}
        boolean first = true;
        int i = 0;

        for(Macro macro : macros){
                        
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private String getName(){

        return this.field_Name;
    }

    private Macro[] getContextName(){

        return this.list_ContextName;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setParamMacroRefBuilder(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        sb0.append("    private String build");
        sb0.append(buildName());
        sb0.append("()");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        StringBuilder sb = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        Context local_context = ");
        sb0.append(buildContextName());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        List<Macro> macros = this.list_");
        sb0.append(buildName());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        int i = 0;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        int nb_macros = macros.size();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        String expansion = null;");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(this.");
        sb0.append(buildName());
        sb0.append("None != null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            sb.append(this.");
        sb0.append(buildName());
        sb0.append("None.apply(i, \"\", nb_macros));");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        for(Macro macro : macros)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            expansion = macro.build(local_context);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(this.");
        sb0.append(buildName());
        sb0.append("BeforeFirst != null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                expansion = this.");
        sb0.append(buildName());
        sb0.append("BeforeFirst.apply(i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(this.");
        sb0.append(buildName());
        sb0.append("AfterLast != null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                expansion = this.");
        sb0.append(buildName());
        sb0.append("AfterLast.apply(i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            if(this.");
        sb0.append(buildName());
        sb0.append("Separator != null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                expansion = this.");
        sb0.append(buildName());
        sb0.append("Separator.apply(i, expansion, nb_macros);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("            sb.append(expansion);");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            i++;");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return sb.toString();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
