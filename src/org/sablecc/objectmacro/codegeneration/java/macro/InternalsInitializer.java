/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

class InternalsInitializer {

    private final String _paramName;

    InternalsInitializer(String paramName) {
        this._paramName = paramName;
    }

    void setHeader(MHeader mHeader) {
        throw ObjectMacroException.incorrectType("MHeader", this._paramName);
    }
    
    void setPackageDeclaration(MPackageDeclaration mPackageDeclaration) {
        throw ObjectMacroException.incorrectType("MPackageDeclaration", this._paramName);
    }
    
    void setImportJavaUtil(MImportJavaUtil mImportJavaUtil) {
        throw ObjectMacroException.incorrectType("MImportJavaUtil", this._paramName);
    }
    
    void setContext(MContext mContext) {
        throw ObjectMacroException.incorrectType("MContext", this._paramName);
    }
    
    void setInternalsInitializer(MInternalsInitializer mInternalsInitializer) {
        throw ObjectMacroException.incorrectType("MInternalsInitializer", this._paramName);
    }
    
    void setParentInternalsSetter(MParentInternalsSetter mParentInternalsSetter) {
        throw ObjectMacroException.incorrectType("MParentInternalsSetter", this._paramName);
    }
    
    void setCycleDetectorClass(MCycleDetectorClass mCycleDetectorClass) {
        throw ObjectMacroException.incorrectType("MCycleDetectorClass", this._paramName);
    }
    
    void setSuperMacro(MSuperMacro mSuperMacro) {
        throw ObjectMacroException.incorrectType("MSuperMacro", this._paramName);
    }
    
    void setSuperDirective(MSuperDirective mSuperDirective) {
        throw ObjectMacroException.incorrectType("MSuperDirective", this._paramName);
    }
    
    void setClassValue(MClassValue mClassValue) {
        throw ObjectMacroException.incorrectType("MClassValue", this._paramName);
    }
    
    void setClassMacroValue(MClassMacroValue mClassMacroValue) {
        throw ObjectMacroException.incorrectType("MClassMacroValue", this._paramName);
    }
    
    void setClassStringValue(MClassStringValue mClassStringValue) {
        throw ObjectMacroException.incorrectType("MClassStringValue", this._paramName);
    }
    
    void setClassCacheBuilder(MClassCacheBuilder mClassCacheBuilder) {
        throw ObjectMacroException.incorrectType("MClassCacheBuilder", this._paramName);
    }
    
    void setVersionEnumeration(MVersionEnumeration mVersionEnumeration) {
        throw ObjectMacroException.incorrectType("MVersionEnumeration", this._paramName);
    }
    
    void setMacroFactory(MMacroFactory mMacroFactory) {
        throw ObjectMacroException.incorrectType("MMacroFactory", this._paramName);
    }
    
    void setMacroCreatorMethod(MMacroCreatorMethod mMacroCreatorMethod) {
        throw ObjectMacroException.incorrectType("MMacroCreatorMethod", this._paramName);
    }
    
    void setSwitchVersion(MSwitchVersion mSwitchVersion) {
        throw ObjectMacroException.incorrectType("MSwitchVersion", this._paramName);
    }
    
    void setMacroCaseInit(MMacroCaseInit mMacroCaseInit) {
        throw ObjectMacroException.incorrectType("MMacroCaseInit", this._paramName);
    }
    
    void setVersion(MVersion mVersion) {
        throw ObjectMacroException.incorrectType("MVersion", this._paramName);
    }
    
    void setMacro(MMacro mMacro) {
        throw ObjectMacroException.incorrectType("MMacro", this._paramName);
    }
    
    void setAppliedVersion(MAppliedVersion mAppliedVersion) {
        throw ObjectMacroException.incorrectType("MAppliedVersion", this._paramName);
    }
    
    void setConstructor(MConstructor mConstructor) {
        throw ObjectMacroException.incorrectType("MConstructor", this._paramName);
    }
    
    void setInitInternal(MInitInternal mInitInternal) {
        throw ObjectMacroException.incorrectType("MInitInternal", this._paramName);
    }
    
    void setInitParam(MInitParam mInitParam) {
        throw ObjectMacroException.incorrectType("MInitParam", this._paramName);
    }
    
    void setInitMacroValue(MInitMacroValue mInitMacroValue) {
        throw ObjectMacroException.incorrectType("MInitMacroValue", this._paramName);
    }
    
    void setInitStringValue(MInitStringValue mInitStringValue) {
        throw ObjectMacroException.incorrectType("MInitStringValue", this._paramName);
    }
    
    void setSetMacrosCall(MSetMacrosCall mSetMacrosCall) {
        throw ObjectMacroException.incorrectType("MSetMacrosCall", this._paramName);
    }
    
    void setSuperCall(MSuperCall mSuperCall) {
        throw ObjectMacroException.incorrectType("MSuperCall", this._paramName);
    }
    
    void setSingleMacroAdd(MSingleMacroAdd mSingleMacroAdd) {
        throw ObjectMacroException.incorrectType("MSingleMacroAdd", this._paramName);
    }
    
    void setSingleStringAdd(MSingleStringAdd mSingleStringAdd) {
        throw ObjectMacroException.incorrectType("MSingleStringAdd", this._paramName);
    }
    
    void setAddAllMacro(MAddAllMacro mAddAllMacro) {
        throw ObjectMacroException.incorrectType("MAddAllMacro", this._paramName);
    }
    
    void setAddAllString(MAddAllString mAddAllString) {
        throw ObjectMacroException.incorrectType("MAddAllString", this._paramName);
    }
    
    void setTypeVerifier(MTypeVerifier mTypeVerifier) {
        throw ObjectMacroException.incorrectType("MTypeVerifier", this._paramName);
    }
    
    void setAbstractTypeVerifier(MAbstractTypeVerifier mAbstractTypeVerifier) {
        throw ObjectMacroException.incorrectType("MAbstractTypeVerifier", this._paramName);
    }
    
    void setFactoryComparison(MFactoryComparison mFactoryComparison) {
        throw ObjectMacroException.incorrectType("MFactoryComparison", this._paramName);
    }
    
    void setIsBuilt(MIsBuilt mIsBuilt) {
        throw ObjectMacroException.incorrectType("MIsBuilt", this._paramName);
    }
    
    void setParamMacroRefBuilder(MParamMacroRefBuilder mParamMacroRefBuilder) {
        throw ObjectMacroException.incorrectType("MParamMacroRefBuilder", this._paramName);
    }
    
    void setInternalMacroRefBuilder(MInternalMacroRefBuilder mInternalMacroRefBuilder) {
        throw ObjectMacroException.incorrectType("MInternalMacroRefBuilder", this._paramName);
    }
    
    void setInternalMacroSetter(MInternalMacroSetter mInternalMacroSetter) {
        throw ObjectMacroException.incorrectType("MInternalMacroSetter", this._paramName);
    }
    
    void setParamMacroRef(MParamMacroRef mParamMacroRef) {
        throw ObjectMacroException.incorrectType("MParamMacroRef", this._paramName);
    }
    
    void setInternalMacroRef(MInternalMacroRef mInternalMacroRef) {
        throw ObjectMacroException.incorrectType("MInternalMacroRef", this._paramName);
    }
    
    void setParamStringRef(MParamStringRef mParamStringRef) {
        throw ObjectMacroException.incorrectType("MParamStringRef", this._paramName);
    }
    
    void setParamStringRefBuilder(MParamStringRefBuilder mParamStringRefBuilder) {
        throw ObjectMacroException.incorrectType("MParamStringRefBuilder", this._paramName);
    }
    
    void setInternalStringRef(MInternalStringRef mInternalStringRef) {
        throw ObjectMacroException.incorrectType("MInternalStringRef", this._paramName);
    }
    
    void setInternalStringRefBuilder(MInternalStringRefBuilder mInternalStringRefBuilder) {
        throw ObjectMacroException.incorrectType("MInternalStringRefBuilder", this._paramName);
    }
    
    void setInternalStringSetter(MInternalStringSetter mInternalStringSetter) {
        throw ObjectMacroException.incorrectType("MInternalStringSetter", this._paramName);
    }
    
    void setInitInternalsMethod(MInitInternalsMethod mInitInternalsMethod) {
        throw ObjectMacroException.incorrectType("MInitInternalsMethod", this._paramName);
    }
    
    void setInitDirectives(MInitDirectives mInitDirectives) {
        throw ObjectMacroException.incorrectType("MInitDirectives", this._paramName);
    }
    
    void setNewDirective(MNewDirective mNewDirective) {
        throw ObjectMacroException.incorrectType("MNewDirective", this._paramName);
    }
    
    void setSetMacrosMethod(MSetMacrosMethod mSetMacrosMethod) {
        throw ObjectMacroException.incorrectType("MSetMacrosMethod", this._paramName);
    }
    
    void setMacroBuilder(MMacroBuilder mMacroBuilder) {
        throw ObjectMacroException.incorrectType("MMacroBuilder", this._paramName);
    }
    
    void setInitDirectiveCall(MInitDirectiveCall mInitDirectiveCall) {
        throw ObjectMacroException.incorrectType("MInitDirectiveCall", this._paramName);
    }
    
    void setInitInternalsCall(MInitInternalsCall mInitInternalsCall) {
        throw ObjectMacroException.incorrectType("MInitInternalsCall", this._paramName);
    }
    
    void setAbstractBuilder(MAbstractBuilder mAbstractBuilder) {
        throw ObjectMacroException.incorrectType("MAbstractBuilder", this._paramName);
    }
    
    void setEmptyBuilderWithContext(MEmptyBuilderWithContext mEmptyBuilderWithContext) {
        throw ObjectMacroException.incorrectType("MEmptyBuilderWithContext", this._paramName);
    }
    
    void setContextCacheBuilder(MContextCacheBuilder mContextCacheBuilder) {
        throw ObjectMacroException.incorrectType("MContextCacheBuilder", this._paramName);
    }
    
    void setNewCacheBuilder(MNewCacheBuilder mNewCacheBuilder) {
        throw ObjectMacroException.incorrectType("MNewCacheBuilder", this._paramName);
    }
    
    void setRedefinedApplyInitializer(MRedefinedApplyInitializer mRedefinedApplyInitializer) {
        throw ObjectMacroException.incorrectType("MRedefinedApplyInitializer", this._paramName);
    }
    
    void setParamMacroField(MParamMacroField mParamMacroField) {
        throw ObjectMacroException.incorrectType("MParamMacroField", this._paramName);
    }
    
    void setParamStringField(MParamStringField mParamStringField) {
        throw ObjectMacroException.incorrectType("MParamStringField", this._paramName);
    }
    
    void setInternalMacroField(MInternalMacroField mInternalMacroField) {
        throw ObjectMacroException.incorrectType("MInternalMacroField", this._paramName);
    }
    
    void setInternalStringField(MInternalStringField mInternalStringField) {
        throw ObjectMacroException.incorrectType("MInternalStringField", this._paramName);
    }
    
    void setContextField(MContextField mContextField) {
        throw ObjectMacroException.incorrectType("MContextField", this._paramName);
    }
    
    void setMacroValueField(MMacroValueField mMacroValueField) {
        throw ObjectMacroException.incorrectType("MMacroValueField", this._paramName);
    }
    
    void setStringValueField(MStringValueField mStringValueField) {
        throw ObjectMacroException.incorrectType("MStringValueField", this._paramName);
    }
    
    void setDirectiveFields(MDirectiveFields mDirectiveFields) {
        throw ObjectMacroException.incorrectType("MDirectiveFields", this._paramName);
    }
    
    void setApplyInternalsInitializer(MApplyInternalsInitializer mApplyInternalsInitializer) {
        throw ObjectMacroException.incorrectType("MApplyInternalsInitializer", this._paramName);
    }
    
    void setRedefinedInternalsSetter(MRedefinedInternalsSetter mRedefinedInternalsSetter) {
        throw ObjectMacroException.incorrectType("MRedefinedInternalsSetter", this._paramName);
    }
    
    void setStringPart(MStringPart mStringPart) {
        throw ObjectMacroException.incorrectType("MStringPart", this._paramName);
    }
    
    void setEolPart(MEolPart mEolPart) {
        throw ObjectMacroException.incorrectType("MEolPart", this._paramName);
    }
    
    void setParamInsertPart(MParamInsertPart mParamInsertPart) {
        throw ObjectMacroException.incorrectType("MParamInsertPart", this._paramName);
    }
    
    void setIndentPart(MIndentPart mIndentPart) {
        throw ObjectMacroException.incorrectType("MIndentPart", this._paramName);
    }
    
    void setInsertMacroPart(MInsertMacroPart mInsertMacroPart) {
        throw ObjectMacroException.incorrectType("MInsertMacroPart", this._paramName);
    }
    
    void setInitStringBuilder(MInitStringBuilder mInitStringBuilder) {
        throw ObjectMacroException.incorrectType("MInitStringBuilder", this._paramName);
    }
    
    void setSetInternal(MSetInternal mSetInternal) {
        throw ObjectMacroException.incorrectType("MSetInternal", this._paramName);
    }
    
    void setNewStringValue(MNewStringValue mNewStringValue) {
        throw ObjectMacroException.incorrectType("MNewStringValue", this._paramName);
    }
    
    void setParamRef(MParamRef mParamRef) {
        throw ObjectMacroException.incorrectType("MParamRef", this._paramName);
    }
    
    void setAddIndent(MAddIndent mAddIndent) {
        throw ObjectMacroException.incorrectType("MAddIndent", this._paramName);
    }
    
    void setStringValueArg(MStringValueArg mStringValueArg) {
        throw ObjectMacroException.incorrectType("MStringValueArg", this._paramName);
    }
    
    void setStringValue(MStringValue mStringValue) {
        throw ObjectMacroException.incorrectType("MStringValue", this._paramName);
    }
    
    void setMacroArg(MMacroArg mMacroArg) {
        throw ObjectMacroException.incorrectType("MMacroArg", this._paramName);
    }
    
    void setStringArg(MStringArg mStringArg) {
        throw ObjectMacroException.incorrectType("MStringArg", this._paramName);
    }
    
    void setParamArg(MParamArg mParamArg) {
        throw ObjectMacroException.incorrectType("MParamArg", this._paramName);
    }
    
    void setContextParam(MContextParam mContextParam) {
        throw ObjectMacroException.incorrectType("MContextParam", this._paramName);
    }
    
    void setContextArg(MContextArg mContextArg) {
        throw ObjectMacroException.incorrectType("MContextArg", this._paramName);
    }
    
    void setGetInternalTail(MGetInternalTail mGetInternalTail) {
        throw ObjectMacroException.incorrectType("MGetInternalTail", this._paramName);
    }
    
    void setStringParam(MStringParam mStringParam) {
        throw ObjectMacroException.incorrectType("MStringParam", this._paramName);
    }
    
    void setAbstract(MAbstract mAbstract) {
        throw ObjectMacroException.incorrectType("MAbstract", this._paramName);
    }
    
    void setMacrosParam(MMacrosParam mMacrosParam) {
        throw ObjectMacroException.incorrectType("MMacrosParam", this._paramName);
    }
    
    void setPublic(MPublic mPublic) {
        throw ObjectMacroException.incorrectType("MPublic", this._paramName);
    }
    
    void setOverride(MOverride mOverride) {
        throw ObjectMacroException.incorrectType("MOverride", this._paramName);
    }
    
    void setClassNone(MClassNone mClassNone) {
        throw ObjectMacroException.incorrectType("MClassNone", this._paramName);
    }
    
    void setClassBeforeFirst(MClassBeforeFirst mClassBeforeFirst) {
        throw ObjectMacroException.incorrectType("MClassBeforeFirst", this._paramName);
    }
    
    void setClassAfterLast(MClassAfterLast mClassAfterLast) {
        throw ObjectMacroException.incorrectType("MClassAfterLast", this._paramName);
    }
    
    void setClassSeparator(MClassSeparator mClassSeparator) {
        throw ObjectMacroException.incorrectType("MClassSeparator", this._paramName);
    }
    
    void setExInternalException(MExInternalException mExInternalException) {
        throw ObjectMacroException.incorrectType("MExInternalException", this._paramName);
    }
    
    void setExObjectMacroException(MExObjectMacroException mExObjectMacroException) {
        throw ObjectMacroException.incorrectType("MExObjectMacroException", this._paramName);
    }
    
    void setExIncorrectType(MExIncorrectType mExIncorrectType) {
        throw ObjectMacroException.incorrectType("MExIncorrectType", this._paramName);
    }
    
    void setExObjectMacroErrorHead(MExObjectMacroErrorHead mExObjectMacroErrorHead) {
        throw ObjectMacroException.incorrectType("MExObjectMacroErrorHead", this._paramName);
    }
    
    void setExParameterNull(MExParameterNull mExParameterNull) {
        throw ObjectMacroException.incorrectType("MExParameterNull", this._paramName);
    }
    
    void setExMacroNullInList(MExMacroNullInList mExMacroNullInList) {
        throw ObjectMacroException.incorrectType("MExMacroNullInList", this._paramName);
    }
    
    void setExCannotModify(MExCannotModify mExCannotModify) {
        throw ObjectMacroException.incorrectType("MExCannotModify", this._paramName);
    }
    
    void setExCyclicReference(MExCyclicReference mExCyclicReference) {
        throw ObjectMacroException.incorrectType("MExCyclicReference", this._paramName);
    }
    
    void setExVersionNull(MExVersionNull mExVersionNull) {
        throw ObjectMacroException.incorrectType("MExVersionNull", this._paramName);
    }
    
    void setMacroInternalException(MMacroInternalException mMacroInternalException) {
        throw ObjectMacroException.incorrectType("MMacroInternalException", this._paramName);
    }
    
    void setExVersionsDifferent(MExVersionsDifferent mExVersionsDifferent) {
        throw ObjectMacroException.incorrectType("MExVersionsDifferent", this._paramName);
    }

    void setObjectMacroUserErrorHead(MObjectMacroUserErrorHead mObjectMacroUserErrorHead) {
        throw ObjectMacroException.incorrectType("MObjectMacroUserErrorHead", this._paramName);
    }

    void setUserErrorIncorrectType(MUserErrorIncorrectType mUserErrorIncorrectType) {
        throw ObjectMacroException.incorrectType("MUserErrorIncorrectType", this._paramName);
    }

    void setUserErrorMacroNullInList(MUserErrorMacroNullInList mUserErrorMacroNullInList) {
        throw ObjectMacroException.incorrectType("MUserErrorMacroNullInList", this._paramName);
    }

    void setUserErrorCyclicReference(MUserErrorCyclicReference mUserErrorCyclicReference) {
        throw ObjectMacroException.incorrectType("MUserErrorCyclicReference", this._paramName);
    }

    void setUserErrorParameterNull(MUserErrorParameterNull mUserErrorParameterNull) {
        throw ObjectMacroException.incorrectType("MUserErrorParameterNull", this._paramName);
    }

    void setUserErrorCannotModify(MUserErrorCannotModify mUserErrorCannotModify) {
        throw ObjectMacroException.incorrectType("MUserErrorCannotModify", this._paramName);
    }

    void setUserErrorVersionNull(MUserErrorVersionNull mUserErrorVersionNull) {
        throw ObjectMacroException.incorrectType("MUserErrorVersionNull", this._paramName);
    }

    void setUserErrorVersionsDifferent(MUserErrorVersionsDifferent mUserErrorVersionsDifferent) {
        throw ObjectMacroException.incorrectType("MUserErrorVersionsDifferent", this._paramName);
    }

    void setUserErrorInternalException(MUserErrorInternalException mUserErrorInternalException) {
        throw ObjectMacroException.incorrectType("MUserErrorInternalException", this._paramName);
    }

}