/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;

public class InternalsInitializer {

    private final String _paramName;

    InternalsInitializer(String paramName){
        this._paramName = paramName;
    }

  void setHeader(MHeader mHeader){
      throw ObjectMacroException.incorrectType("MHeader", this._paramName);
  }
  void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
      throw ObjectMacroException.incorrectType("MPackageDeclaration", this._paramName);
  }
  void setImportJavaUtil(MImportJavaUtil mImportJavaUtil){
      throw ObjectMacroException.incorrectType("MImportJavaUtil", this._paramName);
  }
  void setContext(MContext mContext){
      throw ObjectMacroException.incorrectType("MContext", this._paramName);
  }
  void setInternalsInitializer(MInternalsInitializer mInternalsInitializer){
      throw ObjectMacroException.incorrectType("MInternalsInitializer", this._paramName);
  }
  void setParentInternalsSetter(MParentInternalsSetter mParentInternalsSetter){
      throw ObjectMacroException.incorrectType("MParentInternalsSetter", this._paramName);
  }
  void setSuperMacro(MSuperMacro mSuperMacro){
      throw ObjectMacroException.incorrectType("MSuperMacro", this._paramName);
  }
  void setSuperDirective(MSuperDirective mSuperDirective){
      throw ObjectMacroException.incorrectType("MSuperDirective", this._paramName);
  }
  void setClassInternalValue(MClassInternalValue mClassInternalValue){
      throw ObjectMacroException.incorrectType("MClassInternalValue", this._paramName);
  }
  void setClassBuildState(MClassBuildState mClassBuildState){
      throw ObjectMacroException.incorrectType("MClassBuildState", this._paramName);
  }
  void setMacro(MMacro mMacro){
      throw ObjectMacroException.incorrectType("MMacro", this._paramName);
  }
  void setConstructor(MConstructor mConstructor){
      throw ObjectMacroException.incorrectType("MConstructor", this._paramName);
  }
  void setInitMacroInternal(MInitMacroInternal mInitMacroInternal){
      throw ObjectMacroException.incorrectType("MInitMacroInternal", this._paramName);
  }
  void setInitMacroParam(MInitMacroParam mInitMacroParam){
      throw ObjectMacroException.incorrectType("MInitMacroParam", this._paramName);
  }
  void setInitStringInternal(MInitStringInternal mInitStringInternal){
      throw ObjectMacroException.incorrectType("MInitStringInternal", this._paramName);
  }
  void setInitInternalValue(MInitInternalValue mInitInternalValue){
      throw ObjectMacroException.incorrectType("MInitInternalValue", this._paramName);
  }
  void setSetParam(MSetParam mSetParam){
      throw ObjectMacroException.incorrectType("MSetParam", this._paramName);
  }
  void setSingleAdd(MSingleAdd mSingleAdd){
      throw ObjectMacroException.incorrectType("MSingleAdd", this._paramName);
  }
  void setIsBuilt(MIsBuilt mIsBuilt){
      throw ObjectMacroException.incorrectType("MIsBuilt", this._paramName);
  }
  void setParamStringRefBuilder(MParamStringRefBuilder mParamStringRefBuilder){
      throw ObjectMacroException.incorrectType("MParamStringRefBuilder", this._paramName);
  }
  void setParamMacroRefBuilder(MParamMacroRefBuilder mParamMacroRefBuilder){
      throw ObjectMacroException.incorrectType("MParamMacroRefBuilder", this._paramName);
  }
  void setInternalMacroRefBuilder(MInternalMacroRefBuilder mInternalMacroRefBuilder){
      throw ObjectMacroException.incorrectType("MInternalMacroRefBuilder", this._paramName);
  }
  void setInternalMacroSetter(MInternalMacroSetter mInternalMacroSetter){
      throw ObjectMacroException.incorrectType("MInternalMacroSetter", this._paramName);
  }
  void setParamStringSetter(MParamStringSetter mParamStringSetter){
      throw ObjectMacroException.incorrectType("MParamStringSetter", this._paramName);
  }
  void setParamMacroRef(MParamMacroRef mParamMacroRef){
      throw ObjectMacroException.incorrectType("MParamMacroRef", this._paramName);
  }
  void setInternalMacroRef(MInternalMacroRef mInternalMacroRef){
      throw ObjectMacroException.incorrectType("MInternalMacroRef", this._paramName);
  }
  void setParamStringRef(MParamStringRef mParamStringRef){
      throw ObjectMacroException.incorrectType("MParamStringRef", this._paramName);
  }
  void setInternalStringSetter(MInternalStringSetter mInternalStringSetter){
      throw ObjectMacroException.incorrectType("MInternalStringSetter", this._paramName);
  }
  void setInitInternalsMethod(MInitInternalsMethod mInitInternalsMethod){
      throw ObjectMacroException.incorrectType("MInitInternalsMethod", this._paramName);
  }
  void setContextVerifier(MContextVerifier mContextVerifier){
      throw ObjectMacroException.incorrectType("MContextVerifier", this._paramName);
  }
  void setInitDirectives(MInitDirectives mInitDirectives){
      throw ObjectMacroException.incorrectType("MInitDirectives", this._paramName);
  }
  void setNewDirective(MNewDirective mNewDirective){
      throw ObjectMacroException.incorrectType("MNewDirective", this._paramName);
  }
  void setPublic(MPublic mPublic){
      throw ObjectMacroException.incorrectType("MPublic", this._paramName);
  }
  void setMacroBuilder(MMacroBuilder mMacroBuilder){
      throw ObjectMacroException.incorrectType("MMacroBuilder", this._paramName);
  }
  void setInitDirectiveCall(MInitDirectiveCall mInitDirectiveCall){
      throw ObjectMacroException.incorrectType("MInitDirectiveCall", this._paramName);
  }
  void setInitInternalsCall(MInitInternalsCall mInitInternalsCall){
      throw ObjectMacroException.incorrectType("MInitInternalsCall", this._paramName);
  }
  void setEmptyBuilderWithContext(MEmptyBuilderWithContext mEmptyBuilderWithContext){
      throw ObjectMacroException.incorrectType("MEmptyBuilderWithContext", this._paramName);
  }
  void setContextBuildState(MContextBuildState mContextBuildState){
      throw ObjectMacroException.incorrectType("MContextBuildState", this._paramName);
  }
  void setNewBuildState(MNewBuildState mNewBuildState){
      throw ObjectMacroException.incorrectType("MNewBuildState", this._paramName);
  }
  void setRedefinedApplyInitializer(MRedefinedApplyInitializer mRedefinedApplyInitializer){
      throw ObjectMacroException.incorrectType("MRedefinedApplyInitializer", this._paramName);
  }
  void setParamMacroField(MParamMacroField mParamMacroField){
      throw ObjectMacroException.incorrectType("MParamMacroField", this._paramName);
  }
  void setParamStringField(MParamStringField mParamStringField){
      throw ObjectMacroException.incorrectType("MParamStringField", this._paramName);
  }
  void setInternalMacroField(MInternalMacroField mInternalMacroField){
      throw ObjectMacroException.incorrectType("MInternalMacroField", this._paramName);
  }
  void setInternalStringField(MInternalStringField mInternalStringField){
      throw ObjectMacroException.incorrectType("MInternalStringField", this._paramName);
  }
  void setContextField(MContextField mContextField){
      throw ObjectMacroException.incorrectType("MContextField", this._paramName);
  }
  void setInternalMacrosValueField(MInternalMacrosValueField mInternalMacrosValueField){
      throw ObjectMacroException.incorrectType("MInternalMacrosValueField", this._paramName);
  }
  void setDirectiveFields(MDirectiveFields mDirectiveFields){
      throw ObjectMacroException.incorrectType("MDirectiveFields", this._paramName);
  }
  void setApplyInternalsInitializer(MApplyInternalsInitializer mApplyInternalsInitializer){
      throw ObjectMacroException.incorrectType("MApplyInternalsInitializer", this._paramName);
  }
  void setRedefinedInternalsSetter(MRedefinedInternalsSetter mRedefinedInternalsSetter){
      throw ObjectMacroException.incorrectType("MRedefinedInternalsSetter", this._paramName);
  }
  void setStringPart(MStringPart mStringPart){
      throw ObjectMacroException.incorrectType("MStringPart", this._paramName);
  }
  void setEolPart(MEolPart mEolPart){
      throw ObjectMacroException.incorrectType("MEolPart", this._paramName);
  }
  void setParamInsertPart(MParamInsertPart mParamInsertPart){
      throw ObjectMacroException.incorrectType("MParamInsertPart", this._paramName);
  }
  void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
      throw ObjectMacroException.incorrectType("MInsertMacroPart", this._paramName);
  }
  void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){
      throw ObjectMacroException.incorrectType("MInitStringBuilder", this._paramName);
  }
  void setSetInternal(MSetInternal mSetInternal){
      throw ObjectMacroException.incorrectType("MSetInternal", this._paramName);
  }
  void setStringBuilderBuild(MStringBuilderBuild mStringBuilderBuild){
      throw ObjectMacroException.incorrectType("MStringBuilderBuild", this._paramName);
  }
  void setParamRef(MParamRef mParamRef){
      throw ObjectMacroException.incorrectType("MParamRef", this._paramName);
  }
  void setStringValue(MStringValue mStringValue){
      throw ObjectMacroException.incorrectType("MStringValue", this._paramName);
  }
  void setMacroArg(MMacroArg mMacroArg){
      throw ObjectMacroException.incorrectType("MMacroArg", this._paramName);
  }
  void setStringArg(MStringArg mStringArg){
      throw ObjectMacroException.incorrectType("MStringArg", this._paramName);
  }
  void setParamArg(MParamArg mParamArg){
      throw ObjectMacroException.incorrectType("MParamArg", this._paramName);
  }
  void setContextName(MContextName mContextName){
      throw ObjectMacroException.incorrectType("MContextName", this._paramName);
  }
  void setContextParam(MContextParam mContextParam){
      throw ObjectMacroException.incorrectType("MContextParam", this._paramName);
  }
  void setContextArg(MContextArg mContextArg){
      throw ObjectMacroException.incorrectType("MContextArg", this._paramName);
  }
  void setGetInternalTail(MGetInternalTail mGetInternalTail){
      throw ObjectMacroException.incorrectType("MGetInternalTail", this._paramName);
  }
  void setStringParam(MStringParam mStringParam){
      throw ObjectMacroException.incorrectType("MStringParam", this._paramName);
  }
  void setClassNone(MClassNone mClassNone){
      throw ObjectMacroException.incorrectType("MClassNone", this._paramName);
  }
  void setClassBeforeFirst(MClassBeforeFirst mClassBeforeFirst){
      throw ObjectMacroException.incorrectType("MClassBeforeFirst", this._paramName);
  }
  void setClassAfterLast(MClassAfterLast mClassAfterLast){
      throw ObjectMacroException.incorrectType("MClassAfterLast", this._paramName);
  }
  void setClassSeparator(MClassSeparator mClassSeparator){
      throw ObjectMacroException.incorrectType("MClassSeparator", this._paramName);
  }
  void setExObjectMacroException(MExObjectMacroException mExObjectMacroException){
      throw ObjectMacroException.incorrectType("MExObjectMacroException", this._paramName);
  }
  void setExIncorrectType(MExIncorrectType mExIncorrectType){
      throw ObjectMacroException.incorrectType("MExIncorrectType", this._paramName);
  }
  void setExObjectMacroErrorHead(MExObjectMacroErrorHead mExObjectMacroErrorHead){
      throw ObjectMacroException.incorrectType("MExObjectMacroErrorHead", this._paramName);
  }
  void setExParameterNull(MExParameterNull mExParameterNull){
      throw ObjectMacroException.incorrectType("MExParameterNull", this._paramName);
  }
  void setExMacroNullInList(MExMacroNullInList mExMacroNullInList){
      throw ObjectMacroException.incorrectType("MExMacroNullInList", this._paramName);
  }
  void setExCannotModify(MExCannotModify mExCannotModify){
      throw ObjectMacroException.incorrectType("MExCannotModify", this._paramName);
  }
  void setExCyclicReference(MExCyclicReference mExCyclicReference){
      throw ObjectMacroException.incorrectType("MExCyclicReference", this._paramName);
  }

}