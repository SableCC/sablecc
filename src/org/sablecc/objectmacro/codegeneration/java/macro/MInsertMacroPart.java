/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public  class MInsertMacroPart extends Macro{
    
    String field_Name;
    
    String field_IndexBuilder;
    
    String field_IndexInsert;
    
    final List<Macro> list_MacroBodyParts;
    
    final Context MacroBodyPartsContext = new Context();
    
    final InternalValue MacroBodyPartsValue;
    
    private DSeparator MacroBodyPartsSeparator;
    
    private DBeforeFirst MacroBodyPartsBeforeFirst;
    
    private DAfterLast MacroBodyPartsAfterLast;
    
    private DNone MacroBodyPartsNone;
    
    final List<Macro> list_SetInternals;
    
    final Context SetInternalsContext = new Context();
    
    final InternalValue SetInternalsValue;
    
    private DSeparator SetInternalsSeparator;
    
    private DBeforeFirst SetInternalsBeforeFirst;
    
    private DAfterLast SetInternalsAfterLast;
    
    private DNone SetInternalsNone;
    
    public MInsertMacroPart(String pName, String pIndexBuilder, String pIndexInsert, Macros macros){
        
        
        this.setMacros(macros);
        this.setPName(pName);
        this.setPIndexBuilder(pIndexBuilder);
        this.setPIndexInsert(pIndexInsert);
        this.list_MacroBodyParts = new LinkedList<>();
        this.list_SetInternals = new LinkedList<>();
        
        this.MacroBodyPartsValue = new InternalValue(this.list_MacroBodyParts, this.MacroBodyPartsContext);
        this.SetInternalsValue = new InternalValue(this.list_SetInternals, this.SetInternalsContext);
    }
    
    private void setPName( String pName ){
        if(pName == null){
            throw ObjectMacroException.parameterNull("Name");
        }
    
        this.field_Name = pName;
    }
    
    private void setPIndexBuilder( String pIndexBuilder ){
        if(pIndexBuilder == null){
            throw ObjectMacroException.parameterNull("IndexBuilder");
        }
    
        this.field_IndexBuilder = pIndexBuilder;
    }
    
    private void setPIndexInsert( String pIndexInsert ){
        if(pIndexInsert == null){
            throw ObjectMacroException.parameterNull("IndexInsert");
        }
    
        this.field_IndexInsert = pIndexInsert;
    }
    
    public void addMacroBodyParts(MInitStringBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("InitStringBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MStringPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("StringPart");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MParamInsertPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("ParamInsertPart");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MEolPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("EolPart");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MInsertMacroPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("InsertMacroPart");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addSetInternals(MSetInternal macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("SetInternals");
        }
        if(this.build_state != null){
            throw ObjectMacroException.cannotModify("SetInternal");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_SetInternals.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    String buildName(){
    
        return this.field_Name;
    }
    
    String buildIndexBuilder(){
    
        return this.field_IndexBuilder;
    }
    
    String buildIndexInsert(){
    
        return this.field_IndexInsert;
    }
    
    private String buildMacroBodyParts(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroBodyPartsContext;
        List<Macro> macros = this.list_MacroBodyParts;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroBodyPartsNone != null){
            sb.append(this.MacroBodyPartsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.MacroBodyPartsBeforeFirst != null){
                expansion = this.MacroBodyPartsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBodyPartsAfterLast != null){
                expansion = this.MacroBodyPartsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBodyPartsSeparator != null){
                expansion = this.MacroBodyPartsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildSetInternals(){
        StringBuilder sb = new StringBuilder();
        Context local_context = SetInternalsContext;
        List<Macro> macros = this.list_SetInternals;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.SetInternalsNone != null){
            sb.append(this.SetInternalsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros){
            expansion = macro.build(local_context);
    
            if(this.SetInternalsBeforeFirst != null){
                expansion = this.SetInternalsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.SetInternalsAfterLast != null){
                expansion = this.SetInternalsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.SetInternalsSeparator != null){
                expansion = this.SetInternalsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    String getName(){
    
        return this.field_Name;
    }
    
    String getIndexBuilder(){
    
        return this.field_IndexBuilder;
    }
    
    String getIndexInsert(){
    
        return this.field_IndexInsert;
    }
    
    private InternalValue getMacroBodyParts(){
        return this.MacroBodyPartsValue;
    }
    
    private InternalValue getSetInternals(){
        return this.SetInternalsValue;
    }
    private void initMacroBodyPartsInternals(Context context){
        for(Macro macro : this.list_MacroBodyParts){
            macro.apply(new InternalsInitializer("MacroBodyParts"){
                @Override
                void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){
                
                    
                    
                }
                
                @Override
                void setStringPart(MStringPart mStringPart){
                
                    
                    
                }
                
                @Override
                void setParamInsertPart(MParamInsertPart mParamInsertPart){
                
                    
                    
                }
                
                @Override
                void setEolPart(MEolPart mEolPart){
                
                    
                    
                }
                
                @Override
                void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
                
                    
                    
                }
            });
        }
    }
    
    private void initSetInternalsInternals(Context context){
        for(Macro macro : this.list_SetInternals){
            macro.apply(new InternalsInitializer("SetInternals"){
                @Override
                void setSetInternal(MSetInternal mSetInternal){
                
                    
                    mSetInternal.setVarName(SetInternalsContext, getIndexInsert());
                }
            });
        }
    }
    
    private void initMacroBodyPartsDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.MacroBodyPartsSeparator = new DSeparator(sb1.toString());
        this.MacroBodyPartsValue.setSeparator(this.MacroBodyPartsSeparator);
    }
    
    private void initSetInternalsDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.SetInternalsSeparator = new DSeparator(sb1.toString());
        this.SetInternalsValue.setSeparator(this.SetInternalsSeparator);
    }
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setInsertMacroPart(this);
     }
    
    @Override
    public String build(){
    
        BuildState buildState = this.build_state;
    
        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("InsertMacroPart");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initMacroBodyPartsDirectives();
        initSetInternalsDirectives();
        
        initMacroBodyPartsInternals(null);
        initSetInternalsInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("M");
        sb0.append(buildName());
        sb0.append(" m");
        sb0.append(buildIndexInsert());
        sb0.append(" = this.getMacros().new");
        sb0.append(buildName());
        sb0.append("();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildMacroBodyParts());
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildSetInternals());
        sb0.append(LINE_SEPARATOR);
        sb0.append("sb");
        sb0.append(buildIndexBuilder());
        sb0.append(".append(m");
        sb0.append(buildIndexInsert());
        sb0.append(".build(null));");
    
        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
     return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}