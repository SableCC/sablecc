/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public class MAddIndent extends Macro{

    private final List<Macro> list_ListParts;

    private DSeparator ListPartsSeparator;

    private DBeforeFirst ListPartsBeforeFirst;

    private DAfterLast ListPartsAfterLast;

    private DNone ListPartsNone;

    private final InternalValue ListPartsValue;

    private final Context ListPartsContext = new Context();

    public MAddIndent(){

    this.list_ListParts = new ArrayList<>();

    this.ListPartsValue = new InternalValue(this.list_ListParts, this.ListPartsContext);
    }

    public void addListParts(MInitStringBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("AddIndent");
        }

        this.list_ListParts.add(macro);
    }

    public void addListParts(MStringPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("AddIndent");
        }

        this.list_ListParts.add(macro);
    }

    public void addListParts(MParamInsertPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("AddIndent");
        }

        this.list_ListParts.add(macro);
    }

    public void addListParts(MEolPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("AddIndent");
        }

        this.list_ListParts.add(macro);
    }

    public void addListParts(MInsertMacroPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ListParts");
        }
                if(this.build_state != null){
            throw ObjectMacroException.cannotModify("AddIndent");
        }

        this.list_ListParts.add(macro);
    }

    private String buildListParts(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ListPartsContext;
        List<Macro> macros = this.list_ListParts;

        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;

        if(this.ListPartsNone != null){
            sb.append(this.ListPartsNone.apply(i, "", nb_macros));
        }

        for(Macro macro : macros){
            expansion = macro.build(local_context);

            if(this.ListPartsBeforeFirst != null){
                expansion = this.ListPartsBeforeFirst.apply(i, expansion, nb_macros);
            }

            if(this.ListPartsAfterLast != null){
                expansion = this.ListPartsAfterLast.apply(i, expansion, nb_macros);
            }

            if(this.ListPartsSeparator != null){
                expansion = this.ListPartsSeparator.apply(i, expansion, nb_macros);
            }

            sb.append(expansion);
            i++;
        }

        return sb.toString();
    }

    private InternalValue getListParts(){
        return this.ListPartsValue;
    }
    private void initListPartsInternals(Context context){
        for(Macro macro : this.list_ListParts){
            macro.apply(new InternalsInitializer("ListParts"){
@Override
void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){

        }
@Override
void setStringPart(MStringPart mStringPart){

        }
@Override
void setParamInsertPart(MParamInsertPart mParamInsertPart){

        }
@Override
void setEolPart(MEolPart mEolPart){

        }
@Override
void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){

        }
});
        }
    }

    private void initListPartsDirectives(){
            }
    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setAddIndent(this);
    }

    @Override
    public String build(){

        BuildState buildState = this.build_state;

        if(buildState == null){
            buildState = new BuildState();
        }
        else if(buildState.getExpansion() == null){
            throw ObjectMacroException.cyclicReference("AddIndent");
        }
        else{
            return buildState.getExpansion();
        }
        this.build_state = buildState;

                initListPartsDirectives();
        
                initListPartsInternals(null);
        
        StringBuilder sb0 = new StringBuilder();

        sb0.append("        sbIndentation = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildListParts());
        sb0.append(LINE_SEPARATOR);
        sb0.append("        indentations.add(sbIndentation.toString());");

        buildState.setExpansion(sb0.toString());
        return sb0.toString();
    }

    @Override
    String build(Context context) {
        return build();
    }
}
