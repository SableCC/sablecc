/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MAddIndent extends Macro {
    
    private DSeparator IndexBuilderSeparator;
    
    private DBeforeFirst IndexBuilderBeforeFirst;
    
    private DAfterLast IndexBuilderAfterLast;
    
    private DNone IndexBuilderNone;
    
    final List<String> list_IndexBuilder;
    
    final Context IndexBuilderContext = new Context();
    
    final StringValue IndexBuilderValue;
    
    private DSeparator IndentPartsSeparator;
    
    private DBeforeFirst IndentPartsBeforeFirst;
    
    private DAfterLast IndentPartsAfterLast;
    
    private DNone IndentPartsNone;
    
    final List<Macro> list_IndentParts;
    
    final Context IndentPartsContext = new Context();
    
    final MacroValue IndentPartsValue;
    
    MAddIndent(Macros macros){
        
        this.setMacros(macros);
        this.list_IndexBuilder = new LinkedList<>();
        this.list_IndentParts = new LinkedList<>();
        
        this.IndexBuilderValue = new StringValue(this.list_IndexBuilder, this.IndexBuilderContext);
        this.IndentPartsValue = new MacroValue(this.list_IndentParts, this.IndentPartsContext);
    }
    
    MAddIndent(String pIndexBuilder, List<Macro> pIndentParts, Macros macros){
        
        this.setMacros(macros);
        this.list_IndexBuilder = new LinkedList<>();
        this.list_IndentParts = new LinkedList<>();
        
        this.IndexBuilderValue = new StringValue(this.list_IndexBuilder, this.IndexBuilderContext);
        this.IndentPartsValue = new MacroValue(this.list_IndentParts, this.IndentPartsContext);
        if (pIndentParts != null) {
            this.addAllIndentParts(pIndentParts);
        }
        
        if (pIndexBuilder != null) {
            this.addIndexBuilder(pIndexBuilder);
        }
    }
    
    public void addAllIndexBuilder(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("IndexBuilder");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("IndexBuilder");
            }
    
            this.list_IndexBuilder.add(string);
        }
    }
    
    public void addIndexBuilder(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("IndexBuilder");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_IndexBuilder.add(string);
    }
    
    public void addAllIndentParts(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("IndentParts");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "IndentParts");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeIndentParts(macro);
            this.list_IndentParts.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeIndentParts (Macro macro) {
        macro.apply(new InternalsInitializer("IndentParts"){
            @Override
            void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){
                
            
            
            }
            
            @Override
            void setStringPart(MStringPart mStringPart){
                
            
            
            }
            
            @Override
            void setParamInsertPart(MParamInsertPart mParamInsertPart){
                
            
            
            }
            
            @Override
            void setEolPart(MEolPart mEolPart){
                
            
            
            }
            
            @Override
            void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
                
            
            
            }
        });
    }
    
    public void addIndentParts(MInitStringBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("IndentParts");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_IndentParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addIndentParts(MStringPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("IndentParts");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_IndentParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addIndentParts(MParamInsertPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("IndentParts");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_IndentParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addIndentParts(MEolPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("IndentParts");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_IndentParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addIndentParts(MInsertMacroPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("IndentParts");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_IndentParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    private String buildIndexBuilder() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_IndexBuilder;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildIndentParts() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.IndentPartsContext;
        List<Macro> macros = this.list_IndentParts;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        if(this.IndentPartsSeparator == null) {
            initIndentPartsDirectives();
        }
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            expansion = this.IndentPartsSeparator.apply(i, expansion, nb_macros);
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getIndexBuilder() {
        return this.IndexBuilderValue;
    }
    
    MacroValue getIndentParts() {
        return this.IndentPartsValue;
    }
    
    private void initIndentPartsInternals(Context context) {
        for(Macro macro : this.list_IndentParts) {
            macro.apply(new InternalsInitializer("IndentParts"){
                @Override
                void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){
                    
                
                
                }
                
                @Override
                void setStringPart(MStringPart mStringPart){
                    
                
                
                }
                
                @Override
                void setParamInsertPart(MParamInsertPart mParamInsertPart){
                    
                
                
                }
                
                @Override
                void setEolPart(MEolPart mEolPart){
                    
                
                
                }
                
                @Override
                void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
                    
                
                
                }
            });
        }
    }
    
    private void initIndexBuilderDirectives() {
        
    }
    
    private void initIndentPartsDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.IndentPartsSeparator = new DSeparator(sb1.toString());
        this.IndentPartsValue.setSeparator(this.IndentPartsSeparator);
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setAddIndent(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initIndentPartsInternals(null);
        
        initIndexBuilderDirectives();
        initIndentPartsDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("StringBuilder sb");
        sb0.append(buildIndexBuilder());
        sb0.append(" = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildIndentParts());
        sb0.append(LINE_SEPARATOR);
        sb0.append("indentations.add(sb");
        sb0.append(buildIndexBuilder());
        sb0.append(".toString());");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}