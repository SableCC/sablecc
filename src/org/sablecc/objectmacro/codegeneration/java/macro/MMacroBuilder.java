/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

import java.util.*;

public  class MMacroBuilder extends Macro{
    
    final List<Macro> list_ContextParam;
    
    final Context ContextParamContext = new Context();
    
    final InternalValue ContextParamValue;
    
    private DSeparator ContextParamSeparator;
    
    private DBeforeFirst ContextParamBeforeFirst;
    
    private DAfterLast ContextParamAfterLast;
    
    private DNone ContextParamNone;
    
    final List<Macro> list_ContextCacheBuilder;
    
    final Context ContextCacheBuilderContext = new Context();
    
    final InternalValue ContextCacheBuilderValue;
    
    private DSeparator ContextCacheBuilderSeparator;
    
    private DBeforeFirst ContextCacheBuilderBeforeFirst;
    
    private DAfterLast ContextCacheBuilderAfterLast;
    
    private DNone ContextCacheBuilderNone;
    
    final List<Macro> list_NewCacheBuilder;
    
    final Context NewCacheBuilderContext = new Context();
    
    final InternalValue NewCacheBuilderValue;
    
    private DSeparator NewCacheBuilderSeparator;
    
    private DBeforeFirst NewCacheBuilderBeforeFirst;
    
    private DAfterLast NewCacheBuilderAfterLast;
    
    private DNone NewCacheBuilderNone;
    
    final List<Macro> list_DirectivesCalls;
    
    final Context DirectivesCallsContext = new Context();
    
    final InternalValue DirectivesCallsValue;
    
    private DSeparator DirectivesCallsSeparator;
    
    private DBeforeFirst DirectivesCallsBeforeFirst;
    
    private DAfterLast DirectivesCallsAfterLast;
    
    private DNone DirectivesCallsNone;
    
    final List<Macro> list_InternalsCalls;
    
    final Context InternalsCallsContext = new Context();
    
    final InternalValue InternalsCallsValue;
    
    private DSeparator InternalsCallsSeparator;
    
    private DBeforeFirst InternalsCallsBeforeFirst;
    
    private DAfterLast InternalsCallsAfterLast;
    
    private DNone InternalsCallsNone;
    
    final List<Macro> list_MacroBodyParts;
    
    final Context MacroBodyPartsContext = new Context();
    
    final InternalValue MacroBodyPartsValue;
    
    private DSeparator MacroBodyPartsSeparator;
    
    private DBeforeFirst MacroBodyPartsBeforeFirst;
    
    private DAfterLast MacroBodyPartsAfterLast;
    
    private DNone MacroBodyPartsNone;
    
    MMacroBuilder(Macros macros){
        
        
        this.setMacros(macros);
        this.list_ContextParam = new LinkedList<>();
        this.list_ContextCacheBuilder = new LinkedList<>();
        this.list_NewCacheBuilder = new LinkedList<>();
        this.list_DirectivesCalls = new LinkedList<>();
        this.list_InternalsCalls = new LinkedList<>();
        this.list_MacroBodyParts = new LinkedList<>();
        
        this.ContextParamValue = new InternalValue(this.list_ContextParam, this.ContextParamContext);
        this.ContextCacheBuilderValue = new InternalValue(this.list_ContextCacheBuilder, this.ContextCacheBuilderContext);
        this.NewCacheBuilderValue = new InternalValue(this.list_NewCacheBuilder, this.NewCacheBuilderContext);
        this.DirectivesCallsValue = new InternalValue(this.list_DirectivesCalls, this.DirectivesCallsContext);
        this.InternalsCallsValue = new InternalValue(this.list_InternalsCalls, this.InternalsCallsContext);
        this.MacroBodyPartsValue = new InternalValue(this.list_MacroBodyParts, this.MacroBodyPartsContext);
    }
    
    public void addAllContextParam(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ContextParam");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        int i = 0;
        
        for(Macro macro: macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "ContextParam");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeContextParam(macro);
            this.list_ContextParam.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeContextParam (Macro macro) {
        macro.apply(new InternalsInitializer("ContextParam"){
            @Override
            void setContextParam(MContextParam mContextParam){
            
                
                
            }
        });
    }
    
    public void addContextParam(MContextParam macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ContextParam");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_ContextParam.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllContextCacheBuilder(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("ContextCacheBuilder");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        int i = 0;
        
        for(Macro macro: macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "ContextCacheBuilder");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeContextCacheBuilder(macro);
            this.list_ContextCacheBuilder.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeContextCacheBuilder (Macro macro) {
        macro.apply(new InternalsInitializer("ContextCacheBuilder"){
            @Override
            void setContextCacheBuilder(MContextCacheBuilder mContextCacheBuilder){
            
                
                
            }
        });
    }
    
    public void addContextCacheBuilder(MContextCacheBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("ContextCacheBuilder");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_ContextCacheBuilder.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllNewCacheBuilder(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("NewCacheBuilder");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        int i = 0;
        
        for(Macro macro: macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "NewCacheBuilder");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeNewCacheBuilder(macro);
            this.list_NewCacheBuilder.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeNewCacheBuilder (Macro macro) {
        macro.apply(new InternalsInitializer("NewCacheBuilder"){
            @Override
            void setNewCacheBuilder(MNewCacheBuilder mNewCacheBuilder){
            
                
                
            }
        });
    }
    
    public void addNewCacheBuilder(MNewCacheBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("NewCacheBuilder");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_NewCacheBuilder.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllDirectivesCalls(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("DirectivesCalls");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        int i = 0;
        
        for(Macro macro: macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "DirectivesCalls");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeDirectivesCalls(macro);
            this.list_DirectivesCalls.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeDirectivesCalls (Macro macro) {
        macro.apply(new InternalsInitializer("DirectivesCalls"){
            @Override
            void setInitDirectiveCall(MInitDirectiveCall mInitDirectiveCall){
            
                
                
            }
        });
    }
    
    public void addDirectivesCalls(MInitDirectiveCall macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("DirectivesCalls");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_DirectivesCalls.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllInternalsCalls(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("InternalsCalls");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        int i = 0;
        
        for(Macro macro: macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "InternalsCalls");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeInternalsCalls(macro);
            this.list_InternalsCalls.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeInternalsCalls (Macro macro) {
        macro.apply(new InternalsInitializer("InternalsCalls"){
            @Override
            void setInitInternalsCall(MInitInternalsCall mInitInternalsCall){
            
                
                
            }
        });
    }
    
    public void addInternalsCalls(MInitInternalsCall macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("InternalsCalls");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_InternalsCalls.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllMacroBodyParts(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        int i = 0;
        
        for(Macro macro: macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "MacroBodyParts");
            }
        
            if(this.getMacros() != macro.getMacros()){
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeMacroBodyParts(macro);
            this.list_MacroBodyParts.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeMacroBodyParts (Macro macro) {
        macro.apply(new InternalsInitializer("MacroBodyParts"){
            @Override
            void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){
            
                
                
            }
            
            @Override
            void setStringPart(MStringPart mStringPart){
            
                
                
            }
            
            @Override
            void setParamInsertPart(MParamInsertPart mParamInsertPart){
            
                
                
            }
            
            @Override
            void setEolPart(MEolPart mEolPart){
            
                
                
            }
            
            @Override
            void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
            
                
                
            }
            
            @Override
            void setAddIndent(MAddIndent mAddIndent){
            
                
                
            }
            
            @Override
            void setIndentPart(MIndentPart mIndentPart){
            
                
                
            }
        });
    }
    
    public void addMacroBodyParts(MInitStringBuilder macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MStringPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MParamInsertPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MEolPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MInsertMacroPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MAddIndent macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addMacroBodyParts(MIndentPart macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("MacroBodyParts");
        }
        if(this.cacheBuilder != null){
            throw ObjectMacroException.cannotModify("MacroBuilder");
        }
        
        if(this.getMacros() != macro.getMacros()){
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_MacroBodyParts.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    private String buildContextParam(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ContextParamContext;
        List<Macro> macros = this.list_ContextParam;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.ContextParamNone != null){
            sb.append(this.ContextParamNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro: macros){
            expansion = macro.build(local_context);
    
            if(this.ContextParamBeforeFirst != null){
                expansion = this.ContextParamBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.ContextParamAfterLast != null){
                expansion = this.ContextParamAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.ContextParamSeparator != null){
                expansion = this.ContextParamSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildContextCacheBuilder(){
        StringBuilder sb = new StringBuilder();
        Context local_context = ContextCacheBuilderContext;
        List<Macro> macros = this.list_ContextCacheBuilder;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.ContextCacheBuilderNone != null){
            sb.append(this.ContextCacheBuilderNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro: macros){
            expansion = macro.build(local_context);
    
            if(this.ContextCacheBuilderBeforeFirst != null){
                expansion = this.ContextCacheBuilderBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.ContextCacheBuilderAfterLast != null){
                expansion = this.ContextCacheBuilderAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.ContextCacheBuilderSeparator != null){
                expansion = this.ContextCacheBuilderSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildNewCacheBuilder(){
        StringBuilder sb = new StringBuilder();
        Context local_context = NewCacheBuilderContext;
        List<Macro> macros = this.list_NewCacheBuilder;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.NewCacheBuilderNone != null){
            sb.append(this.NewCacheBuilderNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro: macros){
            expansion = macro.build(local_context);
    
            if(this.NewCacheBuilderBeforeFirst != null){
                expansion = this.NewCacheBuilderBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.NewCacheBuilderAfterLast != null){
                expansion = this.NewCacheBuilderAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.NewCacheBuilderSeparator != null){
                expansion = this.NewCacheBuilderSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildDirectivesCalls(){
        StringBuilder sb = new StringBuilder();
        Context local_context = DirectivesCallsContext;
        List<Macro> macros = this.list_DirectivesCalls;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.DirectivesCallsNone != null){
            sb.append(this.DirectivesCallsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro: macros){
            expansion = macro.build(local_context);
    
            if(this.DirectivesCallsBeforeFirst != null){
                expansion = this.DirectivesCallsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.DirectivesCallsAfterLast != null){
                expansion = this.DirectivesCallsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.DirectivesCallsSeparator != null){
                expansion = this.DirectivesCallsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildInternalsCalls(){
        StringBuilder sb = new StringBuilder();
        Context local_context = InternalsCallsContext;
        List<Macro> macros = this.list_InternalsCalls;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.InternalsCallsNone != null){
            sb.append(this.InternalsCallsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro: macros){
            expansion = macro.build(local_context);
    
            if(this.InternalsCallsBeforeFirst != null){
                expansion = this.InternalsCallsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.InternalsCallsAfterLast != null){
                expansion = this.InternalsCallsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.InternalsCallsSeparator != null){
                expansion = this.InternalsCallsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildMacroBodyParts(){
        StringBuilder sb = new StringBuilder();
        Context local_context = MacroBodyPartsContext;
        List<Macro> macros = this.list_MacroBodyParts;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.MacroBodyPartsNone != null){
            sb.append(this.MacroBodyPartsNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro: macros){
            expansion = macro.build(local_context);
    
            if(this.MacroBodyPartsBeforeFirst != null){
                expansion = this.MacroBodyPartsBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBodyPartsAfterLast != null){
                expansion = this.MacroBodyPartsAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.MacroBodyPartsSeparator != null){
                expansion = this.MacroBodyPartsSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private InternalValue getContextParam(){
        return this.ContextParamValue;
    }
    
    private InternalValue getContextCacheBuilder(){
        return this.ContextCacheBuilderValue;
    }
    
    private InternalValue getNewCacheBuilder(){
        return this.NewCacheBuilderValue;
    }
    
    private InternalValue getDirectivesCalls(){
        return this.DirectivesCallsValue;
    }
    
    private InternalValue getInternalsCalls(){
        return this.InternalsCallsValue;
    }
    
    private InternalValue getMacroBodyParts(){
        return this.MacroBodyPartsValue;
    }
    private void initContextParamInternals(Context context){
        for(Macro macro : this.list_ContextParam){
            macro.apply(new InternalsInitializer("ContextParam"){
                @Override
                void setContextParam(MContextParam mContextParam){
                
                    
                    
                }
            });
        }
    }
    
    private void initContextCacheBuilderInternals(Context context){
        for(Macro macro : this.list_ContextCacheBuilder){
            macro.apply(new InternalsInitializer("ContextCacheBuilder"){
                @Override
                void setContextCacheBuilder(MContextCacheBuilder mContextCacheBuilder){
                
                    
                    
                }
            });
        }
    }
    
    private void initNewCacheBuilderInternals(Context context){
        for(Macro macro : this.list_NewCacheBuilder){
            macro.apply(new InternalsInitializer("NewCacheBuilder"){
                @Override
                void setNewCacheBuilder(MNewCacheBuilder mNewCacheBuilder){
                
                    
                    
                }
            });
        }
    }
    
    private void initDirectivesCallsInternals(Context context){
        for(Macro macro : this.list_DirectivesCalls){
            macro.apply(new InternalsInitializer("DirectivesCalls"){
                @Override
                void setInitDirectiveCall(MInitDirectiveCall mInitDirectiveCall){
                
                    
                    
                }
            });
        }
    }
    
    private void initInternalsCallsInternals(Context context){
        for(Macro macro : this.list_InternalsCalls){
            macro.apply(new InternalsInitializer("InternalsCalls"){
                @Override
                void setInitInternalsCall(MInitInternalsCall mInitInternalsCall){
                
                    
                    
                }
            });
        }
    }
    
    private void initMacroBodyPartsInternals(Context context){
        for(Macro macro : this.list_MacroBodyParts){
            macro.apply(new InternalsInitializer("MacroBodyParts"){
                @Override
                void setInitStringBuilder(MInitStringBuilder mInitStringBuilder){
                
                    
                    
                }
                
                @Override
                void setStringPart(MStringPart mStringPart){
                
                    
                    
                }
                
                @Override
                void setParamInsertPart(MParamInsertPart mParamInsertPart){
                
                    
                    
                }
                
                @Override
                void setEolPart(MEolPart mEolPart){
                
                    
                    
                }
                
                @Override
                void setInsertMacroPart(MInsertMacroPart mInsertMacroPart){
                
                    
                    
                }
                
                @Override
                void setAddIndent(MAddIndent mAddIndent){
                
                    
                    
                }
                
                @Override
                void setIndentPart(MIndentPart mIndentPart){
                
                    
                    
                }
            });
        }
    }
    
    private void initContextParamDirectives(){
        
    }
    
    private void initContextCacheBuilderDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append("this.cacheBuilder");
        this.ContextCacheBuilderNone = new DNone(sb1.toString());
        this.ContextCacheBuilderValue.setNone(this.ContextCacheBuilderNone);
    }
    
    private void initNewCacheBuilderDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append("this.cacheBuilder = cache_builder");
        this.NewCacheBuilderNone = new DNone(sb1.toString());
        this.NewCacheBuilderValue.setNone(this.NewCacheBuilderNone);
    }
    
    private void initDirectivesCallsDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.DirectivesCallsSeparator = new DSeparator(sb1.toString());
        this.DirectivesCallsValue.setSeparator(this.DirectivesCallsSeparator);
    }
    
    private void initInternalsCallsDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.InternalsCallsSeparator = new DSeparator(sb1.toString());
        this.InternalsCallsValue.setSeparator(this.InternalsCallsSeparator);
    }
    
    private void initMacroBodyPartsDirectives(){
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.MacroBodyPartsSeparator = new DSeparator(sb1.toString());
        this.MacroBodyPartsValue.setSeparator(this.MacroBodyPartsSeparator);
    }
    @Override
     void apply(
             InternalsInitializer internalsInitializer){
    
         internalsInitializer.setMacroBuilder(this);
     }
    
    @Override
    public String build(){
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null){
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null){
            throw new InternalException("Cycle detection detected lately");
        }
        else{
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
        StringBuilder sbIndentation = new StringBuilder();
    
        initContextParamDirectives();
        initContextCacheBuilderDirectives();
        initNewCacheBuilderDirectives();
        initDirectivesCallsDirectives();
        initInternalsCallsDirectives();
        initMacroBodyPartsDirectives();
        
        initContextParamInternals(null);
        initContextCacheBuilderInternals(null);
        initNewCacheBuilderInternals(null);
        initDirectivesCallsInternals(null);
        initInternalsCallsInternals(null);
        initMacroBodyPartsInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("@Override");
        sb0.append(LINE_SEPARATOR);
        MPublic m1 = this.getMacros().newPublic();
        
        
        sb0.append(m1.build(null));
        sb0.append(" String build(");
        sb0.append(buildContextParam());
        sb0.append(")");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    CacheBuilder cache_builder = ");
        sb0.append(buildContextCacheBuilder());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    if(cache_builder == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        cache_builder = new CacheBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    else if(cache_builder.getExpansion() == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        throw new InternalException(\"Cycle detection detected lately\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    else");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return cache_builder.getExpansion();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    ");
        sb0.append(buildNewCacheBuilder());
        sb0.append(";");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    List<String> indentations = new LinkedList<>();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    StringBuilder sbIndentation = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        sb2.append("    ");
        indentations.add(sb2.toString());
        sb1.append(buildDirectivesCalls());
        sb1.append(LINE_SEPARATOR);
        sb1.append(LINE_SEPARATOR);
        sb1.append(buildInternalsCalls());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    StringBuilder sb0 = new StringBuilder();");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb3 = new StringBuilder();
        StringBuilder sb4 = new StringBuilder();
        sb4.append("    ");
        indentations.add(sb4.toString());
        sb3.append(buildMacroBodyParts());
        sb0.append(applyIndent(sb3.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    cache_builder.setExpansion(sb0.toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    return sb0.toString();");
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
     return build();
    }
    
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}