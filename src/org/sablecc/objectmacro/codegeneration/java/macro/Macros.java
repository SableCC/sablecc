/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;

public class Macros {

    private VERSIONS version;

    public Macros(
            VERSIONS version){

        if(version == null){
            throw ObjectMacroException.versionNull();
        }

        this.version = version;
    }

    public Macros(){
        this.version = null;
    }
    
    public MHeader newHeader(){
        MHeader mHeader;
    
        mHeader = new MHeader(this);
    
        return mHeader;
    }
    
    public MPackageDeclaration newPackageDeclaration(){
        MPackageDeclaration mPackageDeclaration;
    
        mPackageDeclaration = new MPackageDeclaration(this);
    
        return mPackageDeclaration;
    }
    
    public MPackageDeclaration newPackageDeclaration(String pPackageName){
        MPackageDeclaration mPackageDeclaration;
    
        mPackageDeclaration = new MPackageDeclaration(pPackageName, this);
    
        return mPackageDeclaration;
    }
    
    public MImportJavaUtil newImportJavaUtil(){
        MImportJavaUtil mImportJavaUtil;
    
        mImportJavaUtil = new MImportJavaUtil(this);
    
        return mImportJavaUtil;
    }
    
    public MContext newContext(){
        MContext mContext;
    
        mContext = new MContext(this);
    
        return mContext;
    }
    
    public MContext newContext(List<Macro> pPackageDeclaration){
        MContext mContext;
    
        mContext = new MContext(pPackageDeclaration, this);
    
        return mContext;
    }
    
    public MInternalsInitializer newInternalsInitializer(){
        MInternalsInitializer mInternalsInitializer;
    
        mInternalsInitializer = new MInternalsInitializer(this);
    
        return mInternalsInitializer;
    }
    
    public MInternalsInitializer newInternalsInitializer(List<Macro> pPackageDeclaration, List<Macro> pParentInternalSetters){
        MInternalsInitializer mInternalsInitializer;
    
        mInternalsInitializer = new MInternalsInitializer(pPackageDeclaration, pParentInternalSetters, this);
    
        return mInternalsInitializer;
    }
    
    public MParentInternalsSetter newParentInternalsSetter(){
        MParentInternalsSetter mParentInternalsSetter;
    
        mParentInternalsSetter = new MParentInternalsSetter(this);
    
        return mParentInternalsSetter;
    }
    
    public MParentInternalsSetter newParentInternalsSetter(String pName){
        MParentInternalsSetter mParentInternalsSetter;
    
        mParentInternalsSetter = new MParentInternalsSetter(pName, this);
    
        return mParentInternalsSetter;
    }
    
    public MCycleDetectorClass newCycleDetectorClass(){
        MCycleDetectorClass mCycleDetectorClass;
    
        mCycleDetectorClass = new MCycleDetectorClass(this);
    
        return mCycleDetectorClass;
    }
    
    public MCycleDetectorClass newCycleDetectorClass(List<Macro> pPackageDeclaration){
        MCycleDetectorClass mCycleDetectorClass;
    
        mCycleDetectorClass = new MCycleDetectorClass(pPackageDeclaration, this);
    
        return mCycleDetectorClass;
    }
    
    public MSuperMacro newSuperMacro(){
        MSuperMacro mSuperMacro;
    
        mSuperMacro = new MSuperMacro(this);
    
        return mSuperMacro;
    }
    
    public MSuperMacro newSuperMacro(List<Macro> pPackageDeclaration){
        MSuperMacro mSuperMacro;
    
        mSuperMacro = new MSuperMacro(pPackageDeclaration, this);
    
        return mSuperMacro;
    }
    
    public MSuperDirective newSuperDirective(){
        MSuperDirective mSuperDirective;
    
        mSuperDirective = new MSuperDirective(this);
    
        return mSuperDirective;
    }
    
    public MSuperDirective newSuperDirective(List<Macro> pPackageDeclaration){
        MSuperDirective mSuperDirective;
    
        mSuperDirective = new MSuperDirective(pPackageDeclaration, this);
    
        return mSuperDirective;
    }
    
    public MClassValue newClassValue(){
        MClassValue mClassValue;
    
        mClassValue = new MClassValue(this);
    
        return mClassValue;
    }
    
    public MClassValue newClassValue(List<Macro> pPackageDeclaration){
        MClassValue mClassValue;
    
        mClassValue = new MClassValue(pPackageDeclaration, this);
    
        return mClassValue;
    }
    
    public MClassMacroValue newClassMacroValue(){
        MClassMacroValue mClassMacroValue;
    
        mClassMacroValue = new MClassMacroValue(this);
    
        return mClassMacroValue;
    }
    
    public MClassMacroValue newClassMacroValue(List<Macro> pPackageDeclaration){
        MClassMacroValue mClassMacroValue;
    
        mClassMacroValue = new MClassMacroValue(pPackageDeclaration, this);
    
        return mClassMacroValue;
    }
    
    public MClassStringValue newClassStringValue(){
        MClassStringValue mClassStringValue;
    
        mClassStringValue = new MClassStringValue(this);
    
        return mClassStringValue;
    }
    
    public MClassStringValue newClassStringValue(List<Macro> pPackageDeclaration){
        MClassStringValue mClassStringValue;
    
        mClassStringValue = new MClassStringValue(pPackageDeclaration, this);
    
        return mClassStringValue;
    }
    
    public MClassCacheBuilder newClassCacheBuilder(){
        MClassCacheBuilder mClassCacheBuilder;
    
        mClassCacheBuilder = new MClassCacheBuilder(this);
    
        return mClassCacheBuilder;
    }
    
    public MClassCacheBuilder newClassCacheBuilder(List<Macro> pPackageDeclaration){
        MClassCacheBuilder mClassCacheBuilder;
    
        mClassCacheBuilder = new MClassCacheBuilder(pPackageDeclaration, this);
    
        return mClassCacheBuilder;
    }
    
    public MVersionEnumeration newVersionEnumeration(){
        MVersionEnumeration mVersionEnumeration;
    
        mVersionEnumeration = new MVersionEnumeration(this);
    
        return mVersionEnumeration;
    }
    
    public MVersionEnumeration newVersionEnumeration(List<Macro> pPackageDeclaration, String pVersions){
        MVersionEnumeration mVersionEnumeration;
    
        mVersionEnumeration = new MVersionEnumeration(pPackageDeclaration, pVersions, this);
    
        return mVersionEnumeration;
    }
    
    public MMacroFactory newMacroFactory(){
        MMacroFactory mMacroFactory;
    
        mMacroFactory = new MMacroFactory(this);
    
        return mMacroFactory;
    }
    
    public MMacroFactory newMacroFactory(List<Macro> pDefaultVersion, List<Macro> pPackageDeclaration, List<Macro> pNewMacroMethods){
        MMacroFactory mMacroFactory;
    
        mMacroFactory = new MMacroFactory(pDefaultVersion, pPackageDeclaration, pNewMacroMethods, this);
    
        return mMacroFactory;
    }
    
    public MMacroCreatorMethod newMacroCreatorMethod(){
        MMacroCreatorMethod mMacroCreatorMethod;
    
        mMacroCreatorMethod = new MMacroCreatorMethod(this);
    
        return mMacroCreatorMethod;
    }
    
    public MMacroCreatorMethod newMacroCreatorMethod(String pClassName, List<Macro> pVersionFactory, List<Macro> pArgs, List<Macro> pParameters){
        MMacroCreatorMethod mMacroCreatorMethod;
    
        mMacroCreatorMethod = new MMacroCreatorMethod(pClassName, pVersionFactory, pArgs, pParameters, this);
    
        return mMacroCreatorMethod;
    }
    
    public MSwitchVersion newSwitchVersion(){
        MSwitchVersion mSwitchVersion;
    
        mSwitchVersion = new MSwitchVersion(this);
    
        return mSwitchVersion;
    }
    
    public MSwitchVersion newSwitchVersion(List<Macro> pVersionCases){
        MSwitchVersion mSwitchVersion;
    
        mSwitchVersion = new MSwitchVersion(pVersionCases, this);
    
        return mSwitchVersion;
    }
    
    public MMacroCaseInit newMacroCaseInit(){
        MMacroCaseInit mMacroCaseInit;
    
        mMacroCaseInit = new MMacroCaseInit(this);
    
        return mMacroCaseInit;
    }
    
    public MMacroCaseInit newMacroCaseInit(String pVersion, String pVersionClassName){
        MMacroCaseInit mMacroCaseInit;
    
        mMacroCaseInit = new MMacroCaseInit(pVersion, pVersionClassName, this);
    
        return mMacroCaseInit;
    }
    
    public MVersion newVersion(){
        MVersion mVersion;
    
        mVersion = new MVersion(this);
    
        return mVersion;
    }
    
    public MVersion newVersion(String pDefaultCase){
        MVersion mVersion;
    
        mVersion = new MVersion(pDefaultCase, this);
    
        return mVersion;
    }
    
    public MMacro newMacro(){
        MMacro mMacro;
    
        mMacro = new MMacro(this);
    
        return mMacro;
    }
    
    public MMacro newMacro(String pClassName, String pParentClass, List<Macro> pPublic, List<Macro> pAbstract, List<Macro> pPackageDeclaration, List<Macro> pFields, List<Macro> pConstructor, List<Macro> pSetters, List<Macro> pBuilders, List<Macro> pGetters, List<Macro> pInitInternalsMethods, List<Macro> pInitDirectives, List<Macro> pRedefinedApplyInitializer, List<Macro> pMacroBuilders, List<Macro> pAppliedVersion, List<Macro> pInitMacrosMethod){
        MMacro mMacro;
    
        mMacro = new MMacro(pClassName, pParentClass, pPublic, pAbstract, pPackageDeclaration, pFields, pConstructor, pSetters, pBuilders, pGetters, pInitInternalsMethods, pInitDirectives, pRedefinedApplyInitializer, pMacroBuilders, pAppliedVersion, pInitMacrosMethod, this);
    
        return mMacro;
    }
    
    public MAppliedVersion newAppliedVersion(){
        MAppliedVersion mAppliedVersion;
    
        mAppliedVersion = new MAppliedVersion(this);
    
        return mAppliedVersion;
    }
    
    public MAppliedVersion newAppliedVersion(String pVersions){
        MAppliedVersion mAppliedVersion;
    
        mAppliedVersion = new MAppliedVersion(pVersions, this);
    
        return mAppliedVersion;
    }
    
    public MConstructor newConstructor(){
        MConstructor mConstructor;
    
        mConstructor = new MConstructor(this);
    
        return mConstructor;
    }
    
    public MConstructor newConstructor(List<Macro> pFieldInitializers, List<Macro> pParameters, List<Macro> pValuesInitializers, List<Macro> pSuper, List<Macro> pAddMacros, List<Macro> pAddStrings){
        MConstructor mConstructor;
    
        mConstructor = new MConstructor(pFieldInitializers, pParameters, pValuesInitializers, pSuper, pAddMacros, pAddStrings, this);
    
        return mConstructor;
    }
    
    public MInitInternal newInitInternal(){
        MInitInternal mInitInternal;
    
        mInitInternal = new MInitInternal(this);
    
        return mInitInternal;
    }
    
    public MInitInternal newInitInternal(String pName){
        MInitInternal mInitInternal;
    
        mInitInternal = new MInitInternal(pName, this);
    
        return mInitInternal;
    }
    
    public MInitParam newInitParam(){
        MInitParam mInitParam;
    
        mInitParam = new MInitParam(this);
    
        return mInitParam;
    }
    
    public MInitParam newInitParam(String pName){
        MInitParam mInitParam;
    
        mInitParam = new MInitParam(pName, this);
    
        return mInitParam;
    }
    
    public MInitMacroValue newInitMacroValue(){
        MInitMacroValue mInitMacroValue;
    
        mInitMacroValue = new MInitMacroValue(this);
    
        return mInitMacroValue;
    }
    
    public MInitMacroValue newInitMacroValue(String pParamName){
        MInitMacroValue mInitMacroValue;
    
        mInitMacroValue = new MInitMacroValue(pParamName, this);
    
        return mInitMacroValue;
    }
    
    public MInitStringValue newInitStringValue(){
        MInitStringValue mInitStringValue;
    
        mInitStringValue = new MInitStringValue(this);
    
        return mInitStringValue;
    }
    
    public MInitStringValue newInitStringValue(String pParamName){
        MInitStringValue mInitStringValue;
    
        mInitStringValue = new MInitStringValue(pParamName, this);
    
        return mInitStringValue;
    }
    
    public MSetMacrosCall newSetMacrosCall(){
        MSetMacrosCall mSetMacrosCall;
    
        mSetMacrosCall = new MSetMacrosCall(this);
    
        return mSetMacrosCall;
    }
    
    public MSuperCall newSuperCall(){
        MSuperCall mSuperCall;
    
        mSuperCall = new MSuperCall(this);
    
        return mSuperCall;
    }
    
    public MSuperCall newSuperCall(String pParameters){
        MSuperCall mSuperCall;
    
        mSuperCall = new MSuperCall(pParameters, this);
    
        return mSuperCall;
    }
    
    public MAddMacroCall newAddMacroCall(){
        MAddMacroCall mAddMacroCall;
    
        mAddMacroCall = new MAddMacroCall(this);
    
        return mAddMacroCall;
    }
    
    public MAddMacroCall newAddMacroCall(String pParamName){
        MAddMacroCall mAddMacroCall;
    
        mAddMacroCall = new MAddMacroCall(pParamName, this);
    
        return mAddMacroCall;
    }
    
    public MAddStringCall newAddStringCall(){
        MAddStringCall mAddStringCall;
    
        mAddStringCall = new MAddStringCall(this);
    
        return mAddStringCall;
    }
    
    public MAddStringCall newAddStringCall(String pParamName){
        MAddStringCall mAddStringCall;
    
        mAddStringCall = new MAddStringCall(pParamName, this);
    
        return mAddStringCall;
    }
    
    public MSingleMacroAdd newSingleMacroAdd(){
        MSingleMacroAdd mSingleMacroAdd;
    
        mSingleMacroAdd = new MSingleMacroAdd(this);
    
        return mSingleMacroAdd;
    }
    
    public MSingleMacroAdd newSingleMacroAdd(String pReferencedMacroName, String pParamName){
        MSingleMacroAdd mSingleMacroAdd;
    
        mSingleMacroAdd = new MSingleMacroAdd(pReferencedMacroName, pParamName, this);
    
        return mSingleMacroAdd;
    }
    
    public MSingleStringAdd newSingleStringAdd(){
        MSingleStringAdd mSingleStringAdd;
    
        mSingleStringAdd = new MSingleStringAdd(this);
    
        return mSingleStringAdd;
    }
    
    public MSingleStringAdd newSingleStringAdd(String pParamName){
        MSingleStringAdd mSingleStringAdd;
    
        mSingleStringAdd = new MSingleStringAdd(pParamName, this);
    
        return mSingleStringAdd;
    }
    
    public MAddAllMacro newAddAllMacro(){
        MAddAllMacro mAddAllMacro;
    
        mAddAllMacro = new MAddAllMacro(this);
    
        return mAddAllMacro;
    }
    
    public MAddAllMacro newAddAllMacro(String pParamName){
        MAddAllMacro mAddAllMacro;
    
        mAddAllMacro = new MAddAllMacro(pParamName, this);
    
        return mAddAllMacro;
    }
    
    public MAddAllString newAddAllString(){
        MAddAllString mAddAllString;
    
        mAddAllString = new MAddAllString(this);
    
        return mAddAllString;
    }
    
    public MAddAllString newAddAllString(String pParamName){
        MAddAllString mAddAllString;
    
        mAddAllString = new MAddAllString(pParamName, this);
    
        return mAddAllString;
    }
    
    public MTypeVerifier newTypeVerifier(){
        MTypeVerifier mTypeVerifier;
    
        mTypeVerifier = new MTypeVerifier(this);
    
        return mTypeVerifier;
    }
    
    public MTypeVerifier newTypeVerifier(String pParamName, List<Macro> pTypeVerification, List<Macro> pOverride){
        MTypeVerifier mTypeVerifier;
    
        mTypeVerifier = new MTypeVerifier(pParamName, pTypeVerification, pOverride, this);
    
        return mTypeVerifier;
    }
    
    public MAbstractTypeVerifier newAbstractTypeVerifier(){
        MAbstractTypeVerifier mAbstractTypeVerifier;
    
        mAbstractTypeVerifier = new MAbstractTypeVerifier(this);
    
        return mAbstractTypeVerifier;
    }
    
    public MAbstractTypeVerifier newAbstractTypeVerifier(String pParamName){
        MAbstractTypeVerifier mAbstractTypeVerifier;
    
        mAbstractTypeVerifier = new MAbstractTypeVerifier(pParamName, this);
    
        return mAbstractTypeVerifier;
    }
    
    public MFactoryComparison newFactoryComparison(){
        MFactoryComparison mFactoryComparison;
    
        mFactoryComparison = new MFactoryComparison(this);
    
        return mFactoryComparison;
    }
    
    public MIsBuilt newIsBuilt(){
        MIsBuilt mIsBuilt;
    
        mIsBuilt = new MIsBuilt(this);
    
        return mIsBuilt;
    }
    
    public MDirectiveApplier newDirectiveApplier(){
        MDirectiveApplier mDirectiveApplier;
    
        mDirectiveApplier = new MDirectiveApplier(this);
    
        return mDirectiveApplier;
    }
    
    public MDirectiveApplier newDirectiveApplier(String pDirectiveName){
        MDirectiveApplier mDirectiveApplier;
    
        mDirectiveApplier = new MDirectiveApplier(pDirectiveName, this);
    
        return mDirectiveApplier;
    }
    
    public MNoneDirective newNoneDirective(){
        MNoneDirective mNoneDirective;
    
        mNoneDirective = new MNoneDirective(this);
    
        return mNoneDirective;
    }
    
    public MDirectivesInitVerification newDirectivesInitVerification(){
        MDirectivesInitVerification mDirectivesInitVerification;
    
        mDirectivesInitVerification = new MDirectivesInitVerification(this);
    
        return mDirectivesInitVerification;
    }
    
    public MParamMacroRefBuilder newParamMacroRefBuilder(){
        MParamMacroRefBuilder mParamMacroRefBuilder;
    
        mParamMacroRefBuilder = new MParamMacroRefBuilder(this);
    
        return mParamMacroRefBuilder;
    }
    
    public MParamMacroRefBuilder newParamMacroRefBuilder(String pParamName, String pContextName, String pDirectivesName, List<Macro> pDirectivesInitVerification, List<Macro> pNoneDirectiveApply, List<Macro> pDirectivesAppliers){
        MParamMacroRefBuilder mParamMacroRefBuilder;
    
        mParamMacroRefBuilder = new MParamMacroRefBuilder(pParamName, pContextName, pDirectivesName, pDirectivesInitVerification, pNoneDirectiveApply, pDirectivesAppliers, this);
    
        return mParamMacroRefBuilder;
    }
    
    public MInternalMacroRefBuilder newInternalMacroRefBuilder(){
        MInternalMacroRefBuilder mInternalMacroRefBuilder;
    
        mInternalMacroRefBuilder = new MInternalMacroRefBuilder(this);
    
        return mInternalMacroRefBuilder;
    }
    
    public MInternalMacroRefBuilder newInternalMacroRefBuilder(String pInternalName){
        MInternalMacroRefBuilder mInternalMacroRefBuilder;
    
        mInternalMacroRefBuilder = new MInternalMacroRefBuilder(pInternalName, this);
    
        return mInternalMacroRefBuilder;
    }
    
    public MInternalMacroSetter newInternalMacroSetter(){
        MInternalMacroSetter mInternalMacroSetter;
    
        mInternalMacroSetter = new MInternalMacroSetter(this);
    
        return mInternalMacroSetter;
    }
    
    public MInternalMacroSetter newInternalMacroSetter(String pParamName){
        MInternalMacroSetter mInternalMacroSetter;
    
        mInternalMacroSetter = new MInternalMacroSetter(pParamName, this);
    
        return mInternalMacroSetter;
    }
    
    public MParamMacroRef newParamMacroRef(){
        MParamMacroRef mParamMacroRef;
    
        mParamMacroRef = new MParamMacroRef(this);
    
        return mParamMacroRef;
    }
    
    public MParamMacroRef newParamMacroRef(String pName){
        MParamMacroRef mParamMacroRef;
    
        mParamMacroRef = new MParamMacroRef(pName, this);
    
        return mParamMacroRef;
    }
    
    public MInternalMacroRef newInternalMacroRef(){
        MInternalMacroRef mInternalMacroRef;
    
        mInternalMacroRef = new MInternalMacroRef(this);
    
        return mInternalMacroRef;
    }
    
    public MInternalMacroRef newInternalMacroRef(String pParamName){
        MInternalMacroRef mInternalMacroRef;
    
        mInternalMacroRef = new MInternalMacroRef(pParamName, this);
    
        return mInternalMacroRef;
    }
    
    public MParamStringRef newParamStringRef(){
        MParamStringRef mParamStringRef;
    
        mParamStringRef = new MParamStringRef(this);
    
        return mParamStringRef;
    }
    
    public MParamStringRef newParamStringRef(String pName){
        MParamStringRef mParamStringRef;
    
        mParamStringRef = new MParamStringRef(pName, this);
    
        return mParamStringRef;
    }
    
    public MParamStringRefBuilder newParamStringRefBuilder(){
        MParamStringRefBuilder mParamStringRefBuilder;
    
        mParamStringRefBuilder = new MParamStringRefBuilder(this);
    
        return mParamStringRefBuilder;
    }
    
    public MParamStringRefBuilder newParamStringRefBuilder(String pParamName, String pDirectivesName, List<Macro> pDirectivesInitVerification, List<Macro> pNoneDirectiveApply, List<Macro> pDirectivesAppliers){
        MParamStringRefBuilder mParamStringRefBuilder;
    
        mParamStringRefBuilder = new MParamStringRefBuilder(pParamName, pDirectivesName, pDirectivesInitVerification, pNoneDirectiveApply, pDirectivesAppliers, this);
    
        return mParamStringRefBuilder;
    }
    
    public MInternalStringRef newInternalStringRef(){
        MInternalStringRef mInternalStringRef;
    
        mInternalStringRef = new MInternalStringRef(this);
    
        return mInternalStringRef;
    }
    
    public MInternalStringRef newInternalStringRef(String pName){
        MInternalStringRef mInternalStringRef;
    
        mInternalStringRef = new MInternalStringRef(pName, this);
    
        return mInternalStringRef;
    }
    
    public MInternalStringRefBuilder newInternalStringRefBuilder(){
        MInternalStringRefBuilder mInternalStringRefBuilder;
    
        mInternalStringRefBuilder = new MInternalStringRefBuilder(this);
    
        return mInternalStringRefBuilder;
    }
    
    public MInternalStringRefBuilder newInternalStringRefBuilder(String pInternalName){
        MInternalStringRefBuilder mInternalStringRefBuilder;
    
        mInternalStringRefBuilder = new MInternalStringRefBuilder(pInternalName, this);
    
        return mInternalStringRefBuilder;
    }
    
    public MInternalStringSetter newInternalStringSetter(){
        MInternalStringSetter mInternalStringSetter;
    
        mInternalStringSetter = new MInternalStringSetter(this);
    
        return mInternalStringSetter;
    }
    
    public MInternalStringSetter newInternalStringSetter(String pName){
        MInternalStringSetter mInternalStringSetter;
    
        mInternalStringSetter = new MInternalStringSetter(pName, this);
    
        return mInternalStringSetter;
    }
    
    public MInitInternalsMethod newInitInternalsMethod(){
        MInitInternalsMethod mInitInternalsMethod;
    
        mInitInternalsMethod = new MInitInternalsMethod(this);
    
        return mInitInternalsMethod;
    }
    
    public MInitInternalsMethod newInitInternalsMethod(String pParamName, List<Macro> pApplyInternalsInitializer){
        MInitInternalsMethod mInitInternalsMethod;
    
        mInitInternalsMethod = new MInitInternalsMethod(pParamName, pApplyInternalsInitializer, this);
    
        return mInitInternalsMethod;
    }
    
    public MInitDirectives newInitDirectives(){
        MInitDirectives mInitDirectives;
    
        mInitDirectives = new MInitDirectives(this);
    
        return mInitDirectives;
    }
    
    public MInitDirectives newInitDirectives(String pParamName, List<Macro> pNewDirectives){
        MInitDirectives mInitDirectives;
    
        mInitDirectives = new MInitDirectives(pParamName, pNewDirectives, this);
    
        return mInitDirectives;
    }
    
    public MNewDirective newNewDirective(){
        MNewDirective mNewDirective;
    
        mNewDirective = new MNewDirective(this);
    
        return mNewDirective;
    }
    
    public MNewDirective newNewDirective(String pDirectiveName, String pIndexBuilder, List<Macro> pTextParts){
        MNewDirective mNewDirective;
    
        mNewDirective = new MNewDirective(pDirectiveName, pIndexBuilder, pTextParts, this);
    
        return mNewDirective;
    }
    
    public MSetMacrosMethod newSetMacrosMethod(){
        MSetMacrosMethod mSetMacrosMethod;
    
        mSetMacrosMethod = new MSetMacrosMethod(this);
    
        return mSetMacrosMethod;
    }
    
    public MMacroBuilder newMacroBuilder(){
        MMacroBuilder mMacroBuilder;
    
        mMacroBuilder = new MMacroBuilder(this);
    
        return mMacroBuilder;
    }
    
    public MMacroBuilder newMacroBuilder(List<Macro> pContextParam, List<Macro> pContextCacheBuilder, List<Macro> pNewCacheBuilder, List<Macro> pDirectivesCalls, List<Macro> pInternalsCalls, List<Macro> pMacroBodyParts, List<Macro> pPublic, List<Macro> pOverride){
        MMacroBuilder mMacroBuilder;
    
        mMacroBuilder = new MMacroBuilder(pContextParam, pContextCacheBuilder, pNewCacheBuilder, pDirectivesCalls, pInternalsCalls, pMacroBodyParts, pPublic, pOverride, this);
    
        return mMacroBuilder;
    }
    
    public MInitDirectiveCall newInitDirectiveCall(){
        MInitDirectiveCall mInitDirectiveCall;
    
        mInitDirectiveCall = new MInitDirectiveCall(this);
    
        return mInitDirectiveCall;
    }
    
    public MInitDirectiveCall newInitDirectiveCall(String pParamName){
        MInitDirectiveCall mInitDirectiveCall;
    
        mInitDirectiveCall = new MInitDirectiveCall(pParamName, this);
    
        return mInitDirectiveCall;
    }
    
    public MInitInternalsCall newInitInternalsCall(){
        MInitInternalsCall mInitInternalsCall;
    
        mInitInternalsCall = new MInitInternalsCall(this);
    
        return mInitInternalsCall;
    }
    
    public MInitInternalsCall newInitInternalsCall(String pParamName, List<Macro> pContextArg){
        MInitInternalsCall mInitInternalsCall;
    
        mInitInternalsCall = new MInitInternalsCall(pParamName, pContextArg, this);
    
        return mInitInternalsCall;
    }
    
    public MAbstractBuilder newAbstractBuilder(){
        MAbstractBuilder mAbstractBuilder;
    
        mAbstractBuilder = new MAbstractBuilder(this);
    
        return mAbstractBuilder;
    }
    
    public MEmptyBuilderWithContext newEmptyBuilderWithContext(){
        MEmptyBuilderWithContext mEmptyBuilderWithContext;
    
        mEmptyBuilderWithContext = new MEmptyBuilderWithContext(this);
    
        return mEmptyBuilderWithContext;
    }
    
    public MContextCacheBuilder newContextCacheBuilder(){
        MContextCacheBuilder mContextCacheBuilder;
    
        mContextCacheBuilder = new MContextCacheBuilder(this);
    
        return mContextCacheBuilder;
    }
    
    public MNewCacheBuilder newNewCacheBuilder(){
        MNewCacheBuilder mNewCacheBuilder;
    
        mNewCacheBuilder = new MNewCacheBuilder(this);
    
        return mNewCacheBuilder;
    }
    
    public MRedefinedApplyInitializer newRedefinedApplyInitializer(){
        MRedefinedApplyInitializer mRedefinedApplyInitializer;
    
        mRedefinedApplyInitializer = new MRedefinedApplyInitializer(this);
    
        return mRedefinedApplyInitializer;
    }
    
    public MParamMacroField newParamMacroField(){
        MParamMacroField mParamMacroField;
    
        mParamMacroField = new MParamMacroField(this);
    
        return mParamMacroField;
    }
    
    public MParamMacroField newParamMacroField(String pParamName){
        MParamMacroField mParamMacroField;
    
        mParamMacroField = new MParamMacroField(pParamName, this);
    
        return mParamMacroField;
    }
    
    public MParamStringField newParamStringField(){
        MParamStringField mParamStringField;
    
        mParamStringField = new MParamStringField(this);
    
        return mParamStringField;
    }
    
    public MParamStringField newParamStringField(String pParamName){
        MParamStringField mParamStringField;
    
        mParamStringField = new MParamStringField(pParamName, this);
    
        return mParamStringField;
    }
    
    public MInternalMacroField newInternalMacroField(){
        MInternalMacroField mInternalMacroField;
    
        mInternalMacroField = new MInternalMacroField(this);
    
        return mInternalMacroField;
    }
    
    public MInternalMacroField newInternalMacroField(String pName){
        MInternalMacroField mInternalMacroField;
    
        mInternalMacroField = new MInternalMacroField(pName, this);
    
        return mInternalMacroField;
    }
    
    public MInternalStringField newInternalStringField(){
        MInternalStringField mInternalStringField;
    
        mInternalStringField = new MInternalStringField(this);
    
        return mInternalStringField;
    }
    
    public MInternalStringField newInternalStringField(String pName){
        MInternalStringField mInternalStringField;
    
        mInternalStringField = new MInternalStringField(pName, this);
    
        return mInternalStringField;
    }
    
    public MContextField newContextField(){
        MContextField mContextField;
    
        mContextField = new MContextField(this);
    
        return mContextField;
    }
    
    public MMacroValueField newMacroValueField(){
        MMacroValueField mMacroValueField;
    
        mMacroValueField = new MMacroValueField(this);
    
        return mMacroValueField;
    }
    
    public MStringValueField newStringValueField(){
        MStringValueField mStringValueField;
    
        mStringValueField = new MStringValueField(this);
    
        return mStringValueField;
    }
    
    public MDirectiveFields newDirectiveFields(){
        MDirectiveFields mDirectiveFields;
    
        mDirectiveFields = new MDirectiveFields(this);
    
        return mDirectiveFields;
    }
    
    public MDirectiveFields newDirectiveFields(String pParamName){
        MDirectiveFields mDirectiveFields;
    
        mDirectiveFields = new MDirectiveFields(pParamName, this);
    
        return mDirectiveFields;
    }
    
    public MApplyInternalsInitializer newApplyInternalsInitializer(){
        MApplyInternalsInitializer mApplyInternalsInitializer;
    
        mApplyInternalsInitializer = new MApplyInternalsInitializer(this);
    
        return mApplyInternalsInitializer;
    }
    
    public MApplyInternalsInitializer newApplyInternalsInitializer(List<Macro> pRedefinedInternalsSetter){
        MApplyInternalsInitializer mApplyInternalsInitializer;
    
        mApplyInternalsInitializer = new MApplyInternalsInitializer(pRedefinedInternalsSetter, this);
    
        return mApplyInternalsInitializer;
    }
    
    public MRedefinedInternalsSetter newRedefinedInternalsSetter(){
        MRedefinedInternalsSetter mRedefinedInternalsSetter;
    
        mRedefinedInternalsSetter = new MRedefinedInternalsSetter(this);
    
        return mRedefinedInternalsSetter;
    }
    
    public MRedefinedInternalsSetter newRedefinedInternalsSetter(String pMacroName, List<Macro> pTextParts, List<Macro> pSingleStringElements, List<Macro> pSetInternals){
        MRedefinedInternalsSetter mRedefinedInternalsSetter;
    
        mRedefinedInternalsSetter = new MRedefinedInternalsSetter(pMacroName, pTextParts, pSingleStringElements, pSetInternals, this);
    
        return mRedefinedInternalsSetter;
    }
    
    public MStringPart newStringPart(){
        MStringPart mStringPart;
    
        mStringPart = new MStringPart(this);
    
        return mStringPart;
    }
    
    public MStringPart newStringPart(String pString, String pIndexBuilder){
        MStringPart mStringPart;
    
        mStringPart = new MStringPart(pString, pIndexBuilder, this);
    
        return mStringPart;
    }
    
    public MEolPart newEolPart(){
        MEolPart mEolPart;
    
        mEolPart = new MEolPart(this);
    
        return mEolPart;
    }
    
    public MEolPart newEolPart(String pIndexBuilder){
        MEolPart mEolPart;
    
        mEolPart = new MEolPart(pIndexBuilder, this);
    
        return mEolPart;
    }
    
    public MParamInsertPart newParamInsertPart(){
        MParamInsertPart mParamInsertPart;
    
        mParamInsertPart = new MParamInsertPart(this);
    
        return mParamInsertPart;
    }
    
    public MParamInsertPart newParamInsertPart(String pParamName, String pIndexBuilder, List<Macro> pContextArg){
        MParamInsertPart mParamInsertPart;
    
        mParamInsertPart = new MParamInsertPart(pParamName, pIndexBuilder, pContextArg, this);
    
        return mParamInsertPart;
    }
    
    public MIndentPart newIndentPart(){
        MIndentPart mIndentPart;
    
        mIndentPart = new MIndentPart(this);
    
        return mIndentPart;
    }
    
    public MIndentPart newIndentPart(String pIndexBuilder, String pIndexIndent){
        MIndentPart mIndentPart;
    
        mIndentPart = new MIndentPart(pIndexBuilder, pIndexIndent, this);
    
        return mIndentPart;
    }
    
    public MInsertMacroPart newInsertMacroPart(){
        MInsertMacroPart mInsertMacroPart;
    
        mInsertMacroPart = new MInsertMacroPart(this);
    
        return mInsertMacroPart;
    }
    
    public MInsertMacroPart newInsertMacroPart(String pReferencedMacroName, String pEnclosingClassName, String pIndexBuilder, String pIndexInsert, List<Macro> pMacroBodyParts, List<Macro> pSetInternals, List<Macro> pSingleElementLists){
        MInsertMacroPart mInsertMacroPart;
    
        mInsertMacroPart = new MInsertMacroPart(pReferencedMacroName, pEnclosingClassName, pIndexBuilder, pIndexInsert, pMacroBodyParts, pSetInternals, pSingleElementLists, this);
    
        return mInsertMacroPart;
    }
    
    public MInitStringBuilder newInitStringBuilder(){
        MInitStringBuilder mInitStringBuilder;
    
        mInitStringBuilder = new MInitStringBuilder(this);
    
        return mInitStringBuilder;
    }
    
    public MInitStringBuilder newInitStringBuilder(String pIndexBuilder){
        MInitStringBuilder mInitStringBuilder;
    
        mInitStringBuilder = new MInitStringBuilder(pIndexBuilder, this);
    
        return mInitStringBuilder;
    }
    
    public MSetInternal newSetInternal(){
        MSetInternal mSetInternal;
    
        mSetInternal = new MSetInternal(this);
    
        return mSetInternal;
    }
    
    public MSetInternal newSetInternal(String pParamName, String pContext, List<Macro> pSetParams){
        MSetInternal mSetInternal;
    
        mSetInternal = new MSetInternal(pParamName, pContext, pSetParams, this);
    
        return mSetInternal;
    }
    
    public MNewStringValue newNewStringValue(){
        MNewStringValue mNewStringValue;
    
        mNewStringValue = new MNewStringValue(this);
    
        return mNewStringValue;
    }
    
    public MNewStringValue newNewStringValue(String pIndexBuilder){
        MNewStringValue mNewStringValue;
    
        mNewStringValue = new MNewStringValue(pIndexBuilder, this);
    
        return mNewStringValue;
    }
    
    public MParamRef newParamRef(){
        MParamRef mParamRef;
    
        mParamRef = new MParamRef(this);
    
        return mParamRef;
    }
    
    public MParamRef newParamRef(String pName, String pGetParams){
        MParamRef mParamRef;
    
        mParamRef = new MParamRef(pName, pGetParams, this);
    
        return mParamRef;
    }
    
    public MAddIndent newAddIndent(){
        MAddIndent mAddIndent;
    
        mAddIndent = new MAddIndent(this);
    
        return mAddIndent;
    }
    
    public MAddIndent newAddIndent(String pIndexBuilder, List<Macro> pIndentParts){
        MAddIndent mAddIndent;
    
        mAddIndent = new MAddIndent(pIndexBuilder, pIndentParts, this);
    
        return mAddIndent;
    }
    
    public MStringValueArg newStringValueArg(){
        MStringValueArg mStringValueArg;
    
        mStringValueArg = new MStringValueArg(this);
    
        return mStringValueArg;
    }
    
    public MStringValueArg newStringValueArg(String pIndex){
        MStringValueArg mStringValueArg;
    
        mStringValueArg = new MStringValueArg(pIndex, this);
    
        return mStringValueArg;
    }
    
    public MStringValue newStringValue(){
        MStringValue mStringValue;
    
        mStringValue = new MStringValue(this);
    
        return mStringValue;
    }
    
    public MStringValue newStringValue(String pString){
        MStringValue mStringValue;
    
        mStringValue = new MStringValue(pString, this);
    
        return mStringValue;
    }
    
    public MMacroArg newMacroArg(){
        MMacroArg mMacroArg;
    
        mMacroArg = new MMacroArg(this);
    
        return mMacroArg;
    }
    
    public MMacroArg newMacroArg(String pName){
        MMacroArg mMacroArg;
    
        mMacroArg = new MMacroArg(pName, this);
    
        return mMacroArg;
    }
    
    public MStringArg newStringArg(){
        MStringArg mStringArg;
    
        mStringArg = new MStringArg(this);
    
        return mStringArg;
    }
    
    public MStringArg newStringArg(String pName){
        MStringArg mStringArg;
    
        mStringArg = new MStringArg(pName, this);
    
        return mStringArg;
    }
    
    public MParamArg newParamArg(){
        MParamArg mParamArg;
    
        mParamArg = new MParamArg(this);
    
        return mParamArg;
    }
    
    public MParamArg newParamArg(String pName){
        MParamArg mParamArg;
    
        mParamArg = new MParamArg(pName, this);
    
        return mParamArg;
    }
    
    public MContextParam newContextParam(){
        MContextParam mContextParam;
    
        mContextParam = new MContextParam(this);
    
        return mContextParam;
    }
    
    public MContextArg newContextArg(){
        MContextArg mContextArg;
    
        mContextArg = new MContextArg(this);
    
        return mContextArg;
    }
    
    public MGetInternalTail newGetInternalTail(){
        MGetInternalTail mGetInternalTail;
    
        mGetInternalTail = new MGetInternalTail(this);
    
        return mGetInternalTail;
    }
    
    public MStringParam newStringParam(){
        MStringParam mStringParam;
    
        mStringParam = new MStringParam(this);
    
        return mStringParam;
    }
    
    public MStringParam newStringParam(String pName){
        MStringParam mStringParam;
    
        mStringParam = new MStringParam(pName, this);
    
        return mStringParam;
    }
    
    public MMacroParam newMacroParam(){
        MMacroParam mMacroParam;
    
        mMacroParam = new MMacroParam(this);
    
        return mMacroParam;
    }
    
    public MMacroParam newMacroParam(String pParamName){
        MMacroParam mMacroParam;
    
        mMacroParam = new MMacroParam(pParamName, this);
    
        return mMacroParam;
    }
    
    public MAbstract newAbstract(){
        MAbstract mAbstract;
    
        mAbstract = new MAbstract(this);
    
        return mAbstract;
    }
    
    public MMacrosParam newMacrosParam(){
        MMacrosParam mMacrosParam;
    
        mMacrosParam = new MMacrosParam(this);
    
        return mMacrosParam;
    }
    
    public MPublic newPublic(){
        MPublic mPublic;
    
        mPublic = new MPublic(this);
    
        return mPublic;
    }
    
    public MOverride newOverride(){
        MOverride mOverride;
    
        mOverride = new MOverride(this);
    
        return mOverride;
    }
    
    public MClassNone newClassNone(){
        MClassNone mClassNone;
    
        mClassNone = new MClassNone(this);
    
        return mClassNone;
    }
    
    public MClassNone newClassNone(List<Macro> pPackageDeclaration){
        MClassNone mClassNone;
    
        mClassNone = new MClassNone(pPackageDeclaration, this);
    
        return mClassNone;
    }
    
    public MClassBeforeFirst newClassBeforeFirst(){
        MClassBeforeFirst mClassBeforeFirst;
    
        mClassBeforeFirst = new MClassBeforeFirst(this);
    
        return mClassBeforeFirst;
    }
    
    public MClassBeforeFirst newClassBeforeFirst(List<Macro> pPackageDeclaration){
        MClassBeforeFirst mClassBeforeFirst;
    
        mClassBeforeFirst = new MClassBeforeFirst(pPackageDeclaration, this);
    
        return mClassBeforeFirst;
    }
    
    public MClassAfterLast newClassAfterLast(){
        MClassAfterLast mClassAfterLast;
    
        mClassAfterLast = new MClassAfterLast(this);
    
        return mClassAfterLast;
    }
    
    public MClassAfterLast newClassAfterLast(List<Macro> pPackageDeclaration){
        MClassAfterLast mClassAfterLast;
    
        mClassAfterLast = new MClassAfterLast(pPackageDeclaration, this);
    
        return mClassAfterLast;
    }
    
    public MClassSeparator newClassSeparator(){
        MClassSeparator mClassSeparator;
    
        mClassSeparator = new MClassSeparator(this);
    
        return mClassSeparator;
    }
    
    public MClassSeparator newClassSeparator(List<Macro> pPackageDeclaration){
        MClassSeparator mClassSeparator;
    
        mClassSeparator = new MClassSeparator(pPackageDeclaration, this);
    
        return mClassSeparator;
    }
    
    public MExInternalException newExInternalException(){
        MExInternalException mExInternalException;
    
        mExInternalException = new MExInternalException(this);
    
        return mExInternalException;
    }
    
    public MExInternalException newExInternalException(List<Macro> pPackageDeclaration){
        MExInternalException mExInternalException;
    
        mExInternalException = new MExInternalException(pPackageDeclaration, this);
    
        return mExInternalException;
    }
    
    public MExObjectMacroException newExObjectMacroException(){
        MExObjectMacroException mExObjectMacroException;
    
        mExObjectMacroException = new MExObjectMacroException(this);
    
        return mExObjectMacroException;
    }
    
    public MExObjectMacroException newExObjectMacroException(List<Macro> pPackageDeclaration){
        MExObjectMacroException mExObjectMacroException;
    
        mExObjectMacroException = new MExObjectMacroException(pPackageDeclaration, this);
    
        return mExObjectMacroException;
    }
    
    public MExIncorrectType newExIncorrectType(){
        MExIncorrectType mExIncorrectType;
    
        mExIncorrectType = new MExIncorrectType(this);
    
        return mExIncorrectType;
    }
    
    public MExIncorrectType newExIncorrectType(List<Macro> pPackageDeclaration){
        MExIncorrectType mExIncorrectType;
    
        mExIncorrectType = new MExIncorrectType(pPackageDeclaration, this);
    
        return mExIncorrectType;
    }
    
    public MExObjectMacroErrorHead newExObjectMacroErrorHead(){
        MExObjectMacroErrorHead mExObjectMacroErrorHead;
    
        mExObjectMacroErrorHead = new MExObjectMacroErrorHead(this);
    
        return mExObjectMacroErrorHead;
    }
    
    public MExObjectMacroErrorHead newExObjectMacroErrorHead(List<Macro> pPackageDeclaration){
        MExObjectMacroErrorHead mExObjectMacroErrorHead;
    
        mExObjectMacroErrorHead = new MExObjectMacroErrorHead(pPackageDeclaration, this);
    
        return mExObjectMacroErrorHead;
    }
    
    public MExParameterNull newExParameterNull(){
        MExParameterNull mExParameterNull;
    
        mExParameterNull = new MExParameterNull(this);
    
        return mExParameterNull;
    }
    
    public MExParameterNull newExParameterNull(List<Macro> pPackageDeclaration){
        MExParameterNull mExParameterNull;
    
        mExParameterNull = new MExParameterNull(pPackageDeclaration, this);
    
        return mExParameterNull;
    }
    
    public MExMacroNullInList newExMacroNullInList(){
        MExMacroNullInList mExMacroNullInList;
    
        mExMacroNullInList = new MExMacroNullInList(this);
    
        return mExMacroNullInList;
    }
    
    public MExMacroNullInList newExMacroNullInList(List<Macro> pPackageDeclaration){
        MExMacroNullInList mExMacroNullInList;
    
        mExMacroNullInList = new MExMacroNullInList(pPackageDeclaration, this);
    
        return mExMacroNullInList;
    }
    
    public MExCannotModify newExCannotModify(){
        MExCannotModify mExCannotModify;
    
        mExCannotModify = new MExCannotModify(this);
    
        return mExCannotModify;
    }
    
    public MExCannotModify newExCannotModify(List<Macro> pPackageDeclaration){
        MExCannotModify mExCannotModify;
    
        mExCannotModify = new MExCannotModify(pPackageDeclaration, this);
    
        return mExCannotModify;
    }
    
    public MExCyclicReference newExCyclicReference(){
        MExCyclicReference mExCyclicReference;
    
        mExCyclicReference = new MExCyclicReference(this);
    
        return mExCyclicReference;
    }
    
    public MExCyclicReference newExCyclicReference(List<Macro> pPackageDeclaration){
        MExCyclicReference mExCyclicReference;
    
        mExCyclicReference = new MExCyclicReference(pPackageDeclaration, this);
    
        return mExCyclicReference;
    }
    
    public MExVersionNull newExVersionNull(){
        MExVersionNull mExVersionNull;
    
        mExVersionNull = new MExVersionNull(this);
    
        return mExVersionNull;
    }
    
    public MExVersionNull newExVersionNull(List<Macro> pPackageDeclaration){
        MExVersionNull mExVersionNull;
    
        mExVersionNull = new MExVersionNull(pPackageDeclaration, this);
    
        return mExVersionNull;
    }
    
    public MMacroInternalException newMacroInternalException(){
        MMacroInternalException mMacroInternalException;
    
        mMacroInternalException = new MMacroInternalException(this);
    
        return mMacroInternalException;
    }
    
    public MMacroInternalException newMacroInternalException(List<Macro> pPackageDeclaration){
        MMacroInternalException mMacroInternalException;
    
        mMacroInternalException = new MMacroInternalException(pPackageDeclaration, this);
    
        return mMacroInternalException;
    }
    
    public MExVersionsDifferent newExVersionsDifferent(){
        MExVersionsDifferent mExVersionsDifferent;
    
        mExVersionsDifferent = new MExVersionsDifferent(this);
    
        return mExVersionsDifferent;
    }
    
    public MExVersionsDifferent newExVersionsDifferent(List<Macro> pPackageDeclaration){
        MExVersionsDifferent mExVersionsDifferent;
    
        mExVersionsDifferent = new MExVersionsDifferent(pPackageDeclaration, this);
    
        return mExVersionsDifferent;
    }
}