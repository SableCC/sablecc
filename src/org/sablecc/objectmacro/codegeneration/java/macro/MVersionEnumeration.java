/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MVersionEnumeration extends Macro {
    
    private DSeparator PackageDeclarationSeparator;
    
    private DBeforeFirst PackageDeclarationBeforeFirst;
    
    private DAfterLast PackageDeclarationAfterLast;
    
    private DNone PackageDeclarationNone;
    
    final List<Macro> list_PackageDeclaration;
    
    final Context PackageDeclarationContext = new Context();
    
    final MacroValue PackageDeclarationValue;
    
    private DSeparator VersionsSeparator;
    
    private DBeforeFirst VersionsBeforeFirst;
    
    private DAfterLast VersionsAfterLast;
    
    private DNone VersionsNone;
    
    final List<String> list_Versions;
    
    final Context VersionsContext = new Context();
    
    final StringValue VersionsValue;
    
    MVersionEnumeration(Macros macros){
        
        this.setMacros(macros);
        this.list_PackageDeclaration = new LinkedList<>();
        this.list_Versions = new LinkedList<>();
        
        this.PackageDeclarationValue = new MacroValue(this.list_PackageDeclaration, this.PackageDeclarationContext);
        this.VersionsValue = new StringValue(this.list_Versions, this.VersionsContext);
    }
    
    MVersionEnumeration(List<Macro> pPackageDeclaration, String pVersions, Macros macros){
        
        this.setMacros(macros);
        this.list_PackageDeclaration = new LinkedList<>();
        this.list_Versions = new LinkedList<>();
        
        this.PackageDeclarationValue = new MacroValue(this.list_PackageDeclaration, this.PackageDeclarationContext);
        this.VersionsValue = new StringValue(this.list_Versions, this.VersionsContext);
        if (pPackageDeclaration != null) {
            this.addAllPackageDeclaration(pPackageDeclaration);
        }
        
        if (pVersions != null) {
            this.addVersions(pVersions);
        }
    }
    
    public void addAllPackageDeclaration(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "PackageDeclaration");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypePackageDeclaration(macro);
            this.list_PackageDeclaration.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypePackageDeclaration (Macro macro) {
        macro.apply(new InternalsInitializer("PackageDeclaration"){
            @Override
            void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
                
            
            
            }
        });
    }
    
    public void addPackageDeclaration(MPackageDeclaration macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_PackageDeclaration.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    public void addAllVersions(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("Versions");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("Versions");
            }
    
            this.list_Versions.add(string);
        }
    }
    
    public void addVersions(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("Versions");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_Versions.add(string);
    }
    
    private String buildPackageDeclaration() {
    
        StringBuilder sb = new StringBuilder();
        Context local_context = this.PackageDeclarationContext;
        List<Macro> macros = this.list_PackageDeclaration;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
        
        if(this.PackageDeclarationBeforeFirst == null) {
            initPackageDeclarationDirectives();
        }
        
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
            
            expansion = this.PackageDeclarationBeforeFirst.apply(i, expansion, nb_macros);
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildVersions() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_Versions;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
    if(this.VersionsSeparator == null) {
        initVersionsDirectives();
    }
        
    
        for(String string : strings) {
            
    string = this.VersionsSeparator.apply(i, string, nb_strings);
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    MacroValue getPackageDeclaration() {
        return this.PackageDeclarationValue;
    }
    
    StringValue getVersions() {
        return this.VersionsValue;
    }
    
    private void initPackageDeclarationInternals(Context context) {
        for(Macro macro : this.list_PackageDeclaration) {
            macro.apply(new InternalsInitializer("PackageDeclaration"){
                @Override
                void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){
                    
                
                
                }
            });
        }
    }
    
    private void initPackageDeclarationDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(LINE_SEPARATOR);
        this.PackageDeclarationBeforeFirst = new DBeforeFirst(sb1.toString());
        this.PackageDeclarationValue.setBeforeFirst(this.PackageDeclarationBeforeFirst);
    }
    
    private void initVersionsDirectives() {
        StringBuilder sb1 = new StringBuilder();
        sb1.append(", ");
        this.VersionsSeparator = new DSeparator(sb1.toString());
        this.VersionsValue.setSeparator(this.VersionsSeparator);
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setVersionEnumeration(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initPackageDeclarationInternals(null);
        
        initPackageDeclarationDirectives();
        initVersionsDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        MHeader m1 = this.getMacros().newHeader();
        
        
        
        sb0.append(m1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildPackageDeclaration());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("public enum VERSIONS");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        sb2.append("    ");
        indentations.add(sb2.toString());
        sb1.append(buildVersions());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}