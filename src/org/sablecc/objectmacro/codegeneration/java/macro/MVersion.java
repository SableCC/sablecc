/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MVersion extends Macro {
    
    private DSeparator DefaultCaseSeparator;
    
    private DBeforeFirst DefaultCaseBeforeFirst;
    
    private DAfterLast DefaultCaseAfterLast;
    
    private DNone DefaultCaseNone;
    
    final List<String> list_DefaultCase;
    
    final Context DefaultCaseContext = new Context();
    
    final StringValue DefaultCaseValue;
    
    MVersion(Macros macros){
        
        this.setMacros(macros);
        this.list_DefaultCase = new LinkedList<>();
        
        this.DefaultCaseValue = new StringValue(this.list_DefaultCase, this.DefaultCaseContext);
    }
    
    MVersion(String pDefaultCase, Macros macros){
        
        this.setMacros(macros);
        this.list_DefaultCase = new LinkedList<>();
        
        this.DefaultCaseValue = new StringValue(this.list_DefaultCase, this.DefaultCaseContext);
        
        if (pDefaultCase != null) {
            this.addDefaultCase(pDefaultCase);
        }
    }
    
    public void addAllDefaultCase(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("DefaultCase");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("DefaultCase");
            }
    
            this.list_DefaultCase.add(string);
        }
    }
    
    public void addDefaultCase(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("DefaultCase");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_DefaultCase.add(string);
    }
    
    private String buildDefaultCase() {
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_DefaultCase;
    
        int i = 0;
        int nb_strings = strings.size();
    
        if(this.DefaultCaseNone != null) {
            sb.append(this.DefaultCaseNone.apply(i, "", nb_strings));
        }
    
        for(String string : strings) {
    
            if(this.DefaultCaseBeforeFirst != null) {
                string = this.DefaultCaseBeforeFirst.apply(i, string, nb_strings);
            }
    
            if(this.DefaultCaseAfterLast != null) {
                string = this.DefaultCaseAfterLast.apply(i, string, nb_strings);
            }
    
            if(this.DefaultCaseSeparator != null) {
                string = this.DefaultCaseSeparator.apply(i, string, nb_strings);
            }
    
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    StringValue getDefaultCase() {
        return this.DefaultCaseValue;
    }
    
    private void initDefaultCaseDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setVersion(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        
        initDefaultCaseDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append("VERSIONS.");
        sb0.append(buildDefaultCase());
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}