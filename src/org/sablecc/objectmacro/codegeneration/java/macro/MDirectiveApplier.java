/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;
import java.util.*;
public class MDirectiveApplier extends Macro {
    
    private DSeparator DirectiveNameSeparator;
    
    private DBeforeFirst DirectiveNameBeforeFirst;
    
    private DAfterLast DirectiveNameAfterLast;
    
    private DNone DirectiveNameNone;
    
    final List<String> list_DirectiveName;
    
    final Context DirectiveNameContext = new Context();
    
    final StringValue DirectiveNameValue;
    
    private Map<Context, StringValue> list_Index = new LinkedHashMap<>();
    
    private Map<Context, StringValue> list_SizeVarName = new LinkedHashMap<>();
    
    private Map<Context, StringValue> list_LocalVar = new LinkedHashMap<>();
    
    private Map<Context, StringValue> list_ParameterName = new LinkedHashMap<>();
    
    MDirectiveApplier(Macros macros){
        
        this.setMacros(macros);
        this.list_DirectiveName = new LinkedList<>();
        this.list_Index = new LinkedHashMap<>();
        this.list_SizeVarName = new LinkedHashMap<>();
        this.list_LocalVar = new LinkedHashMap<>();
        this.list_ParameterName = new LinkedHashMap<>();
        
        this.DirectiveNameValue = new StringValue(this.list_DirectiveName, this.DirectiveNameContext);
    }
    
    MDirectiveApplier(String pDirectiveName, Macros macros){
        
        this.setMacros(macros);
        this.list_DirectiveName = new LinkedList<>();
        this.list_Index = new LinkedHashMap<>();
        this.list_SizeVarName = new LinkedHashMap<>();
        this.list_LocalVar = new LinkedHashMap<>();
        this.list_ParameterName = new LinkedHashMap<>();
        
        this.DirectiveNameValue = new StringValue(this.list_DirectiveName, this.DirectiveNameContext);
        
        if (pDirectiveName != null) {
            this.addDirectiveName(pDirectiveName);
        }
    }
    
    public void addAllDirectiveName(
                    List<String> strings){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("DirectiveName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        for(String string : strings) {
            if(string == null) {
                throw ObjectMacroException.parameterNull("DirectiveName");
            }
    
            this.list_DirectiveName.add(string);
        }
    }
    
    public void addDirectiveName(String string){
        if(string == null){
            throw ObjectMacroException.parameterNull("DirectiveName");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
    
        this.list_DirectiveName.add(string);
    }
    
    void setIndex(
            Context context,
            StringValue value) {
    
        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }
    
        this.list_Index.put(context, value);
    }
    
    void setSizeVarName(
            Context context,
            StringValue value) {
    
        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }
    
        this.list_SizeVarName.put(context, value);
    }
    
    void setLocalVar(
            Context context,
            StringValue value) {
    
        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }
    
        this.list_LocalVar.put(context, value);
    }
    
    void setParameterName(
            Context context,
            StringValue value) {
    
        if(value == null){
            throw new RuntimeException("value cannot be null here");
        }
    
        this.list_ParameterName.put(context, value);
    }
    
    private String buildDirectiveName() {
    
        StringBuilder sb = new StringBuilder();
        List<String> strings = this.list_DirectiveName;
    
        int i = 0;
        int nb_strings = strings.size();
    
        
        
    
        for(String string : strings) {
            
            sb.append(string);
            i++;
        }
    
        return sb.toString();
    }
    
    private String buildIndex(Context context) {
    
        StringValue stringValue = this.list_Index.get(context);
        return stringValue.build();
    }
    
    private String buildSizeVarName(Context context) {
    
        StringValue stringValue = this.list_SizeVarName.get(context);
        return stringValue.build();
    }
    
    private String buildLocalVar(Context context) {
    
        StringValue stringValue = this.list_LocalVar.get(context);
        return stringValue.build();
    }
    
    private String buildParameterName(Context context) {
    
        StringValue stringValue = this.list_ParameterName.get(context);
        return stringValue.build();
    }
    
    StringValue getDirectiveName() {
        return this.DirectiveNameValue;
    }
    
    private StringValue getIndex(Context context) {
    
        return this.list_Index.get(context);
    }
    
    private StringValue getSizeVarName(Context context) {
    
        return this.list_SizeVarName.get(context);
    }
    
    private StringValue getLocalVar(Context context) {
    
        return this.list_LocalVar.get(context);
    }
    
    private StringValue getParameterName(Context context) {
    
        return this.list_ParameterName.get(context);
    }
    
    private void initDirectiveNameDirectives() {
        
    }
    
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setDirectiveApplier(this);
    }
    
    
    String build(Context context) {
    
        CacheBuilder cache_builder = this.cacheBuilders.get(context);
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        
    this.cacheBuilders.put(context, cache_builder);
        List<String> indentations = new LinkedList<>();
    
        
        initDirectiveNameDirectives();
    
        StringBuilder sb0 = new StringBuilder();
        
        sb0.append(buildLocalVar(context));
        sb0.append(" = this.");
        sb0.append(buildParameterName(context));
        sb0.append(buildDirectiveName());
        sb0.append(".apply(");
        sb0.append(buildIndex(context));
        sb0.append(", ");
        sb0.append(buildLocalVar(context));
        sb0.append(", ");
        sb0.append(buildSizeVarName(context));
        sb0.append(");");
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}