/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.java.macro;

public class MExObjectMacroException extends Macro{

    private Macro list_PackageDeclaration[];

    private final Context PackageDeclarationContext = new Context();

    public MExObjectMacroException(Macro pPackageDeclaration[]){

        this.setPPackageDeclaration(pPackageDeclaration);
    }

    private void setPPackageDeclaration(Macro pPackageDeclaration[]){
        if(pPackageDeclaration == null){
            throw ObjectMacroException.parameterNull("PackageDeclaration");
        }

        Macro macros[] = pPackageDeclaration;
        this.list_PackageDeclaration = new Macro[macros.length];
        int i = 0;

        for(Macro macro : macros){
            if(macro == null){
                throw ObjectMacroException.macroNull(i, "PackageDeclaration");
            }

            macro.apply(new InternalsInitializer("PackageDeclaration"){
@Override
void setPackageDeclaration(MPackageDeclaration mPackageDeclaration){

        }
});

            this.list_PackageDeclaration[i++] = macro;

        }
    }

    private String buildPackageDeclaration(){

        StringBuilder sb0 = new StringBuilder();
        Context local_context = PackageDeclarationContext;
        Macro macros[] = this.list_PackageDeclaration;
                boolean first = true;
        int i = 0;

        for(Macro macro : macros){
            if(first){
            sb0.append(LINE_SEPARATOR);
    first = false;
}
            
            sb0.append(macro.build(local_context));
            i++;

                    }

        return sb0.toString();
    }

    private Macro[] getPackageDeclaration(){

        return this.list_PackageDeclaration;
    }

    @Override
    void apply(
            InternalsInitializer internalsInitializer){

        internalsInitializer.setExObjectMacroException(this);
    }

    @Override
    public String build(){

        String local_expansion = this.expansion;

        if(local_expansion != null){
            return local_expansion;
        }

        StringBuilder sb0 = new StringBuilder();

        MHeader minsert_1 = new MHeader();
                        sb0.append(minsert_1.build(null));
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(buildPackageDeclaration());
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("public class ObjectMacroException");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        extends RuntimeException");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    private ObjectMacroException(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String message)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        super(message);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if(message == null)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            throw new RuntimeException(\"message may not be null\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    private ObjectMacroException(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String message,");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Throwable cause) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        super(message, cause);");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if (message == null) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            throw new RuntimeException(\"message may not be null\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        if (cause == null) ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            throw new RuntimeException(\"cause may not be null\");");
        sb0.append(LINE_SEPARATOR);
        sb0.append("        }");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    static ObjectMacroException incorrectType(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String type,");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String param_name)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return new ObjectMacroException(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                new MIncorrectType(type, param_name).toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    static ObjectMacroException macroNull(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            Integer index,");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String paramName)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return new ObjectMacroException(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("                new MMacroNullInList(String.valueOf(index), paramName).toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    static ObjectMacroException parameterNull(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String paramName)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return new ObjectMacroException(new MParameterNull(paramName).toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    static ObjectMacroException cyclicReference(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String macroName)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return new ObjectMacroException(new MCyclicReference(macroName).toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("    static ObjectMacroException cannotModify(");
        sb0.append(LINE_SEPARATOR);
        sb0.append("            String macroName)");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("        return new ObjectMacroException(new MCannotModify(macroName).toString());");
        sb0.append(LINE_SEPARATOR);
        sb0.append("    }");
        sb0.append(LINE_SEPARATOR);
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");

        local_expansion = sb0.toString();
        this.expansion = local_expansion;
        return local_expansion;
    }

    @Override
    String build(Context context) {
        return build();
    }
}
