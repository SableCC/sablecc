/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

public class MListC {

    public MListC() {

    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(new MHeader().toString());
        sb.append(System.getProperty("line.separator"));
        sb.append("#include \"List.h\"");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("int List_pushback(List* array, void* _elem_) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("  return List_pushback_MType(array, _elem_, 0);");
        sb.append(System.getProperty("line.separator"));
        sb.append("}");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("int List_pushback_MType(List* array, void* _elem_, int _bool_MType_) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("  Node* node = (Node*)calloc(1, sizeof(Node));");
        sb.append(System.getProperty("line.separator"));
        sb.append("  node->_next_ = NULL;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  node->_elem_ = _elem_;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  node->_bool_MType_ = _bool_MType_;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  if(array->_first_ == NULL)");
        sb.append(System.getProperty("line.separator"));
        sb.append("    array->_first_ = node;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  else");
        sb.append(System.getProperty("line.separator"));
        sb.append("    array->_last_->_next_ = node;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  array->_last_ = node;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  array->_size_++;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  if(_bool_MType_)");
        sb.append(System.getProperty("line.separator"));
        sb.append("    return 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  else");
        sb.append(System.getProperty("line.separator"));
        sb.append("    return strlen(_elem_);");
        sb.append(System.getProperty("line.separator"));
        sb.append("}");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("void List_free(List* array) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("  Node* temp = array->_first_;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  Node* temp2 = NULL;");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("  while(temp != NULL) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("    if(temp->_elem_ != NULL) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("      if(temp->_bool_MType_) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("        struct AbstractMacro* Mtemp = temp->_elem_;");
        sb.append(System.getProperty("line.separator"));
        sb.append("        Mtemp->free(Mtemp);");
        sb.append(System.getProperty("line.separator"));
        sb.append("      }");
        sb.append(System.getProperty("line.separator"));
        sb.append("      else");
        sb.append(System.getProperty("line.separator"));
        sb.append("        free(temp->_elem_);");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("    temp2 = temp;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    temp = temp->_next_;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    free(temp2);");
        sb.append(System.getProperty("line.separator"));
        sb.append("  }");
        sb.append(System.getProperty("line.separator"));
        sb.append("  free(array);");
        sb.append(System.getProperty("line.separator"));
        sb.append("}");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append("List* List_init() {");
        sb.append(System.getProperty("line.separator"));
        sb.append("  List* array = (List*)calloc(1, sizeof(List));");
        sb.append(System.getProperty("line.separator"));
        sb.append("  array->_size_ = 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  array->_first_ = NULL;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  array->_last_ = NULL;");
        sb.append(System.getProperty("line.separator"));
        sb.append("  return array;");
        sb.append(System.getProperty("line.separator"));
        sb.append("}");
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
