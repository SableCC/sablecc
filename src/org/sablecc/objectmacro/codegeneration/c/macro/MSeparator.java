/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.LinkedList;
import java.util.List;

public class MSeparator {

    private final MFile mFile;

    private final MExpandInsertPart mExpandInsertPart;

    private final List<Object> eBrace = new LinkedList<Object>();

    private final List<Object> eTextInsert = new LinkedList<Object>();

    private final List<Object> eInlineText_ParamInsert_TextInsertStr = new LinkedList<Object>();

    private final List<Object> eTextInsertDest = new LinkedList<Object>();

    private final List<Object> eBraceEnd = new LinkedList<Object>();

    MSeparator(
            MFile mFile,
            MExpandInsertPart mExpandInsertPart) {

        if (mFile == null) {
            throw new NullPointerException();
        }
        this.mFile = mFile;
        if (mExpandInsertPart == null) {
            throw new NullPointerException();
        }
        this.mExpandInsertPart = mExpandInsertPart;
    }

    public MBrace newBrace() {

        MBrace lBrace = new MBrace();
        this.eBrace.add(lBrace);
        return lBrace;
    }

    public MTextInsert newTextInsert(
            String pSname) {

        MTextInsert lTextInsert = new MTextInsert(pSname);
        this.eTextInsert.add(lTextInsert);
        return lTextInsert;
    }

    public MInlineText newInlineText() {

        MInlineText lInlineText = new MInlineText();
        this.eInlineText_ParamInsert_TextInsertStr.add(lInlineText);
        return lInlineText;
    }

    public MParamInsert newParamInsert(
            String pPname) {

        MParamInsert lParamInsert = new MParamInsert(pPname);
        this.eInlineText_ParamInsert_TextInsertStr.add(lParamInsert);
        return lParamInsert;
    }

    public MTextInsertStr newTextInsertStr(
            String pSname) {

        MTextInsertStr lTextInsertStr = new MTextInsertStr(pSname);
        this.eInlineText_ParamInsert_TextInsertStr.add(lTextInsertStr);
        return lTextInsertStr;
    }

    public MTextInsertDest newTextInsertDest(
            String pSname) {

        MTextInsertDest lTextInsertDest = new MTextInsertDest(pSname);
        this.eTextInsertDest.add(lTextInsertDest);
        return lTextInsertDest;
    }

    public MBraceEnd newBraceEnd() {

        MBraceEnd lBraceEnd = new MBraceEnd();
        this.eBraceEnd.add(lBraceEnd);
        return lBraceEnd;
    }

    private String rName() {

        return this.mFile.pName();
    }

    private String rPname() {

        return this.mExpandInsertPart.pPname();
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append("  {");
        sb.append(System.getProperty("line.separator"));
        sb.append("    int first = 1;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    MNode* temp = m");
        sb.append(rName());
        sb.append("->_e");
        sb.append(rPname());
        sb.append("_->_first_;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    while(temp != NULL) {");
        sb.append(System.getProperty("line.separator"));
        sb.append("      if(first)");
        sb.append(System.getProperty("line.separator"));
        sb.append("        first = 0;");
        sb.append(System.getProperty("line.separator"));
        sb.append("      else ");
        for (Object oBrace : this.eBrace) {
            sb.append(oBrace.toString());
        }
        sb.append("      ");
        if (this.eTextInsert.size() == 0) {
            sb.append(System.getProperty("line.separator"));
        }
        for (Object oTextInsert : this.eTextInsert) {
            sb.append(oTextInsert.toString());
        }
        sb.append("        size += MList_pushback(lsb, strdup(");
        if (this.eInlineText_ParamInsert_TextInsertStr.size() == 0) {
            sb.append("\"\"");
        }
        for (Object oInlineText_ParamInsert_TextInsertStr : this.eInlineText_ParamInsert_TextInsertStr) {
            sb.append(oInlineText_ParamInsert_TextInsertStr.toString());
        }
        sb.append("));");
        sb.append(System.getProperty("line.separator"));
        sb.append("      ");
        for (Object oTextInsertDest : this.eTextInsertDest) {
            sb.append(oTextInsertDest.toString());
        }
        sb.append("      ");
        for (Object oBraceEnd : this.eBraceEnd) {
            sb.append(oBraceEnd.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append("      struct MAbstractMacro* Mtemp = temp->_elem_;");
        sb.append(System.getProperty("line.separator"));
        sb.append("      size += MList_pushback(lsb, Mtemp->toString(Mtemp));");
        sb.append(System.getProperty("line.separator"));
        sb.append("      temp = temp->_next_;");
        sb.append(System.getProperty("line.separator"));
        sb.append("    }");
        sb.append(System.getProperty("line.separator"));
        sb.append("  }");
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
