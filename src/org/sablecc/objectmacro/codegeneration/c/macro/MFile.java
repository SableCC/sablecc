/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.c.macro;

import java.util.LinkedList;
import java.util.List;

public class MFile {

    private final String pName;

    private final MFile mFile = this;

    private final List<Object> eTextH = new LinkedList<Object>();

    private final List<Object> eTextC = new LinkedList<Object>();

    private final List<Object> eMacroH = new LinkedList<Object>();

    private final List<Object> eMacroC = new LinkedList<Object>();

    private final List<Object> eInclude = new LinkedList<Object>();

    private final List<Object> eSelfRefH = new LinkedList<Object>();

    private final List<Object> eSelfRefC = new LinkedList<Object>();

    private final List<Object> eParamField = new LinkedList<Object>();

    private final List<Object> eAncestorField = new LinkedList<Object>();

    private final List<Object> eExpandField = new LinkedList<Object>();

    private final List<Object> eExpandDestructor = new LinkedList<Object>();

    private final List<Object> eMacroCreator = new LinkedList<Object>();

    private final List<Object> eMacroCreatorPrototype = new LinkedList<Object>();

    private final List<Object> eParam = new LinkedList<Object>();

    private final List<Object> eParamPrototype = new LinkedList<Object>();

    private final List<Object> eParamRef = new LinkedList<Object>();

    private final List<Object> eParamRefPrototype = new LinkedList<Object>();

    private final List<Object> eParamParam = new LinkedList<Object>();

    private final List<Object> eAncestorParam = new LinkedList<Object>();

    private final List<Object> eParamArg = new LinkedList<Object>();

    private final List<Object> eAncestorArg = new LinkedList<Object>();

    private final List<Object> eParamConstructorInit = new LinkedList<Object>();

    private final List<Object> eAncestorConstructorInit = new LinkedList<Object>();

    private final List<Object> eExpandConstructorInit = new LinkedList<Object>();

    private final List<Object> eStringPart = new LinkedList<Object>();

    private final List<Object> eEolPart = new LinkedList<Object>();

    private final List<Object> eParamInsertPart = new LinkedList<Object>();

    private final List<Object> eTextInsertPart = new LinkedList<Object>();

    private final List<Object> eExpandInsertPart = new LinkedList<Object>();

    private final List<Object> eTextInsert = new LinkedList<Object>();

    private final List<Object> eTextInsertStr = new LinkedList<Object>();

    private final List<Object> eTextInsertDest = new LinkedList<Object>();

    private final List<Object> eInlineText = new LinkedList<Object>();

    private final List<Object> eInlineString = new LinkedList<Object>();

    private final List<Object> eInlineEol = new LinkedList<Object>();

    private final List<Object> eParamInsert = new LinkedList<Object>();

    private final List<Object> eTextInsertAncestor = new LinkedList<Object>();

    public MFile(
            String pName) {

        if (pName == null) {
            throw new NullPointerException();
        }
        this.pName = pName;
    }

    public MTextH newTextH() {

        MTextH lTextH = new MTextH(this.mFile);
        this.eTextH.add(lTextH);
        return lTextH;
    }

    public MTextC newTextC() {

        MTextC lTextC = new MTextC(this.mFile);
        this.eTextC.add(lTextC);
        return lTextC;
    }

    public MMacroH newMacroH() {

        MMacroH lMacroH = new MMacroH(this.mFile);
        this.eMacroH.add(lMacroH);
        return lMacroH;
    }

    public MMacroC newMacroC() {

        MMacroC lMacroC = new MMacroC(this.mFile);
        this.eMacroC.add(lMacroC);
        return lMacroC;
    }

    public MInclude newInclude(
            String pPname) {

        MInclude lInclude = new MInclude(pPname);
        this.eInclude.add(lInclude);
        return lInclude;
    }

    public MSelfRefH newSelfRefH() {

        MSelfRefH lSelfRefH = new MSelfRefH(this.mFile);
        this.eSelfRefH.add(lSelfRefH);
        return lSelfRefH;
    }

    public MSelfRefC newSelfRefC() {

        MSelfRefC lSelfRefC = new MSelfRefC(this.mFile);
        this.eSelfRefC.add(lSelfRefC);
        return lSelfRefC;
    }

    public MParamField newParamField(
            String pPname) {

        MParamField lParamField = new MParamField(pPname);
        this.eParamField.add(lParamField);
        return lParamField;
    }

    public MAncestorField newAncestorField(
            String pPname) {

        MAncestorField lAncestorField = new MAncestorField(pPname);
        this.eAncestorField.add(lAncestorField);
        return lAncestorField;
    }

    public MExpandField newExpandField(
            String pPname) {

        MExpandField lExpandField = new MExpandField(pPname);
        this.eExpandField.add(lExpandField);
        return lExpandField;
    }

    public MExpandDestructor newExpandDestructor(
            String pPname) {

        MExpandDestructor lExpandDestructor = new MExpandDestructor(pPname,
                this.mFile);
        this.eExpandDestructor.add(lExpandDestructor);
        return lExpandDestructor;
    }

    public MMacroCreator newMacroCreator(
            String pPname) {

        MMacroCreator lMacroCreator = new MMacroCreator(pPname, this.mFile);
        this.eMacroCreator.add(lMacroCreator);
        return lMacroCreator;
    }

    public MMacroCreatorPrototype newMacroCreatorPrototype(
            String pPname) {

        MMacroCreatorPrototype lMacroCreatorPrototype = new MMacroCreatorPrototype(
                pPname, this.mFile);
        this.eMacroCreatorPrototype.add(lMacroCreatorPrototype);
        return lMacroCreatorPrototype;
    }

    public MParam newParam(
            String pPname) {

        MParam lParam = new MParam(pPname, this.mFile);
        this.eParam.add(lParam);
        return lParam;
    }

    public MParamPrototype newParamPrototype(
            String pPname) {

        MParamPrototype lParamPrototype = new MParamPrototype(pPname,
                this.mFile);
        this.eParamPrototype.add(lParamPrototype);
        return lParamPrototype;
    }

    public MParamRef newParamRef(
            String pPname,
            String pContext) {

        MParamRef lParamRef = new MParamRef(pPname, pContext, this.mFile);
        this.eParamRef.add(lParamRef);
        return lParamRef;
    }

    public MParamRefPrototype newParamRefPrototype(
            String pPname) {

        MParamRefPrototype lParamRefPrototype = new MParamRefPrototype(pPname,
                this.mFile);
        this.eParamRefPrototype.add(lParamRefPrototype);
        return lParamRefPrototype;
    }

    public MParamParam newParamParam(
            String pPname) {

        MParamParam lParamParam = new MParamParam(pPname);
        this.eParamParam.add(lParamParam);
        return lParamParam;
    }

    public MAncestorParam newAncestorParam(
            String pPname) {

        MAncestorParam lAncestorParam = new MAncestorParam(pPname);
        this.eAncestorParam.add(lAncestorParam);
        return lAncestorParam;
    }

    public MParamArg newParamArg(
            String pPname) {

        MParamArg lParamArg = new MParamArg(pPname);
        this.eParamArg.add(lParamArg);
        return lParamArg;
    }

    public MAncestorArg newAncestorArg(
            String pPname) {

        MAncestorArg lAncestorArg = new MAncestorArg(pPname, this.mFile);
        this.eAncestorArg.add(lAncestorArg);
        return lAncestorArg;
    }

    public MParamConstructorInit newParamConstructorInit(
            String pPname) {

        MParamConstructorInit lParamConstructorInit = new MParamConstructorInit(
                pPname, this.mFile);
        this.eParamConstructorInit.add(lParamConstructorInit);
        return lParamConstructorInit;
    }

    public MAncestorConstructorInit newAncestorConstructorInit(
            String pPname) {

        MAncestorConstructorInit lAncestorConstructorInit = new MAncestorConstructorInit(
                pPname, this.mFile);
        this.eAncestorConstructorInit.add(lAncestorConstructorInit);
        return lAncestorConstructorInit;
    }

    public MExpandConstructorInit newExpandConstructorInit(
            String pPname) {

        MExpandConstructorInit lExpandConstructorInit = new MExpandConstructorInit(
                pPname, this.mFile);
        this.eExpandConstructorInit.add(lExpandConstructorInit);
        return lExpandConstructorInit;
    }

    public MStringPart newStringPart(
            String pString) {

        MStringPart lStringPart = new MStringPart(pString);
        this.eStringPart.add(lStringPart);
        return lStringPart;
    }

    public MEolPart newEolPart() {

        MEolPart lEolPart = new MEolPart();
        this.eEolPart.add(lEolPart);
        return lEolPart;
    }

    public MParamInsertPart newParamInsertPart(
            String pPname) {

        MParamInsertPart lParamInsertPart = new MParamInsertPart(pPname,
                this.mFile);
        this.eParamInsertPart.add(lParamInsertPart);
        return lParamInsertPart;
    }

    public MTextInsertPart newTextInsertPart() {

        MTextInsertPart lTextInsertPart = new MTextInsertPart();
        this.eTextInsertPart.add(lTextInsertPart);
        return lTextInsertPart;
    }

    public MExpandInsertPart newExpandInsertPart(
            String pPname) {

        MExpandInsertPart lExpandInsertPart = new MExpandInsertPart(pPname,
                this.mFile);
        this.eExpandInsertPart.add(lExpandInsertPart);
        return lExpandInsertPart;
    }

    public MTextInsert newTextInsert(
            String pSname) {

        MTextInsert lTextInsert = new MTextInsert(pSname);
        this.eTextInsert.add(lTextInsert);
        return lTextInsert;
    }

    public MTextInsertStr newTextInsertStr(
            String pSname) {

        MTextInsertStr lTextInsertStr = new MTextInsertStr(pSname);
        this.eTextInsertStr.add(lTextInsertStr);
        return lTextInsertStr;
    }

    public MTextInsertDest newTextInsertDest(
            String pSname) {

        MTextInsertDest lTextInsertDest = new MTextInsertDest(pSname);
        this.eTextInsertDest.add(lTextInsertDest);
        return lTextInsertDest;
    }

    public MInlineText newInlineText() {

        MInlineText lInlineText = new MInlineText();
        this.eInlineText.add(lInlineText);
        return lInlineText;
    }

    public MInlineString newInlineString(
            String pString) {

        MInlineString lInlineString = new MInlineString(pString);
        this.eInlineString.add(lInlineString);
        return lInlineString;
    }

    public MInlineEol newInlineEol() {

        MInlineEol lInlineEol = new MInlineEol();
        this.eInlineEol.add(lInlineEol);
        return lInlineEol;
    }

    public MParamInsert newParamInsert(
            String pPname) {

        MParamInsert lParamInsert = new MParamInsert(pPname);
        this.eParamInsert.add(lParamInsert);
        return lParamInsert;
    }

    public MTextInsertAncestor newTextInsertAncestor(
            String pPname) {

        MTextInsertAncestor lTextInsertAncestor = new MTextInsertAncestor(
                pPname);
        this.eTextInsertAncestor.add(lTextInsertAncestor);
        return lTextInsertAncestor;
    }

    String pName() {

        return this.pName;
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oTextH : this.eTextH) {
            sb.append(oTextH.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oTextC : this.eTextC) {
            sb.append(oTextC.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oMacroH : this.eMacroH) {
            sb.append(oMacroH.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oMacroC : this.eMacroC) {
            sb.append(oMacroC.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oInclude : this.eInclude) {
            sb.append(oInclude.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oSelfRefH : this.eSelfRefH) {
            sb.append(oSelfRefH.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oSelfRefC : this.eSelfRefC) {
            sb.append(oSelfRefC.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamField : this.eParamField) {
            sb.append(oParamField.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oAncestorField : this.eAncestorField) {
            sb.append(oAncestorField.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oExpandField : this.eExpandField) {
            sb.append(oExpandField.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oExpandDestructor : this.eExpandDestructor) {
            sb.append(oExpandDestructor.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oMacroCreator : this.eMacroCreator) {
            sb.append(oMacroCreator.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oMacroCreatorPrototype : this.eMacroCreatorPrototype) {
            sb.append(oMacroCreatorPrototype.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParam : this.eParam) {
            sb.append(oParam.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamPrototype : this.eParamPrototype) {
            sb.append(oParamPrototype.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamRef : this.eParamRef) {
            sb.append(oParamRef.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamRefPrototype : this.eParamRefPrototype) {
            sb.append(oParamRefPrototype.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamParam : this.eParamParam) {
            sb.append(oParamParam.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oAncestorParam : this.eAncestorParam) {
            sb.append(oAncestorParam.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamArg : this.eParamArg) {
            sb.append(oParamArg.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oAncestorArg : this.eAncestorArg) {
            sb.append(oAncestorArg.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamConstructorInit : this.eParamConstructorInit) {
            sb.append(oParamConstructorInit.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oAncestorConstructorInit : this.eAncestorConstructorInit) {
            sb.append(oAncestorConstructorInit.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oExpandConstructorInit : this.eExpandConstructorInit) {
            sb.append(oExpandConstructorInit.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oStringPart : this.eStringPart) {
            sb.append(oStringPart.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oEolPart : this.eEolPart) {
            sb.append(oEolPart.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamInsertPart : this.eParamInsertPart) {
            sb.append(oParamInsertPart.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oTextInsertPart : this.eTextInsertPart) {
            sb.append(oTextInsertPart.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oExpandInsertPart : this.eExpandInsertPart) {
            sb.append(oExpandInsertPart.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oTextInsert : this.eTextInsert) {
            sb.append(oTextInsert.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oTextInsertStr : this.eTextInsertStr) {
            sb.append(oTextInsertStr.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oTextInsertDest : this.eTextInsertDest) {
            sb.append(oTextInsertDest.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oInlineText : this.eInlineText) {
            sb.append(oInlineText.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oInlineString : this.eInlineString) {
            sb.append(oInlineString.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oInlineEol : this.eInlineEol) {
            sb.append(oInlineEol.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oParamInsert : this.eParamInsert) {
            sb.append(oParamInsert.toString());
        }
        sb.append(System.getProperty("line.separator"));
        sb.append(System.getProperty("line.separator"));
        for (Object oTextInsertAncestor : this.eTextInsertAncestor) {
            sb.append(oTextInsertAncestor.toString());
        }
        sb.append(System.getProperty("line.separator"));
        return sb.toString();
    }

}
