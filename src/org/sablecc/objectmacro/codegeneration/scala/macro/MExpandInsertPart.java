/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.codegeneration.scala.macro;

import java.util.LinkedList;
import java.util.List;

public class MExpandInsertPart {

    private final String pName;

    private final MExpandInsertPart mExpandInsertPart = this;

    private final List<Object> eNone = new LinkedList<Object>();

    private final List<Object> eBeforeFirst = new LinkedList<Object>();

    private final List<Object> eSeparator = new LinkedList<Object>();

    private final List<Object> eNoSeparator = new LinkedList<Object>();

    private final List<Object> eAfterLast = new LinkedList<Object>();

    public MExpandInsertPart(
            String pName) {

        if (pName == null) {
            throw new NullPointerException();
        }
        this.pName = pName;
    }

    public MNone newNone() {

        MNone lNone = new MNone(this.mExpandInsertPart);
        this.eNone.add(lNone);
        return lNone;
    }

    public MBeforeFirst newBeforeFirst() {

        MBeforeFirst lBeforeFirst = new MBeforeFirst(this.mExpandInsertPart);
        this.eBeforeFirst.add(lBeforeFirst);
        return lBeforeFirst;
    }

    public MSeparator newSeparator() {

        MSeparator lSeparator = new MSeparator(this.mExpandInsertPart);
        this.eSeparator.add(lSeparator);
        return lSeparator;
    }

    public MNoSeparator newNoSeparator() {

        MNoSeparator lNoSeparator = new MNoSeparator(this.mExpandInsertPart);
        this.eNoSeparator.add(lNoSeparator);
        return lNoSeparator;
    }

    public MAfterLast newAfterLast() {

        MAfterLast lAfterLast = new MAfterLast(this.mExpandInsertPart);
        this.eAfterLast.add(lAfterLast);
        return lAfterLast;
    }

    String pName() {

        return this.pName;
    }

    @Override
    public String toString() {

        StringBuilder sb = new StringBuilder();
        for (Object oNone : this.eNone) {
            sb.append(oNone.toString());
        }
        for (Object oBeforeFirst : this.eBeforeFirst) {
            sb.append(oBeforeFirst.toString());
        }
        for (Object oSeparator : this.eSeparator) {
            sb.append(oSeparator.toString());
        }
        for (Object oNoSeparator : this.eNoSeparator) {
            sb.append(oNoSeparator.toString());
        }
        for (Object oAfterLast : this.eAfterLast) {
            sb.append(oAfterLast.toString());
        }
        return sb.toString();
    }

}
