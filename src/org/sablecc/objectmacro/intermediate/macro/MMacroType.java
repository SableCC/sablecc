/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.intermediate.macro;

import java.util.*;

public class MMacroType extends Macro {
    
    private DSeparator ReferencesSeparator;
    
    private DBeforeFirst ReferencesBeforeFirst;
    
    private DAfterLast ReferencesAfterLast;
    
    private DNone ReferencesNone;
    
    final List<Macro> list_References;
    
    final Context ReferencesContext = new Context();
    
    final MacroValue ReferencesValue;
    
    MMacroType(Macros macros){
        
        
        this.setMacros(macros);
        this.list_References = new LinkedList<>();
        
        this.ReferencesValue = new MacroValue(this.list_References, this.ReferencesContext);
    }
    
    public void addAllReferences(
                    List<Macro> macros){
    
        if(macros == null){
            throw ObjectMacroException.parameterNull("References");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        int i = 0;
        
        for(Macro macro : macros) {
            if(macro == null) {
                throw ObjectMacroException.macroNull(i, "References");
            }
        
            if(this.getMacros() != macro.getMacros()) {
                throw ObjectMacroException.diffMacros();
            }
        
            this.verifyTypeReferences(macro);
            this.list_References.add(macro);
            this.children.add(macro);
            Macro.cycleDetector.detectCycle(this, macro);
        
            i++;
        }
    }
    
    
    void verifyTypeReferences (Macro macro) {
        macro.apply(new InternalsInitializer("References"){
            @Override
            void setMacroRef(MMacroRef mMacroRef){
                
            
            
            }
        });
    }
    
    public void addReferences(MMacroRef macro){
        if(macro == null){
            throw ObjectMacroException.parameterNull("References");
        }
        if(this.cacheBuilder != null) {
            throw ObjectMacroException.cannotModify(this.getClass().getSimpleName());
        }
        
        if(this.getMacros() != macro.getMacros()) {
            throw ObjectMacroException.diffMacros();
        }
    
        this.list_References.add(macro);
        this.children.add(macro);
        Macro.cycleDetector.detectCycle(this, macro);
    }
    
    private String buildReferences() {
        StringBuilder sb = new StringBuilder();
        Context local_context = this.ReferencesContext;
        List<Macro> macros = this.list_References;
    
        int i = 0;
        int nb_macros = macros.size();
        String expansion = null;
    
        if(this.ReferencesNone != null) {
            sb.append(this.ReferencesNone.apply(i, "", nb_macros));
        }
    
        for(Macro macro : macros) {
            expansion = macro.build(local_context);
    
            if(this.ReferencesBeforeFirst != null) {
                expansion = this.ReferencesBeforeFirst.apply(i, expansion, nb_macros);
            }
    
            if(this.ReferencesAfterLast != null) {
                expansion = this.ReferencesAfterLast.apply(i, expansion, nb_macros);
            }
    
            if(this.ReferencesSeparator != null) {
                expansion = this.ReferencesSeparator.apply(i, expansion, nb_macros);
            }
    
            sb.append(expansion);
            i++;
        }
    
        return sb.toString();
    }
    
    MacroValue getReferences() {
        return this.ReferencesValue;
    }
    private void initReferencesInternals(Context context) {
        for(Macro macro : this.list_References) {
            macro.apply(new InternalsInitializer("References"){
                @Override
                void setMacroRef(MMacroRef mMacroRef){
                    
                
                
                }
            });
        }
    }
    
    private void initReferencesDirectives() {
        
    }
    @Override
    void apply(
            InternalsInitializer internalsInitializer) {
    
        internalsInitializer.setMacroType(this);
    }
    
    
    public String build() {
    
        CacheBuilder cache_builder = this.cacheBuilder;
    
        if(cache_builder == null) {
            cache_builder = new CacheBuilder();
        }
        else if(cache_builder.getExpansion() == null) {
            throw new InternalException("Cycle detection detected lately");
        }
        else {
            return cache_builder.getExpansion();
        }
        this.cacheBuilder = cache_builder;
        List<String> indentations = new LinkedList<>();
    
        initReferencesDirectives();
        initReferencesDirectives();
        
        initReferencesInternals(null);
    
        StringBuilder sb0 = new StringBuilder();
    
        sb0.append("Type ");
        sb0.append("{");
        sb0.append(LINE_SEPARATOR);
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        sb2.append("    ");
        indentations.add(sb2.toString());
        sb1.append(buildReferences());
        sb0.append(applyIndent(sb1.toString(), indentations.remove(indentations.size() - 1)));
        sb0.append(LINE_SEPARATOR);
        sb0.append("}");
    
        cache_builder.setExpansion(sb0.toString());
        return sb0.toString();
    }
    
    @Override
    String build(Context context) {
        return build();
    }
    
    private void setMacros(Macros macros){
        if(macros == null){
            throw new InternalException("macros cannot be null");
        }
    
        this.macros = macros;
    }
}