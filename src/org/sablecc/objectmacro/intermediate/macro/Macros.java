/* This file was generated by SableCC's ObjectMacro. */

package org.sablecc.objectmacro.intermediate.macro;
import java.util.*;

public class Macros{
    private VERSIONS version;

    public Macros(
            VERSIONS version){

        if(version == null){
            throw ObjectMacroException.versionNull();
        }

        this.version = version;
    }

    public Macros(){
        this.version = null;
    }
    
    public MIntermediateRepresentation newIntermediateRepresentation(){
        MIntermediateRepresentation mIntermediateRepresentation;
    
        mIntermediateRepresentation = new MIntermediateRepresentation(this);
    
        return mIntermediateRepresentation;
    }
    
    public MMacro newMacro(){
        MMacro mMacro;
    
        mMacro = new MMacro(this);
    
        return mMacro;
    }
    
    public MParam newParam(){
        MParam mParam;
    
        mParam = new MParam(this);
    
        return mParam;
    }
    
    public MInternal newInternal(){
        MInternal mInternal;
    
        mInternal = new MInternal(this);
    
        return mInternal;
    }
    
    public MStringType newStringType(){
        MStringType mStringType;
    
        mStringType = new MStringType(this);
    
        return mStringType;
    }
    
    public MMacroType newMacroType(){
        MMacroType mMacroType;
    
        mMacroType = new MMacroType(this);
    
        return mMacroType;
    }
    
    public MMacroRef newMacroRef(){
        MMacroRef mMacroRef;
    
        mMacroRef = new MMacroRef(this);
    
        return mMacroRef;
    }
    
    public MArgs newArgs(){
        MArgs mArgs;
    
        mArgs = new MArgs(this);
    
        return mArgs;
    }
    
    public MVarArgument newVarArgument(String pParamName){
        MVarArgument mVarArgument;
    
        mVarArgument = new MVarArgument(pParamName, this);
    
        return mVarArgument;
    }
    
    public MTextArgument newTextArgument(String pParamName){
        MTextArgument mTextArgument;
    
        mTextArgument = new MTextArgument(pParamName, this);
    
        return mTextArgument;
    }
    
    public MParamName newParamName(){
        MParamName mParamName;
    
        mParamName = new MParamName(this);
    
        return mParamName;
    }
    
    public MStringPart newStringPart(String pText){
        MStringPart mStringPart;
    
        mStringPart = new MStringPart(pText, this);
    
        return mStringPart;
    }
    
    public MEolPart newEolPart(){
        MEolPart mEolPart;
    
        mEolPart = new MEolPart(this);
    
        return mEolPart;
    }
    
    public MMacroInsert newMacroInsert(){
        MMacroInsert mMacroInsert;
    
        mMacroInsert = new MMacroInsert(this);
    
        return mMacroInsert;
    }
    
    public MParamInsert newParamInsert(){
        MParamInsert mParamInsert;
    
        mParamInsert = new MParamInsert(this);
    
        return mParamInsert;
    }
    
    public MIndentPart newIndentPart(){
        MIndentPart mIndentPart;
    
        mIndentPart = new MIndentPart(this);
    
        return mIndentPart;
    }
    
    public MEndIndentPart newEndIndentPart(){
        MEndIndentPart mEndIndentPart;
    
        mEndIndentPart = new MEndIndentPart(this);
    
        return mEndIndentPart;
    }
    
    public MDirective newDirective(){
        MDirective mDirective;
    
        mDirective = new MDirective(this);
    
        return mDirective;
    }
    
    public MSimpleName newSimpleName(String pName){
        MSimpleName mSimpleName;
    
        mSimpleName = new MSimpleName(pName, this);
    
        return mSimpleName;
    }
    
    public MName newName(){
        MName mName;
    
        mName = new MName(this);
    
        return mName;
    }
    
    public MParentName newParentName(){
        MParentName mParentName;
    
        mParentName = new MParentName(this);
    
        return mParentName;
    }
    
    public MIsAbstract newIsAbstract(){
        MIsAbstract mIsAbstract;
    
        mIsAbstract = new MIsAbstract(this);
    
        return mIsAbstract;
    }
    
    public MIsAllVersionned newIsAllVersionned(){
        MIsAllVersionned mIsAllVersionned;
    
        mIsAllVersionned = new MIsAllVersionned(this);
    
        return mIsAllVersionned;
    }
    
    public MVersions newVersions(){
        MVersions mVersions;
    
        mVersions = new MVersions(this);
    
        return mVersions;
    }
}