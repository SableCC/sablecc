/* This file is part of SableCC ( http://sablecc.org ).
 *
 * See the NOTICE file distributed with this work for copyright information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Package org.sablecc.objectmacro.intermediate.syntax3;

Helpers
    any = [0..0xffff];
    string_char = [any - [[''' + '\'] + [10 + 13]]];

Tokens
    macro_kw = 'Macro';
    param_kw = 'Param';
    param_insert_kw = 'ParamInsert';
    param_name_kw = 'ParamName';
    internal_kw = 'Internal';
    directive_kw = 'Directive';
    name_kw = 'Name';
    macro_ref_kw = 'MacroRef';
    type_kw = 'Type';
    eol_kw = 'eol';
    insert_kw = 'Insert';
    value_kw = 'Value';
    args_kw = 'Args';
    macro_insert_kw = 'MacroInsert';
    var_kw = 'Var';
    macro_body_kw = 'MacroBody';
    indent_kw = 'Indent';
    end_indent_kw = 'EndIndent';
    abstract_kw = 'Abstract';
    version_kw = 'Version';
    parent_kw = 'Parent';
    all_versionned_kw = 'AllVersionned';

    l_brace = '{';
    r_brace = '}';
    assign = '=';
    blank = (' ' | 13 | 10)+;
    string_kw = 'String';
    string = ''' (string_char | '\' ''' | '\\')* ''';
    comma = ',';

Ignored Tokens
    blank;

Productions

    intermediate_representation
        =
            version? [macros]:macro*
                {-> New intermediate_representation([version.versions], [macros])}
        ;

    macro
        =
            macro_kw l_brace abstract_kw? all_versionned_kw? parent_name? name [params]:param* [internals]:internal* macro_body? [versions]:version? r_brace
                {-> New macro(abstract_kw, all_versionned_kw, [parent_name.parent], [name.names], [params], [internals], [macro_body.macro_parts], [versions.versions])};

    version
            {-> [versions]:string*}
        =
            version_kw l_brace [versions]:version_names r_brace
                {-> [versions.versions]}
        ;

    version_names
            {-> [versions]:string*}
        =
            string additional_version_name*
                {-> [string, additional_version_name.version]}
        ;

    additional_version_name
            {-> [version]:string}
        =
            comma string
                {-> string}
        ;

    macro_body
            {-> [macro_parts]:macro_part*}
        =
            macro_body_kw l_brace [macro_parts]:macro_part* r_brace
                {-> [macro_parts]};

    param
        =
            param_kw l_brace name type directives? r_brace
                {-> New param([name.names], type, [directives.directives])} ;
    internal
        =
            internal_kw l_brace name type directives? r_brace
                {-> New internal([name.names], type, [directives.directives])}
        ;


    directives
            {-> [directives]:directive*}
        =
            directive [additional_directives]:additional_directive*
                {-> [directive, additional_directives.directive]}
        ;

    additional_directive
                {-> directive}
        =
            comma directive
                {-> directive}
        ;

    type
        =
            {string} type_kw assign string_kw
                {-> New type.string(string_kw)}
        |
            {macro_refs} type_kw l_brace [macro_refs]:macro_ref* r_brace
                {-> New type.macro_refs([macro_refs])}
        ;

    directive
        =
            directive_kw l_brace name [text_parts]:text_part+ r_brace
                {-> New directive([name.names], [text_parts])}
        ;

    macro_ref
        =
            {identifier} macro_ref_kw l_brace name args? r_brace
                {-> New macro_ref([name.names], [args.values])}
        ;

    args
            {-> [values]:value*}
        =
            args_kw l_brace values r_brace
                {-> [values.values]}
        ;

    values
            {-> [values]:value*}
        =
            value [additional_values]:additional_value*
                {-> [value, additional_values.value]}
        ;

    additional_value
            {-> value}
        =
            comma value
                {-> value}
        ;

    value
        =
            {var} var_kw l_brace param_name name r_brace
                {-> New value.var([param_name.names], [name.names])}
        |
            {string} value_kw l_brace param_name [text_parts]:text_part+ r_brace
                {-> New value.string([param_name.names], [text_parts])}
        ;

    param_name
        { -> [names]:string* }
        =
            param_name_kw l_brace name r_brace
                {-> [name.names]};

    parent_name
            {-> [parent]:string*}
        =
            parent_kw l_brace name r_brace
                {-> [name.names]}
        ;

    name
            {-> [names]:string*}
        =
            {simple} name_kw assign string
                {-> [string]}
        |
            {complex} name_kw assign complex_string
                {-> [complex_string.names]}
        ;

    complex_string
            {-> [names]:string*}
        =
            l_brace string [additional_names]:additional_string* r_brace
                {-> [string, additional_names.string]}
        ;

    additional_string
            {-> string}
        =
            comma string
                {-> string}
        ;

    macro_part
            {-> macro_part }
        =
            {string} string
                {-> New macro_part.string(string)}
        |
            {eol} eol_kw
                {-> New macro_part.eol()}
        |
            {var} param_insert
                {-> New macro_part.var([param_insert.names])}
        |
            {insert} macro_insert
                {-> New macro_part.insert(macro_insert.macro_ref)}
        |
            {indent}  indent
                {-> New macro_part.indent([indent.value])}
        |
            {end_indent} end_indent_kw
                {-> New macro_part.end_indent(end_indent_kw)}
        ;

    indent
            {-> [value]:text_part+}
        =
            indent_kw l_brace [text_parts]:text_part+ r_brace
                {-> [text_parts]}
        ;

    macro_insert
            {-> macro_ref}
        =
            macro_insert_kw l_brace macro_ref r_brace
                {-> macro_ref}
        ;

    text_part
            {-> text_part }
        =
            {string} string
                {-> New text_part.string(string)}
        |
            {var} param_insert
                {-> New text_part.var([param_insert.names])}
        |
            {insert} macro_insert
                {-> New text_part.insert(macro_insert.macro_ref)}
        |
            {eol} eol_kw
                {-> New text_part.eol()}
        ;

    param_insert
            {-> [names]:string*}
        =
            param_insert_kw l_brace name r_brace
                {-> [name.names]}
        ;

Abstract Syntax Tree

    intermediate_representation
        =
            [versions]:string* [macros]:macro*;

    macro =
        [is_abstract]:abstract_kw? [is_all_versionned]:all_versionned_kw? [parent]:string* [names]:string* [params]:param* [internals]:internal* [macro_parts]:macro_part* [versions]:string*;

    param =
        [names]:string* type [directives]:directive*;

    internal =
        [names]:string* type [directives]:directive*;

    type =
        {string} string_kw |
        {macro_refs} macro_ref*;

    directive =
        [names]:string* [parts]:text_part+;

    macro_ref =
        [names]:string* [args]:value*;

    value =
        {var} [param_name]:string* [names]:string* |
        {string} [param_name]:string* [parts]:text_part+;

    macro_part =
        {string} string |
        {eol} |
        {var} [names]:string* |
        {insert} macro_ref |
        {indent} text_part+ |
        {end_indent} end_indent_kw;

    text_part =
        {string} string |
        {var} [names]:string* |
        {insert} macro_ref |
        {eol} ;
