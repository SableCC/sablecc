/* This file is part of SableCC ( http://sablecc.org ).
 *
 * See the NOTICE file distributed with this work for copyright information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

Package org.sablecc.macroprocessor.syntax3;

Helpers

  // Based on Unicode 5.1.0

  ascii_lu = [0x0041 .. 0x005A];
  ascii_ll = [0x0061 .. 0x007A];

  ascii_l = [ascii_lu + ascii_ll];

  ascii_nd = [0x0030 .. 0x0039];

  ascii_n = ascii_nd;

  ascii_pc = 0x005F;
  ascii_pd = 0x002D;
  ascii_ps = [[0x0028 + 0x005B] + 0x007B];
  ascii_pe = [[0x0029 + 0x005D] + 0x007D];
  ascii_po = [[[[0x0021 .. 0x0023] + [0x0025 .. 0x0027]] +
               [[0x002A + 0x002C] + [0x002E .. 0x002F]]] +
              [[[0x003A .. 0x003B] + [0x003F .. 0x0040]] + 0x005C]];

  ascii_p = [[[ascii_pc + ascii_pd] + [ascii_ps + ascii_pe]] + ascii_po];

  ascii_sm = [[0x002B + [0x003C .. 0x003E]] + [0x007C + 0x007E]];
  ascii_sc = 0x0024;
  ascii_sk = [0x005E + 0x0060];

  ascii_s = [[ascii_sm + ascii_sc] + ascii_sk];

  ascii_zs = 0x0020;

  ascii_z = ascii_zs;

  ascii_cc = [[0x0000 .. 0x001F] + 0x007F];

  ascii_c = ascii_cc;

  ascii = [[[ascii_l + ascii_n] + [ascii_p + ascii_s]] + [ascii_z + ascii_c]];

  ascii_pattern_white_space = [[0x0009 .. 0x000D] + 0x0020];
  ascii_pattern_syntax = [[[[0x0021 .. 0x002F] + [0x003A .. 0x0040]] +
                          [[0x005B .. 0x005E] + 0x0060]] + [0x007B .. 0x007E]];

  ascii_id_start = [[0x0041 .. 0x005A] + [0x0061 .. 0x007A]];
  ascii_id_continue = [[[0x0030 .. 0x0039] + [0x0041 .. 0x005A]] +
                       [0x005F + [0x0061 .. 0x007A]]];

  ascii_identifier = ascii_id_start ascii_id_continue*;

  ascii_newline = [0x000A .. 0x000D] | 0x000D 0x000A;

  // Other helpers

  text_char = [[[ascii - ascii_c] + ascii_pattern_white_space] - ['\' + '$']];
  text_escape = '\' ['\' + '$'];

States

  text, command;

Tokens

  {text}
  var = '$' ascii_identifier | '$(' ascii_identifier ')';

  {text}
  text = text_char+;

  {text}
  escape = text_escape;

  {text->command}
  macro_command = '$macro:';

  {text->command}
  end_command = '$end:';

  {command}
  identifier = ascii_identifier;

  {command}
  comma = ',';

  {command}
  l_par = '(';

  {command}
  r_par = ')';

  {command}
  blank = ascii_pattern_white_space+;

  {command->text}
  comment_command = 'comment:';

  {text, command->text}
  command_tail = '$';

  {text}
  invalid_var = '$(' ascii_identifier?;

  {text}
  invalid_command = '$' ascii_identifier ':';

  {command}
  invalid_nested_command = ascii_identifier ':';

Ignored Tokens

  blank;

Productions

  file =
    file_part*;

  file_part =
    {text} text |
    {escape} escape |
    {macro} macro;

  macro =
    macro_head macro_body macro_tail;

  macro_head =
    macro_command identifier l_par identifier_list? r_par comment?
    command_tail;

  identifier_list =
    identifier additional_identifier*;

  additional_identifier =
    comma identifier;

  comment =
    comment_command comment_part*;

  comment_part =
    {text} text |
    {escape} escape;

  macro_body =
    macro_body_part*;

  macro_body_part =
    {var} var |
    {text} text |
    {escape} escape |
    {macro} macro;

  macro_tail =
    end_command identifier comment? command_tail;
